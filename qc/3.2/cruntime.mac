;********************************************************
;							*
;	Q/C Runtime Library Version 3.2 (Z80)		*
;   Copyright (c) 1984 by Quality Computer Systems	*
;							*
;	Includes improved routines by Kirk Bailey:	*
;	  ?e,?ne,?gt,?ugt,lt,?ult,?le,?ule,		*
;	  ?ge,?uge,?s,?neg,?mult,?div			*
;							*
;			01/03/84			*
;********************************************************
;
	.Z80
;
;Get byte from the address in BC and sign extend into HL
	PUBLIC	?gcf
?gcf:	LD	L,C
	LD	H,B
;Get byte from the address in HL and sign extend into HL
	PUBLIC	?gc
?gc:	LD	A,(HL)
;Put the accum into HL and sign extend thru H
	PUBLIC	?sxt
?sxt:	LD	L,A
	RLCA
	SBC	A,A
	LD	H,A
	RET
;Get byte from the address in HL and sign extend into DE
	PUBLIC	?gcs
?gcs:	LD	A,(HL)
	LD	E,A
	RLCA
	SBC	A,A
	LD	D,A
	RET
;Get a 16 bit integer from the address in BC into HL
	PUBLIC	?gf
?gf:	LD	L,C
	LD	H,B
;Get a 16 bit integer from the address in HL into HL
	PUBLIC	?g
?g:	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A
	RET
;Get a 16 bit integer from the address in HL into DE
	PUBLIC	?gs
?gs:	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	RET
;Store a 16 bit integer in HL at the address in DE
	PUBLIC	?p
?p:	LD	A,L
	LD	(DE),A
	INC	DE
	LD	A,H
	LD	(DE),A
	RET
;Inclusive OR HL and DE into HL
	PUBLIC	?o
?o:	LD	A,L
	OR	E
	LD	L,A
	LD	A,H
	OR	D
	LD	H,A
	RET
;Exclusive OR HL and DE into HL
	PUBLIC	?x
?x:	LD	A,L
	XOR	E
	LD	L,A
	LD	A,H
	XOR	D
	LD	H,A
	RET
;AND HL and DE into HL
	PUBLIC	?a
?a:	LD	A,L
	AND	E
	LD	L,A
	LD	A,H
	AND	D
	LD	H,A
	RET
;All of the following compare routines return with:
;	if condition = TRUE	HL = 1 and Z flag is reset
;	if condition = FALSE	HL = 0 and Z flag is set
;
;For a signed compare the positive and negative numbers
;are first mapped into unsigned numbers by doing an
;exclusive or of the sign bit with one. This allows us
;to do an unsigned compare and still get the correct result.
;The mapping looks like this:
;
;	-32768 (0x8000) --> 0	  (0x0000)
;	-32767 (0x8001) --> 1	  (0x0001)
;	 .....
;	    -1 (0xFFFF) --> 32767 (0x7FFF)
;	     0 (0x0000) --> 32768 (0x8000)
;	     1 (0x0001) --> 32769 (0x8001)
;	 .....
;	 32766 (0x7FFE) --> 65534 (0xFFFE)
;	 32767 (0x7FFF) --> 65535 (0xFFFF)

;Test DE == HL
	PUBLIC	?e
?e:	XOR	A	;clear carry
	SBC	HL,DE
	JR	Z,?true
	LD	H,A	;preset false code (hl=0)
	LD	L,A
	XOR	A	;set zero flag
	RET
;Test DE != HL
	PUBLIC	?ne
?ne:	XOR	A	;clear carry
	SBC	HL,DE
	RET	Z
	LD	H,A
	LD	L,A
?true:	INC	L	;indicate true (hl=1), and clear zero flag
	RET
;Test DE >  HL (signed and unsigned)
	PUBLIC	?gt
	PUBLIC	?ugt
?gt:	LD	A,D	;map signed numbers into unsigned
	XOR	80H
	LD	D,A
	LD	A,H
	XOR	80H
	LD	H,A
?ugt:	XOR	A	;clear carry
	SBC	HL,DE
	LD	H,A
	LD	L,A
	JR	C,?true
	XOR	A
	RET
;Test DE < HL (signed and unsigned)
	PUBLIC	?lt
	PUBLIC	?ult
?lt:	LD	A,D	;map signed numbers into unsigned
	XOR	80H
	LD	D,A
	LD	A,H
	XOR	80H
	LD	H,A
?ult:	EX	DE,HL
	XOR	A	;clear carry
	SBC	HL,DE
	LD	H,A
	LD	L,A
	JR	C,?true
	XOR	A
	RET
;Test DE <= HL (signed and unsigned)
	PUBLIC	?le
	PUBLIC	?ule
?le:	LD	A,D	;map signed numbers into unsigned
	XOR	80H
	LD	D,A
	LD	A,H
	XOR	80H
	LD	H,A
?ule:	XOR	A	;clear carry
	SBC	HL,DE
	LD	H,A
	LD	L,A
	JR	NC,?true
	XOR	A
	RET
;Test DE >= HL (signed and unsigned)
	PUBLIC	?ge
	PUBLIC	?uge
?ge:	LD	A,D	;map signed numbers into unsigned
	XOR	80H
	LD	D,A
	LD	A,H
	XOR	80H
	LD	H,A
?uge:	EX	DE,HL
	XOR	A	;clear carry
	SBC	HL,DE
	LD	H,A
	LD	L,A
	JR	NC,?true
	XOR	A
	RET
;Shift DE arithmetically right by HL and return in HL
	PUBLIC	?asr
	PUBLIC	?asr1
?asr:	EX	DE,HL
?asr1:	DEC	E
	RET	M
	SRA	H
	RR	L
	JR	?asr1
;Shift DE arithmetically and logically left by HL and return in HL
	PUBLIC	?asl
	PUBLIC	?asl1
?asl:	EX	DE,HL
?asl1:	DEC	E
	RET	M
	ADD	HL,HL
	JR	?asl1
;Shift DE logically right by HL and return in HL
	PUBLIC	?lsr
	PUBLIC	?lsr1
?lsr:	EX	DE,HL
?lsr1:	DEC	E
	RET	M
	SRL	H
	RR	L
	JR	?lsr1
;Subtract (signed and unsigned) HL from DE and return in HL
	PUBLIC	?s
?s:	EX	DE,HL
	XOR	A	;clear carry
	SBC	HL,DE
	RET
;Form the two's complement of HL
	PUBLIC	?neg
?neg:	LD	A,H
	CPL
	LD	H,A
	LD	A,L
	CPL
	LD	L,A
	INC	HL
	RET
;Form the one's complement of HL
	PUBLIC	?com
?com:	LD	A,H
	CPL
	LD	H,A
	LD	A,L
	CPL
	LD	L,A
	RET
;Form logical not of HL
	PUBLIC	?n
?n:	LD	A,H
	OR	L
	JR	Z,?not1
	XOR	A	;set Z to indicate FALSE
	LD	H,A	;set HL=0 to indicate FALSE
	LD	L,A
	RET
?not1:	INC	L	;set HL=1 and reset Z to indicate TRUE
	RET
;Multiply (signed and unsigned) DE by HL and return in HL
	PUBLIC	?mult
?mult:	LD	A,H	;see if we can use an 8*16 multiply
	OR	A
	LD	A,L	;we will first do the low order byte in any case
	LD	L,H	;if we can do the 8*16 one, this will clear hl
	JR	Z,?mult5	;Jump if we can do an 8*16
	PUSH	BC	;have to do 16*16, save frame pointer
	LD	C,H	;save high order half of hl
	LD	HL,0	;result = 0
	LD	B,8	;takes 8 shift/add's to get low order half done
?mult1:	SRL	A	;put low order bit in carry
	JR	NC,?mult2	;if zero skip add on this pass
	ADD	HL,DE	;otherwise do addition of shifted de
?mult2:	SLA	E	;shift de left 1 bit
	RL	D
	DJNZ	?mult1
	LD	A,C	;get high order byte to operate on
	POP	BC	;restore frame pointer
	JR	?mult5
?mult3:	ADD	HL,DE	;do addition of shifted de
?mult4:	SLA	E	;shift de left 1 bit
	RL	D
?mult5:	SRL	A	;Put low order bit in carry
	JR	C,?mult3	;if we need to add a copy of de to hl
	JR	NZ,?mult4	;if we are not done
	RET
;Divide (signed) DE by HL and return quotient in HL remainder in DE
	PUBLIC	?div
?div:	LD	A,H
	XOR	D	;sign of quotient
	PUSH	AF	;save to fix sign at end
	LD	A,H
	OR	A	;divisor negative?
	JP	P,?div1
	CPL		;if so make it positive
	LD	H,A
	LD	A,L
	CPL
	LD	L,A
	INC	HL
?div1:	LD	A,D
	OR	A	;sign of dividend = sign of remainder
	PUSH	AF
	JP	P,?div2 ;if dividend positive, we're ready
	CPL		;otherwise, make it positive
	LD	D,A
	LD	A,E
	CPL
	LD	E,A
	INC	DE
?div2:	CALL	?udiv	;do unsigned division
	POP	AF	;remainder negative?
	JP	P,?div3
	LD	A,D	;if so, make it negative
	CPL
	LD	D,A
	LD	A,E
	CPL
	LD	E,A
	INC	DE
?div3:	POP	AF	;quotient negative?
	RET	P
	LD	A,H	;yep, make it negative
	CPL
	LD	H,A
	LD	A,L
	CPL
	LD	L,A
	INC	HL
	RET
;
;Divide (unsigned) DE by HL and return quotient in HL remainder in DE
	PUBLIC	?udiv
?udiv:	LD	A,H	;check for division by zero
	OR	L
	JR	NZ,?udiv0
	LD	E,L	;force remainder to zero
	LD	D,H
	RET
?udiv0: PUSH	BC	;save calling routine's stack frame pointer
	LD	B,H	;move divisor to BC
	LD	C,L
	LD	HL,0	;we actually compute hl,de/bc
	LD	A,16	;set loop counter
	EX	DE,HL		;--------------------------------
?udiv1:	ADD	HL,HL		; this chunk is an efficiency	|
	JR	C,?udiv3	; hack for divisons with small	|
	DEC	A		; dividends			|
	JR	NZ,?udiv1	;				|
	POP	BC		;				|
	RET			;--------------------------------
?udiv2:	EX	DE,HL	;shift 1 bit from de into hl
	ADD	HL,HL
?udiv3:	EX	DE,HL
	ADC	HL,HL
	SBC	HL,BC	;will divisor go in yet?
	JR	NC,?udiv5
	ADD	HL,BC	;no, restore hl
?udiv4:	DEC	A	;update counter
	JR	NZ,?udiv2
	EX	DE,HL	;hl=quotient, de=remainder
	POP	BC	;restore frame pointer
	RET
?udiv5:	INC	DE	;increment quotient
	JR	?udiv4
;
;Select the appropriate case for a switch statement
	PUBLIC	?sw
?sw:	EX	DE,HL	;save val of expression in DE
	POP	HL	;get address of arg list
	PUSH	BC	;save calling routine's stack frame pointer
	LD	C,(HL)	;load no. of cases in C
	INC	HL	;ignore high order byte of count
?sw1:	DEC	C	;count down cases
	JP	M,?sw3	;no more cases -- goto default
	INC	HL	;val of expr == case val?
	LD	A,(HL)
	CP	E
	INC	HL
	JR	NZ,?sw2 ;no, goto next case
	LD	A,(HL)
	CP	D
	JR	Z,?sw3	;yes, goto matching label
?sw2:	INC	HL	;skip label for this case
	INC	HL
	JR	?sw1	;go try next case
?sw3:	INC	HL	;get address of this case label
	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A
	POP	BC	;restore calling routine's stack frame pointer
	JP	(HL)	;go to case label
;
;Standard entry/exit routines to do housekeeping
;
;Entry which sets stack frame pointer, but does not save registers,
; and does not allocate local space
	PUBLIC	?en
?en:	POP	HL	;get RET addr
	PUSH	BC	;save stack frame pointer
	LD	IX,0	;no local space needed
	ADD	IX,SP
	PUSH	IX
	POP	BC	;set local stack frame pointer
	JP	(HL)	;return
;
;Entry which sets stack frame pointer, saves registers,
; but does not allocate local space
	PUBLIC	?enr
?enr:	POP	DE	;get RET addr
	PUSH	BC	;save stack frame pointer
	LD	IX,0	;no local space needed
	ADD	IX,SP
	PUSH	IX
	POP	BC	;set local stack frame pointer
	LD	HL,(r?1?) ;save Q/C "registers"
	PUSH	HL
	LD	HL,(r?2?)
	PUSH	HL
	LD	HL,(r?3?)
	PUSH	HL
	LD	HL,(r?4?)
	PUSH	HL
	LD	HL,(r?5?)
	PUSH	HL
	EX	DE,HL	;retrieve return address
	JP	(HL)
;
;Entry which saves registers, sets stack frame pointer,
; and allocates local space
	PUBLIC	?ensr
?ensr:	POP	HL	;get RET addr which contains local space needed
	PUSH	BC	;save stack frame pointer
	LD	E,(HL)	;get local space needed
	INC	HL
	LD	D,(HL)
	INC	HL	;skip over argument to this routine
	EX	DE,HL	;RET address <--> local space needed
	ADD	HL,SP
	LD	SP,HL	;reserve local space
	LD	B,H	;set local stack frame
	LD	C,L
	PUSH	BC
	POP	IX	;set index register
	LD	HL,(r?1?) ;save Q/C "registers"
	PUSH	HL
	LD	HL,(r?2?)
	PUSH	HL
	LD	HL,(r?3?)
	PUSH	HL
	LD	HL,(r?4?)
	PUSH	HL
	LD	HL,(r?5?)
	PUSH	HL
	EX	DE,HL	;retrieve return address
	JP	(HL)
;
;Entry which sets stack frame pointer, allocates local space,
; but does not save registers
	PUBLIC	?ens
?ens:	POP	HL	;get RET addr
	PUSH	BC	;save stack frame pointer
	LD	E,(HL)	;get local space needed
	INC	HL
	LD	D,(HL)
	INC	HL	;skip over argument to this routine
	EX	DE,HL	;RET address <--> local space needed
	ADD	HL,SP
	LD	SP,HL	;reserve local space
	LD	B,H	;set local stack frame
	LD	C,L
	PUSH	BC
	POP	IX	;set index register
	EX	DE,HL	;retrieve return address
	JP	(HL)
;
;Exit which restores registers and stack frame pointer
; but does not deallocate any local space
	PUBLIC	?exr
?exr:	EX	DE,HL	;save function's return value (if any)
	POP	HL	;discard extra RET address
	POP	HL	;restore registers
	LD	(r?5?),HL
	POP	HL
	LD	(r?4?),HL
	POP	HL
	LD	(r?3?),HL
	POP	HL
	LD	(r?2?),HL
	POP	HL
	LD	(r?1?),HL
	EX	DE,HL	;restore return value
	POP	BC	;restore stack frame pointer
	PUSH	BC
	POP	IX	;  and index register
	RET		;return to original caller
;
;Exit which restores registers and stack frame pointer
; and deallocates local space
	PUBLIC	?exrs
?exrs:	EX	DE,HL	;save function's return value (if any)
	POP	BC	;RET addr = addr of local space to deallocate
	POP	HL	;restore registers
	LD	(r?5?),HL
	POP	HL
	LD	(r?4?),HL
	POP	HL
	LD	(r?3?),HL
	POP	HL
	LD	(r?2?),HL
	POP	HL
	LD	(r?1?),HL
	LD	A,(BC)	;get amount of local space
	LD	L,A
	INC	BC
	LD	A,(BC)
	LD	H,A
	ADD	HL,SP
	LD	SP,HL	;deallocate local space
	EX	DE,HL	;restore return value
	POP	BC	;restore stack frame pointer
	PUSH	BC
	POP	IX	;  and index register
	RET
;
;Exit which restores stack frame pointer, deallocates local space
; but does not restore registers
	PUBLIC	?exs
?exs:	EX	DE,HL	;save function's return value (if any)
	POP	HL	;address of local space to deallocate
	LD	A,(HL)	;get amount of local space
	INC	HL
	LD	H,(HL)
	LD	L,A
	ADD	HL,SP
	LD	SP,HL	;deallocate local space
	EX	DE,HL	;restore return value
	POP	BC	;restore stack frame pointer
	PUSH	BC
	POP	IX	;  and index register
	RET
;
;Define C "register" variables
;
	DSEG
	PUBLIC	r?1?,r?2?,r?3?,r?4?,r?5?
r?1?:	DEFS	2
r?2?:	DEFS	2
r?3?:	DEFS	2
r?4?:	DEFS	2
r?5?:	DEFS	2
;
;Define end-of-memory symbols for M80 and RMAC linkers and
;	Q/C memory allocation functions
	PUBLIC	$MEMRY,?MEMRY,@free?
$MEMRY:
?MEMRY:
@free?: DEFS	2

	END
DEC	E
	RET	M
	SRA	H
	RR	L
	JR	?