 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 1 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


       1/       0 :                     ; Reformatted and converted for cross-assembly by Macro Assembler AS
       2/       0 :                     ; Eric Smith <spacewar@gmail.com> 2018-01-24
       3/       0 :                     ; from original source os3bdos.asm from
       4/       0 :                     ;   http://www.cpm.z80.de/download/cpm2-plm.zip
       5/       0 :                     ; includes Digital Research CP/M V2.2 Patch 01 (cpm22pat.01) from
       6/       0 :                     ;   http://www.cpm.z80.de/download/cpm22pat.zip
       7/       0 :                     
       8/       0 :                     ; Changes:
       9/       0 :                     ;   multiple instructions per line split to separate lines
      10/       0 :                     ;   dollar sign in labels replaced by underscore
      11/       0 :                     ;   dollar sign (as digit separator) in binary constants removed
      12/       0 :                     ;   no colons for labels for equates
      13/       0 :                     ;   single quotes around strings replaced with double quotes
      14/       0 :                     ;   true and false replaced with _true and _false
      15/       0 :                     ;   eliminated equates for 8080 registers, added comments introduced with %
      16/       0 :                     ;   replaced "not", "and" operators with "~", "&"
      17/       0 :                     ;   removed empty comments
      18/       0 :                     ;   added ifdef origin to allow origin to be specified from command line
      19/       0 :                     ;   added commments about serial number
      20/       0 :                     
      21/       0 :                     	.cpu	8080
      22/       0 :                     
      23/       0 : =1H                 patch1	equ	1
      24/       0 :                     
      25/       0 :                     
      26/       0 :                     	title	"Bdos Interface, Bdos, Version 2.2 Feb, 1980"
      27/       0 :                     ;*****************************************************************
      28/       0 :                     ;*****************************************************************
      29/       0 :                     ;**                                                             **
      30/       0 :                     ;**   B a s i c    D i s k   O p e r a t i n g   S y s t e m    **
      31/       0 :                     ;**            I n t e r f a c e   M o d u l e                   **
      32/       0 :                     ;**                                                             **
      33/       0 :                     ;*****************************************************************
      34/       0 :                     ;*****************************************************************
      35/       0 :                     ;
      36/       0 :                     ;	Copyright (c) 1978, 1979, 1980
      37/       0 :                     ;	Digital Research
      38/       0 :                     ;	Box 579, Pacific Grove
      39/       0 :                     ;	California
      40/       0 :                     ;
      41/       0 :                     ;
      42/       0 :                     ;      20 january 1980
      43/       0 :                     ;
      44/       0 :                     ;
      45/       0 : =FFFFH              on	equ	0ffffh
      46/       0 : =0H                 off	equ	00000h
      47/       0 : =FFFFH              test	equ	on
      48/       0 :                     
      49/       0 : =>UNDEFINED         	ifdef	origin
      50/       0 :                     	org	origin
      51/       0 : =>TRUE              	else
      52/       0 : =>TRUE              	if	test
      53/    9D00 :                     	org	09d00h
      54/    9D00 : =>FALSE             	else
      55/    9D00 :                     	org	0800h
      56/    9D00 : [52]                	endif
      57/    9D00 : [49]                	endif
      58/    9D00 :                     ;	bios value defined at end of module
      59/    9D00 :                     
      60/    9D00 : =18H                ssize	equ	24		;24 level stack
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 2 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


      61/    9D00 :                     
      62/    9D00 :                     ;	low memory locations
      63/    9D00 : =0H                 reboot	equ	0000h		;reboot system
      64/    9D00 : =3H                 ioloc	equ	0003h		;i/o byte location
      65/    9D00 : =6H                 bdosa	equ	0006h		;address field of jmp BDOS
      66/    9D00 :                     
      67/    9D00 :                     ;	bios access constants
      68/    9D00 : =AB00H              bootf	set	bios+3*0	;cold boot function
      69/    9D00 : =AB03H              wbootf	set	bios+3*1	;warm boot function
      70/    9D00 : =AB06H              constf	set	bios+3*2	;console status function
      71/    9D00 : =AB09H              coninf	set	bios+3*3	;console input function
      72/    9D00 : =AB0CH              conoutf	set	bios+3*4	;console output function
      73/    9D00 : =AB0FH              listf	set	bios+3*5	;list output function
      74/    9D00 : =AB12H              punchf	set	bios+3*6	;punch output function
      75/    9D00 : =AB15H              readerf	set	bios+3*7	;reader input function
      76/    9D00 : =AB18H              homef	set	bios+3*8	;disk home function
      77/    9D00 : =AB1BH              seldskf	set	bios+3*9	;select disk function
      78/    9D00 : =AB1EH              settrkf	set	bios+3*10	;set track function
      79/    9D00 : =AB21H              setsecf	set	bios+3*11	;set sector function
      80/    9D00 : =AB24H              setdmaf	set	bios+3*12	;set dma function
      81/    9D00 : =AB27H              readf	set	bios+3*13	;read disk function
      82/    9D00 : =AB2AH              writef	set	bios+3*14	;write disk function
      83/    9D00 : =AB2DH              liststf	set	bios+3*15	;list status function
      84/    9D00 : =AB30H              sectran	set	bios+3*16	;sector translate
      85/    9D00 :                     
      86/    9D00 :                     ;	equates for non graphic characters
      87/    9D00 : =3H                 ctlc	equ	03h	;control c
      88/    9D00 : =5H                 ctle	equ	05h	;physical eol
      89/    9D00 : =8H                 ctlh	equ	08h	;backspace
      90/    9D00 : =10H                ctlp	equ	10h	;prnt toggle
      91/    9D00 : =12H                ctlr	equ	12h	;repeat line
      92/    9D00 : =13H                ctls	equ	13h	;stop/start screen
      93/    9D00 : =15H                ctlu	equ	15h	;line delete
      94/    9D00 : =18H                ctlx	equ	18h	;=ctl-u
      95/    9D00 : =1AH                ctlz	equ	1ah	;end of file
      96/    9D00 : =7FH                rubout	equ	7fh	;char delete
      97/    9D00 : =9H                 tab	equ	09h	;tab char
      98/    9D00 : =DH                 cr	equ	0dh	;carriage return
      99/    9D00 : =AH                 lf	equ	0ah	;line feed
     100/    9D00 : =5EH                ctl	equ	5eh	;up arrow
     101/    9D00 :                     
     102/    9D00 :                     ; serial number (not documented in original DRI source file)
     103/    9D00 : 00                  	db	0	; OEM number, low byte
     104/    9D01 : 00                  	db	0	; CP/M version, 16h = 2.2
     105/    9D02 : 00                  	db	0	; OEM number, high byte
     106/    9D03 : 00 00 00            	db	0,0,0	; serial number, big-endian
     107/    9D06 :                     
     108/    9D06 :                     ;	enter here from the user's program with function number in c,
     109/    9D06 :                     ;	and information address in d,e
     110/    9D06 : C3 11 9D            	jmp	bdose	;past parameter block
     111/    9D09 :                     
     112/    9D09 :                     ;	************************************************
     113/    9D09 :                     ;	*** relative locations 0009 - 000e           ***
     114/    9D09 :                     ;	************************************************
     115/    9D09 : 99 9D               pererr:	dw	persub	;permanent error subroutine
     116/    9D0B : A5 9D               selerr:	dw	selsub	;select error subroutine
     117/    9D0D : AB 9D               roderr:	dw	rodsub	;ro disk error subroutine
     118/    9D0F : B1 9D               roferr:	dw	rofsub	;ro file error subroutine
     119/    9D11 :                     
     120/    9D11 :                     
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 3 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


     121/    9D11 :                     bdose:				;arrive here from user programs
     122/    9D11 : EB                  	xchg			;info=DE, DE=info
     123/    9D12 : 22 43 A0            	shld	info
     124/    9D15 : EB                  	xchg
     125/    9D16 : 7B                  	mov	a,e		;linfo = low(info) - don't equ
     126/    9D17 : 32 D6 AA            	sta	linfo
     127/    9D1A : 21 00 00            	lxi	h,0		;return value defaults to 0000
     128/    9D1D : 22 45 A0            	shld	aret
     129/    9D20 :                     	;save user's stack pointer, set to local stack
     130/    9D20 : 39                  	dad	sp		;entsp = stackptr
     131/    9D21 : 22 0F A0            	shld	entsp
     132/    9D24 : 31 41 A0            	lxi	sp,lstack	;local stack setup
     133/    9D27 : AF                  	xra	a		;fcbdsk,resel=false
     134/    9D28 : 32 E0 AA            	sta	fcbdsk
     135/    9D2B : 32 DE AA            	sta	resel
     136/    9D2E : 21 74 AA            	lxi	h,goback	;return here after all functions
     137/    9D31 : E5                  	push	h		;jmp goback equivalent to ret
     138/    9D32 : 79                  	mov	a,c		;skip if invalid #
     139/    9D33 : FE 29               	cpi	nfuncs
     140/    9D35 : D0                  	rnc
     141/    9D36 : 4B                  	mov	c,e		;possible output character to C
     142/    9D37 : 21 47 9D            	lxi	h,functab	;DE=func, HL=.ciotab
     143/    9D3A : 5F                  	mov	e,a
     144/    9D3B : 16 00               	mvi	d,0
     145/    9D3D : 19                  	dad	d		;DE=functab(func)
     146/    9D3E : 19                  	dad	d
     147/    9D3F : 5E                  	mov	e,m
     148/    9D40 : 23                  	inx	h
     149/    9D41 : 56                  	mov	d,m
     150/    9D42 : 2A 43 A0            	lhld	info		;info in DE for later xchg	
     151/    9D45 : EB                  	xchg			;dispatched
     152/    9D46 : E9                  	pchl
     153/    9D47 :                     
     154/    9D47 :                     ;	dispatch table for functions
     155/    9D47 :                     functab:
     156/    9D47 : 03 AB C8 9F 90 9E   	dw	wbootf, func1, func2, func3
                    CE 9F 
     157/    9D4F : 12 AB 0F AB D4 9F   	dw	punchf, listf, func6, func7
                    ED 9F 
     158/    9D57 : F3 9F F8 9F E1 9E   	dw	func8, func9, func10,func11
                    FE 9F 
     159/    9D5F : =CH                 diskf	equ	($-functab)/2	;disk funcs
     160/    9D5F : 7E A9 83 A9 45 A9   	dw	func12,func13,func14,func15
                    9C A9 
     161/    9D67 : A5 A9 AB A9 C8 A9   	dw	func16,func17,func18,func19
                    D7 A9 
     162/    9D6F : E0 A9 E6 A9 EC A9   	dw	func20,func21,func22,func23
                    F5 A9 
     163/    9D77 : FE A9 04 AA 0A AA   	dw	func24,func25,func26,func27
                    11 AA 
     164/    9D7F : 2C A2 17 AA 1D AA   	dw	func28,func29,func30,func31
                    26 AA 
     165/    9D87 : 2D AA 41 AA 47 AA   	dw	func32,func33,func34,func35
                    4D AA 
     166/    9D8F : 0E A9 53 AA 04 A0   	dw	func36,func37,func38,func39
                    04 A0 
     167/    9D97 : 9B AA               	dw	func40
     168/    9D99 : =29H                nfuncs	equ	($-functab)/2
     169/    9D99 :                     
     170/    9D99 :                     
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 4 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


     171/    9D99 :                     ;	error subroutines
     172/    9D99 :                     persub:	;report permanent error
     173/    9D99 : 21 CA 9D            	lxi	h,permsg	;to report the error
     174/    9D9C : CD E5 9D            	call	errflg
     175/    9D9F : FE 03               	cpi	ctlc		;reboot if response is ctlc
     176/    9DA1 : CA 00 00            	jz	reboot
     177/    9DA4 : C9                  	ret			;and ignore the error
     178/    9DA5 :                     
     179/    9DA5 :                     selsub:	;report select error
     180/    9DA5 : 21 D5 9D            	lxi	h,selmsg	;wait console before boot
     181/    9DA8 : C3 B4 9D            	jmp	wait_err
     182/    9DAB :                     ;
     183/    9DAB :                     rodsub:	;report write to read/only disk
     184/    9DAB : 21 E1 9D            	lxi	h,rodmsg	;wait console
     185/    9DAE : C3 B4 9D            	jmp	wait_err
     186/    9DB1 :                     ;
     187/    9DB1 :                     rofsub:	;report read/only file
     188/    9DB1 : 21 DC 9D            	lxi	h,rofmsg	;drop through to wait for console
     189/    9DB4 :                     ;
     190/    9DB4 :                     wait_err:
     191/    9DB4 :                     	;wait for response before boot
     192/    9DB4 : CD E5 9D            	call	errflg
     193/    9DB7 : C3 00 00            	jmp	reboot
     194/    9DBA :                     
     195/    9DBA :                     ;	error messages
     196/    9DBA : 42 64 6F 73 20 45   dskmsg:	db	"Bdos Err On "
                    72 72 20 4F 6E 20 
     197/    9DC6 : 20 3A 20 24         dskerr:	db	" : $"	;filled in by errflg
     198/    9DCA : 42 61 64 20 53 65   permsg:	db	"Bad Sector$"
                    63 74 6F 72 24 
     199/    9DD5 : 53 65 6C 65 63 74   selmsg:	db	"Select$"
                    24 
     200/    9DDC : 46 69 6C 65 20      rofmsg:	db	"File "
     201/    9DE1 : 52 2F 4F 24         rodmsg:	db	"R/O$"
     202/    9DE5 :                     
     203/    9DE5 :                     
     204/    9DE5 :                     errflg:
     205/    9DE5 :                     	;report error to console, message address in HL
     206/    9DE5 : E5                  	push	h		;stack mssg address, new line
     207/    9DE6 : CD C9 9E            	call	crlf
     208/    9DE9 : 3A 42 A0            	lda	curdsk		;current disk name
     209/    9DEC : C6 41               	adi	'A'
     210/    9DEE : 32 C6 9D            	sta	dskerr
     211/    9DF1 : 01 BA 9D            	lxi	b,dskmsg	;the error message
     212/    9DF4 : CD D3 9E            	call	print
     213/    9DF7 : C1                  	pop	b		;error mssage tail
     214/    9DF8 : CD D3 9E            	call	print
     215/    9DFB :                     	;jmp	conin		;to get the input character			
     216/    9DFB :                     	;(drop through to conin)
     217/    9DFB :                     	;ret
     218/    9DFB :                     
     219/    9DFB :                     
     220/    9DFB :                     ;	console handlers
     221/    9DFB :                     conin:
     222/    9DFB :                     	;read console character to A
     223/    9DFB : 21 0E A0            	lxi	h,kbchar
     224/    9DFE : 7E                  	mov	a,m
     225/    9DFF : 36 00               	mvi	m,0
     226/    9E01 : B7                  	ora	a
     227/    9E02 : C0                  	rnz
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 5 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


     228/    9E03 :                     	;no previous keyboard character ready
     229/    9E03 : C3 09 AB            	jmp	coninf		;get character externally
     230/    9E06 :                     	;ret
     231/    9E06 :                     
     232/    9E06 :                     conech:
     233/    9E06 :                     	;read character with echo
     234/    9E06 : CD FB 9D            	call	conin		;echo character?
     235/    9E09 : CD 14 9E            	call	echoc
     236/    9E0C : D8                  	rc 
     237/    9E0D :                             ;character must be echoed before return
     238/    9E0D : F5                  	push	psw
     239/    9E0E : 4F                  	mov	c,a
     240/    9E0F : CD 90 9E            	call	tabout
     241/    9E12 : F1                  	pop	psw
     242/    9E13 : C9                  	ret			;with character in A
     243/    9E14 :                     
     244/    9E14 :                     echoc:
     245/    9E14 :                     	;echo character if graphic
     246/    9E14 :                     	;cr, lf, tab, or backspace
     247/    9E14 : FE 0D               	cpi	cr		;carriage return?
     248/    9E16 : C8                  	rz
     249/    9E17 : FE 0A               	cpi	lf		;line feed?
     250/    9E19 : C8                  	rz
     251/    9E1A : FE 09               	cpi	tab		;tab?
     252/    9E1C : C8                  	rz
     253/    9E1D : FE 08               	cpi	ctlh		;backspace?
     254/    9E1F : C8                  	rz
     255/    9E20 : FE 20               	cpi	' '		;carry set if not graphic
     256/    9E22 : C9                  	ret 
     257/    9E23 :                     
     258/    9E23 :                     conbrk:	;check for character ready
     259/    9E23 : 3A 0E A0            	lda	kbchar		;skip if active kbchar
     260/    9E26 : B7                  	ora	a
     261/    9E27 : C2 45 9E            	jnz	conb1
     262/    9E2A :                     	;no active kbchar, check external break
     263/    9E2A : CD 06 AB            	call	constf		;return if no char ready
     264/    9E2D : E6 01               	ani	1
     265/    9E2F : C8                  	rz
     266/    9E30 :                     	;character ready, read it
     267/    9E30 : CD 09 AB            	call	coninf		;to A
     268/    9E33 : FE 13               	cpi	ctls		;check stop screen function
     269/    9E35 : C2 42 9E            	jnz	conb0
     270/    9E38 :                     	;found ctls, read next character
     271/    9E38 : CD 09 AB            	call	coninf		;to A
     272/    9E3B : FE 03               	cpi	ctlc		;ctlc implies re-boot
     273/    9E3D : CA 00 00            	jz	reboot
     274/    9E40 :                     	;not a reboot, act as if nothing has happened
     275/    9E40 : AF                  	xra a			;with zero in accumulator
     276/    9E41 : C9                  	ret
     277/    9E42 :                     conb0:	;character in accum, save it
     278/    9E42 : 32 0E A0            	sta	kbchar
     279/    9E45 :                     conb1:	;return with true set in accumulator
     280/    9E45 : 3E 01               	mvi	a,1
     281/    9E47 : C9                  	ret
     282/    9E48 :                     
     283/    9E48 :                     conout:
     284/    9E48 :                     	;compute character position/write console char from C
     285/    9E48 :                     	;compcol = true if computing column position
     286/    9E48 : 3A 0A A0            	lda	compcol
     287/    9E4B : B7                  	ora	a
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 6 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


     288/    9E4C : C2 62 9E            	jnz	compout
     289/    9E4F :                     	;write the character, then compute the column
     290/    9E4F :                     	;write console character from C
     291/    9E4F : C5                  	push	b		;check for screen stop function
     292/    9E50 : CD 23 9E            	call	conbrk
     293/    9E53 : C1                  	pop	b		;recall/save character
     294/    9E54 : C5                  	push	b
     295/    9E55 : CD 0C AB            	call	conoutf		;externally, to console
     296/    9E58 : C1                  	pop	b		;recall/save character
     297/    9E59 : C5                  	push	b
     298/    9E5A :                     	;may be copying to the list device
     299/    9E5A : 3A 0D A0            	lda	listcp		;to printer, if so
     300/    9E5D : B7                  	ora	a
     301/    9E5E : C4 0F AB            	cnz	listf
     302/    9E61 : C1                  	pop	b		;recall the character
     303/    9E62 :                     compout:
     304/    9E62 : 79                  	mov	a,c		;recall the character
     305/    9E63 :                     	;and compute column position
     306/    9E63 : 21 0C A0            	lxi	h,column	;A = char, HL = .column
     307/    9E66 : FE 7F               	cpi	rubout		;no column change if nulls
     308/    9E68 : C8                  	rz
     309/    9E69 : 34                  	inr	m		;column = column + 1
     310/    9E6A : FE 20               	cpi	' '		;return if graphic
     311/    9E6C : D0                  	rnc
     312/    9E6D :                     	;not graphic, reset column position
     313/    9E6D : 35                  	dcr	m		;column = column - 1
     314/    9E6E : 7E                  	mov	a,m		;return if at zero
     315/    9E6F : B7                  	ora	a
     316/    9E70 : C8                  	rz
     317/    9E71 :                     	;not at zero, may be backspace or end line
     318/    9E71 : 79                  	mov	a,c		;character back to A
     319/    9E72 : FE 08               	cpi	ctlh
     320/    9E74 : C2 79 9E            	jnz	notbacksp
     321/    9E77 :                     	;backspace character
     322/    9E77 : 35                  	dcr	m		;column = column - 1
     323/    9E78 : C9                  	ret
     324/    9E79 :                     notbacksp:
     325/    9E79 :                     	;not a backspace character, eol?
     326/    9E79 : FE 0A               	cpi	lf		;return if not
     327/    9E7B : C0                  	rnz
     328/    9E7C :                     	;end of line, column = 0
     329/    9E7C : 36 00               	mvi	m,0		;column = 0
     330/    9E7E : C9                  	ret
     331/    9E7F :                     
     332/    9E7F :                     ctlout:
     333/    9E7F :                     	;send C character with possible preceding up-arrow
     334/    9E7F : 79                  	mov	a,c		;cy if not graphic (or special case)
     335/    9E80 : CD 14 9E            	call	echoc
     336/    9E83 : D2 90 9E            	jnc	tabout		;skip if graphic, tab, cr, lf, or ctlh
     337/    9E86 :                     	;send preceding up arrow
     338/    9E86 : F5                  	push	psw		;up arrow
     339/    9E87 : 0E 5E               	mvi	c,ctl
     340/    9E89 : CD 48 9E            	call	conout
     341/    9E8C : F1                  	pop	psw		;becomes graphic letter
     342/    9E8D : F6 40               	ori	40h
     343/    9E8F : 4F                  	mov	c,a		;ready to print
     344/    9E90 :                     	;(drop through to tabout)
     345/    9E90 :                     
     346/    9E90 :                     tabout:
     347/    9E90 :                     	;expand tabs to console
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 7 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


     348/    9E90 : 79                  	mov	a,c		;direct to conout if not
     349/    9E91 : FE 09               	cpi	tab
     350/    9E93 : C2 48 9E            	jnz	conout
     351/    9E96 :                     	;tab encountered, move to next tab position
     352/    9E96 :                     tab0:
     353/    9E96 : 0E 20               	mvi	c,' '		;another blank
     354/    9E98 : CD 48 9E            	call	conout
     355/    9E9B : 3A 0C A0            	lda	column		;column mod 8 = 0 ?
     356/    9E9E : E6 07               	ani	111b
     357/    9EA0 : C2 96 9E            	jnz	tab0		;back for another if not
     358/    9EA3 : C9                  	ret
     359/    9EA4 :                     
     360/    9EA4 :                     
     361/    9EA4 :                     backup:
     362/    9EA4 :                     	;back-up one screen position
     363/    9EA4 : CD AC 9E            	call	pctlh
     364/    9EA7 : 0E 20               	mvi	c,' '
     365/    9EA9 : CD 0C AB            	call	conoutf
     366/    9EAC :                     ;	(drop through to pctlh)
     367/    9EAC :                     pctlh:
     368/    9EAC :                     	;send ctlh to console without affecting column count
     369/    9EAC : 0E 08               	mvi	c,ctlh
     370/    9EAE : C3 0C AB            	jmp	conoutf
     371/    9EB1 :                     	;ret
     372/    9EB1 :                     
     373/    9EB1 :                     crlfp:
     374/    9EB1 :                     	;print #, cr, lf for ctlx, ctlu, ctlr functions
     375/    9EB1 :                     	;then move to strtcol (starting column)
     376/    9EB1 : 0E 23               	mvi	c,'#'
     377/    9EB3 : CD 48 9E            	call	conout
     378/    9EB6 : CD C9 9E            	call	crlf
     379/    9EB9 :                     	;column = 0, move to position strtcol
     380/    9EB9 :                     crlfp0:
     381/    9EB9 : 3A 0C A0            	lda	column
     382/    9EBC : 21 0B A0            	lxi	h,strtcol
     383/    9EBF : BE                  	cmp	m		;stop when column reaches strtcol
     384/    9EC0 : D0                  	rnc
     385/    9EC1 : 0E 20               	mvi	c,' '		;print blank
     386/    9EC3 : CD 48 9E            	call	conout 
     387/    9EC6 : C3 B9 9E            	jmp	crlfp0
     388/    9EC9 :                     
     389/    9EC9 :                     
     390/    9EC9 :                     crlf:
     391/    9EC9 :                     	;carriage return line feed sequence
     392/    9EC9 : 0E 0D               	mvi	c,cr
     393/    9ECB : CD 48 9E            	call	conout
     394/    9ECE : 0E 0A               	mvi	c,lf
     395/    9ED0 : C3 48 9E            	jmp	conout
     396/    9ED3 :                     	;ret
     397/    9ED3 :                     
     398/    9ED3 :                     print:
     399/    9ED3 :                     	;print message until M(BC) = '$'
     400/    9ED3 : 0A                  	ldax	b		;stop on $
     401/    9ED4 : FE 24               	cpi	'$'
     402/    9ED6 : C8                  	rz
     403/    9ED7 :                     	;more to print
     404/    9ED7 : 03                  	inx	b		;char to C
     405/    9ED8 : C5                  	push	b
     406/    9ED9 : 4F                  	mov	c,a
     407/    9EDA : CD 90 9E            	call	tabout		;another character printed
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 8 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


     408/    9EDD : C1                  	pop	b
     409/    9EDE : C3 D3 9E            	jmp	print
     410/    9EE1 :                     
     411/    9EE1 :                     read:	;read to info address (max length, current length, buffer)
     412/    9EE1 : 3A 0C A0            	lda	column		;save start for ctl-x, ctl-h
     413/    9EE4 : 32 0B A0            	sta	strtcol 
     414/    9EE7 : 2A 43 A0            	lhld	info
     415/    9EEA : 4E                  	mov	c,m
     416/    9EEB : 23                  	inx	h
     417/    9EEC : E5                  	push	h
     418/    9EED : 06 00               	mvi	b,0
     419/    9EEF :                     	;B = current buffer length,
     420/    9EEF :                     	;C = maximum buffer length,
     421/    9EEF :                     	;HL= next to fill - 1
     422/    9EEF :                     readnx:
     423/    9EEF :                     	;read next character, BC, HL active
     424/    9EEF : C5                  	push	b		;blen, cmax, HL saved
     425/    9EF0 : E5                  	push	h
     426/    9EF1 :                     readn0:
     427/    9EF1 : CD FB 9D            	call	conin		;next char in A
     428/    9EF4 : E6 7F               	ani	7fh		;mask parity bit
     429/    9EF6 : E1                  	pop	h		;reactivate counters
     430/    9EF7 : C1                  	pop	b
     431/    9EF8 : FE 0D               	cpi	cr		;end of line?
     432/    9EFA : CA C1 9F            	jz	readen
     433/    9EFD : FE 0A               	cpi	lf		;also end of line
     434/    9EFF : CA C1 9F            	jz	readen
     435/    9F02 : FE 08               	cpi	ctlh		;backspace?
     436/    9F04 : C2 16 9F            	jnz	noth
     437/    9F07 :                     	;do we have any characters to back over?
     438/    9F07 : 78                  	mov	a,b
     439/    9F08 : B7                  	ora	a
     440/    9F09 : CA EF 9E            	jz	readnx
     441/    9F0C :                     	;characters remain in buffer, backup one
     442/    9F0C : 05                  	dcr	b		;remove one character
     443/    9F0D : 3A 0C A0            	lda	column		;col > 0
     444/    9F10 : 32 0A A0            	sta	compcol
     445/    9F13 :                     	;compcol > 0 marks repeat as length compute
     446/    9F13 : C3 70 9F            	jmp	linelen		;uses same code as repeat
     447/    9F16 :                     noth:
     448/    9F16 :                     	;not a backspace
     449/    9F16 : FE 7F               	cpi	rubout		;rubout char?
     450/    9F18 : C2 26 9F            	jnz	notrub
     451/    9F1B :                     	;rubout encountered, rubout if possible
     452/    9F1B : 78                  	mov	a,b		;skip if len=0
     453/    9F1C : B7                  	ora	a
     454/    9F1D : CA EF 9E            	jz	readnx 
     455/    9F20 :                     	;buffer has characters, resend last char
     456/    9F20 : 7E                  	mov	a,m		;A = last char
     457/    9F21 : 05                  	dcr	b
     458/    9F22 : 2B                  	dcx	h
     459/    9F23 :                     	;blen=blen-1, next to fill - 1 decremented
     460/    9F23 : C3 A9 9F            	jmp	rdech1		;act like this is an echo
     461/    9F26 :                     
     462/    9F26 :                     notrub:
     463/    9F26 :                     	;not a rubout character, check end line
     464/    9F26 : FE 05               	cpi	ctle		;physical end line?
     465/    9F28 : C2 37 9F            	jnz	note
     466/    9F2B :                     	;yes, save active counters and force eol
     467/    9F2B : C5                  	push	b
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 9 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


     468/    9F2C : E5                  	push	h
     469/    9F2D : CD C9 9E            	call	crlf
     470/    9F30 : AF                  	xra	a		;start position = 00
     471/    9F31 : 32 0B A0            	sta	strtcol
     472/    9F34 : C3 F1 9E            	jmp	readn0		;for another character
     473/    9F37 :                     note:
     474/    9F37 :                     	;not end of line, list toggle?
     475/    9F37 : FE 10               	cpi	ctlp		;skip if not ctlp
     476/    9F39 : C2 48 9F            	jnz	notp
     477/    9F3C :                     	;list toggle - change parity
     478/    9F3C : E5                  	push	h		;save next to fill - 1
     479/    9F3D : 21 0D A0            	lxi	h,listcp	;HL=.listcp flag
     480/    9F40 : 3E 01               	mvi	a,1		;True-listcp
     481/    9F42 : 96                  	sub	m
     482/    9F43 : 77                  	mov	m,a		;listcp = not listcp
     483/    9F44 : E1                  	pop	h		;for another char
     484/    9F45 : C3 EF 9E            	jmp	readnx
     485/    9F48 :                     notp:
     486/    9F48 :                     	;not a ctlp, line delete?
     487/    9F48 : FE 18               	cpi	ctlx
     488/    9F4A : C2 5F 9F            	jnz	notx
     489/    9F4D : E1                  	pop	h		;discard start position
     490/    9F4E :                     	;loop while column > strtcol
     491/    9F4E :                     backx:
     492/    9F4E : 3A 0B A0            	lda	strtcol
     493/    9F51 : 21 0C A0            	lxi	h,column
     494/    9F54 : BE                  	cmp	m		;start again
     495/    9F55 : D2 E1 9E            	jnc	read
     496/    9F58 : 35                  	dcr	m		;column = column - 1
     497/    9F59 : CD A4 9E            	call	backup		;one position
     498/    9F5C : C3 4E 9F            	jmp	backx
     499/    9F5F :                     notx:
     500/    9F5F :                     	;not a control x, control u?
     501/    9F5F :                     	;not control-X, control-U?
     502/    9F5F : FE 15               	cpi	ctlu		;skip if not
     503/    9F61 : C2 6B 9F            	jnz	notu
     504/    9F64 :                     	;delete line (ctlu)
     505/    9F64 : CD B1 9E            	call	crlfp		;physical eol
     506/    9F67 : E1                  	pop	h		;discard starting position
     507/    9F68 : C3 E1 9E            	jmp	read		;to start all over
     508/    9F6B :                     notu:
     509/    9F6B :                     	;not line delete, repeat line?
     510/    9F6B : FE 12               	cpi	ctlr
     511/    9F6D : C2 A6 9F            	jnz	notr
     512/    9F70 :                     linelen:
     513/    9F70 :                     	;repeat line, or compute line len (ctlh)
     514/    9F70 :                     	;if compcol > 0
     515/    9F70 : C5                  	push	b		;save line length
     516/    9F71 : CD B1 9E            	call	crlfp 
     517/    9F74 : C1                  	pop	b
     518/    9F75 : E1                  	pop	h
     519/    9F76 : E5                  	push	h
     520/    9F77 : C5                  	push	b
     521/    9F78 :                     	;bcur, cmax active, beginning buff at HL
     522/    9F78 :                     rep0:
     523/    9F78 : 78                  	mov	a,b		;count len to 00
     524/    9F79 : B7                  	ora	a
     525/    9F7A : CA 8A 9F            	jz	rep1 
     526/    9F7D : 23                  	inx	h		;next to print
     527/    9F7E : 4E                  	mov	c,m
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 10 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


     528/    9F7F : 05                  	dcr	b		;count length down
     529/    9F80 : C5                  	push	b
     530/    9F81 : E5                  	push	h
     531/    9F82 : CD 7F 9E            	call	ctlout		;character echoed
     532/    9F85 : E1                  	pop	h		;recall remaining count
     533/    9F86 : C1                  	pop	b
     534/    9F87 : C3 78 9F            	jmp	rep0		;for the next character
     535/    9F8A :                     rep1:
     536/    9F8A :                     	;end of repeat, recall lengths
     537/    9F8A :                     	;original BC still remains pushed
     538/    9F8A : E5                  	push	h		;save next to fill
     539/    9F8B : 3A 0A A0            	lda	compcol		;>0 if computing length
     540/    9F8E : B7                  	ora	a
     541/    9F8F : CA F1 9E            	jz	readn0		;for another char if so
     542/    9F92 :                     	;column position computed for ctlh
     543/    9F92 : 21 0C A0            	lxi	h,column	;diff > 0
     544/    9F95 : 96                  	sub	m
     545/    9F96 : 32 0A A0            	sta	compcol		;count down below
     546/    9F99 :                     	;move back compcol-column spaces
     547/    9F99 :                     backsp:
     548/    9F99 :                     	;move back one more space
     549/    9F99 : CD A4 9E            	call	backup		;one space
     550/    9F9C : 21 0A A0            	lxi	h,compcol
     551/    9F9F : 35                  	dcr	m
     552/    9FA0 : C2 99 9F            	jnz	backsp
     553/    9FA3 : C3 F1 9E            	jmp	readn0		;for next character
     554/    9FA6 :                     notr:
     555/    9FA6 :                     	;not a ctlr, place into buffer
     556/    9FA6 :                     rdecho:
     557/    9FA6 : 23                  	inx	h		;character filled to mem
     558/    9FA7 : 77                  	mov	m,a
     559/    9FA8 : 04                  	inr	b		;blen = blen + 1
     560/    9FA9 :                     rdech1:
     561/    9FA9 :                     	;look for a random control character
     562/    9FA9 : C5                  	push	b		;active values saved
     563/    9FAA : E5                  	push	h 
     564/    9FAB : 4F                  	mov	c,a		;ready to print
     565/    9FAC : CD 7F 9E            	call	ctlout		;may be up-arrow C
     566/    9FAF : E1                  	pop	h		;recall char
     567/    9FB0 : C1                  	pop	b
     568/    9FB1 : 7E                  	mov	a,m
     569/    9FB2 : FE 03               	cpi	ctlc		;set flags for reboot test
     570/    9FB4 : 78                  	mov	a,b		;move length to A
     571/    9FB5 : C2 BD 9F            	jnz	notc		;skip if not a control c
     572/    9FB8 : FE 01               	cpi	1		;control C, must be length 1
     573/    9FBA : CA 00 00            	jz	reboot		;reboot if blen = 1
     574/    9FBD :                     	;length not one, so skip reboot
     575/    9FBD :                     notc:
     576/    9FBD :                     	;not reboot, are we at end of buffer?
     577/    9FBD : B9                  	cmp	c		;go for another if not
     578/    9FBE : DA EF 9E            	jc	readnx
     579/    9FC1 :                     readen:
     580/    9FC1 :                     	;end of read operation, store blen
     581/    9FC1 : E1                  	pop	h		;M(current len) = B
     582/    9FC2 : 70                  	mov	m,b
     583/    9FC3 : 0E 0D               	mvi	c,cr		;return carriage
     584/    9FC5 : C3 48 9E            	jmp	conout
     585/    9FC8 :                     	;ret
     586/    9FC8 :                     func1:
     587/    9FC8 :                     	;return console character with echo
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 11 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


     588/    9FC8 : CD 06 9E            	call	conech
     589/    9FCB : C3 01 A0            	jmp	sta_ret
     590/    9FCE :                     ;
     591/    9FCE : =9E90H              func2	equ	tabout
     592/    9FCE :                     	;write console character with tab expansion
     593/    9FCE :                     ;
     594/    9FCE :                     func3:
     595/    9FCE :                     	;return reader character
     596/    9FCE : CD 15 AB            	call	readerf
     597/    9FD1 : C3 01 A0            	jmp	sta_ret
     598/    9FD4 :                     
     599/    9FD4 :                     ;func4:	equated to punchf
     600/    9FD4 :                     	;write punch character
     601/    9FD4 :                     
     602/    9FD4 :                     ;func5:	equated to listf
     603/    9FD4 :                     	;write list character
     604/    9FD4 :                     	;write to list device
     605/    9FD4 :                     
     606/    9FD4 :                     func6:
     607/    9FD4 :                     	;direct console i/o - read if 0ffh
     608/    9FD4 : 79                  	mov	a,c		;0ffh => 00h, means input mode
     609/    9FD5 : 3C                  	inr	a
     610/    9FD6 : CA E0 9F            	jz	dirinp
     611/    9FD9 : 3C                  	inr	a		;0feH in C for status
     612/    9FDA : CA 06 AB            	jz	constf
     613/    9FDD :                     	;direct output function
     614/    9FDD : C3 0C AB            	jmp	conoutf
     615/    9FE0 :                     dirinp:
     616/    9FE0 : CD 06 AB            	call	constf		;status check
     617/    9FE3 : B7                  	ora	a		;skip, return 00 if not ready
     618/    9FE4 : CA 91 AA            	jz	retmon
     619/    9FE7 :                     	;character is ready, get it
     620/    9FE7 : CD 09 AB            	call	coninf		;to A
     621/    9FEA : C3 01 A0            	jmp	sta_ret
     622/    9FED :                     
     623/    9FED :                     func7:
     624/    9FED :                     	;return io byte
     625/    9FED : 3A 03 00            	lda	ioloc
     626/    9FF0 : C3 01 A0            	jmp	sta_ret
     627/    9FF3 :                     
     628/    9FF3 :                     func8:
     629/    9FF3 :                     	;set i/o byte
     630/    9FF3 : 21 03 00            	lxi	h,ioloc
     631/    9FF6 : 71                  	mov	m,c
     632/    9FF7 : C9                  	ret			;jmp goback
     633/    9FF8 :                     
     634/    9FF8 :                     func9:
     635/    9FF8 :                     	;write line until $ encountered
     636/    9FF8 : EB                  	xchg			;was lhld info	
     637/    9FF9 : 4D                  	mov	c,l		;BC=string address
     638/    9FFA : 44                  	mov	b,h
     639/    9FFB : C3 D3 9E            	jmp	print		;out to console	
     640/    9FFE :                     
     641/    9FFE : =9EE1H              func10	equ	read
     642/    9FFE :                     	;read a buffered console line
     643/    9FFE :                     
     644/    9FFE :                     func11:
     645/    9FFE :                     	;check console status
     646/    9FFE : CD 23 9E            	call	conbrk
     647/    A001 :                     	;(drop through to sta_ret)
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 12 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


     648/    A001 :                     sta_ret:
     649/    A001 :                     	;store the A register to aret
     650/    A001 : 32 45 A0            	sta	aret
     651/    A004 :                     func_ret:						;
     652/    A004 : C9                  	ret			;jmp goback (pop stack for non cp/m functions)
     653/    A005 :                     
     654/    A005 :                     setlret1:
     655/    A005 :                     	;set lret = 1
     656/    A005 : 3E 01               	mvi	a,1
     657/    A007 : C3 01 A0            	jmp	sta_ret
     658/    A00A :                     
     659/    A00A :                     
     660/    A00A :                     
     661/    A00A :                     ;	data areas
     662/    A00A :                     
     663/    A00A : 00                  compcol:db	0	;true if computing column position
     664/    A00B : 00                  strtcol:db	0	;starting column position after read
     665/    A00C : 00                  column:	db	0	;column position
     666/    A00D : 00                  listcp:	db	0	;listing toggle
     667/    A00E : 00                  kbchar:	db	0	;initial key char = 00
     668/    A00F :                     entsp:	ds	2	;entry stack pointer
     669/    A011 :                     	ds	ssize*2	;stack size
     670/    A041 :                     lstack:
     671/    A041 :                     ;	end of Basic I/O System
     672/    A041 :                     
     673/    A041 :                     ;*****************************************************************
     674/    A041 :                     ;*****************************************************************
     675/    A041 :                     
     676/    A041 :                     ;	common values shared between bdosi and bdos
     677/    A041 : 00                  usrcode:db	0	;current user number
     678/    A042 : 00                  curdsk:	db	0	;current disk number
     679/    A043 :                     info:	ds	2	;information address
     680/    A045 :                     aret:	ds	2	;address value to return
     681/    A047 : =A045H              lret	equ	aret	;low(aret)
     682/    A047 :                     
     683/    A047 :                     ;*****************************************************************
     684/    A047 :                     ;*****************************************************************
     685/    A047 :                     ;**                                                             **
     686/    A047 :                     ;**   B a s i c    D i s k   O p e r a t i n g   S y s t e m    **
     687/    A047 :                     ;**                                                             **
     688/    A047 :                     ;*****************************************************************
     689/    A047 :                     ;*****************************************************************
     690/    A047 :                     
     691/    A047 : =22H                dvers	equ	22h	;version 2.2
     692/    A047 :                     ;	module addresses
     693/    A047 :                     
     694/    A047 :                     ;	literal constants
     695/    A047 : =FFH                _true	equ	0ffh	;constant true
     696/    A047 : =0H                 _false	equ	000h	;constant false
     697/    A047 : =FFFFH              enddir	equ	0ffffh	;end of directory
     698/    A047 : =1H                 byte	equ	1	;number of bytes for "byte" type
     699/    A047 : =2H                 word	equ	2	;number of bytes for "word" type
     700/    A047 :                     
     701/    A047 :                     ;	fixed addresses in low memory
     702/    A047 : =5CH                tfcb	equ	005ch	;default fcb location
     703/    A047 : =80H                tbuff	equ	0080h	;default buffer location
     704/    A047 :                     
     705/    A047 :                     ;	fixed addresses referenced in bios module are
     706/    A047 :                     ;	pererr (0009), selerr (000c), roderr (000f)
     707/    A047 :                     
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 13 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


     708/    A047 :                     ;	error message handlers
     709/    A047 :                     
     710/    A047 :                     ;per_error:	 
     711/    A047 :                     	;report permanent error to user	
     712/    A047 :                     ;	lxi h,pererr  jmp goerr		
     713/    A047 :                     
     714/    A047 :                     ;rod_error:
     715/    A047 :                     	;report read/only disk error
     716/    A047 :                     ;	lxi h,roderr  jmp goerr
     717/    A047 :                     
     718/    A047 :                     ;rof_error:
     719/    A047 :                     	;report read/only file error
     720/    A047 :                     ;	lxi h,roferr	;jmp goerr	
     721/    A047 :                     
     722/    A047 :                     sel_error:
     723/    A047 :                     	;report select error
     724/    A047 : 21 0B 9D            	lxi	h,selerr
     725/    A04A :                     
     726/    A04A :                     
     727/    A04A :                     goerr:
     728/    A04A :                     	;HL = .errorhandler, call subroutine
     729/    A04A : 5E                  	mov	e,m		;address of routine in DE
     730/    A04B : 23                  	inx	h
     731/    A04C : 56                  	mov	d,m
     732/    A04D : EB                  	xchg			;to subroutine
     733/    A04E : E9                  	pchl
     734/    A04F :                     
     735/    A04F :                     
     736/    A04F :                     
     737/    A04F :                     ;	local subroutines for bios interface
     738/    A04F :                     
     739/    A04F :                     move:
     740/    A04F :                     	;move data length of length C from source DE to
     741/    A04F :                     	;destination given by HL
     742/    A04F : 0C                  	inr	c		;in case it is zero
     743/    A050 :                     move0:
     744/    A050 : 0D                  	dcr	c		;more to move
     745/    A051 : C8                  	rz
     746/    A052 : 1A                  	ldax	d		;one byte moved
     747/    A053 : 77                  	mov	m,a
     748/    A054 : 13                  	inx	d		;to next byte
     749/    A055 : 23                  	inx	h
     750/    A056 : C3 50 A0            	jmp	move0
     751/    A059 :                     
     752/    A059 :                     selectdisk:
     753/    A059 :                     	;select the disk drive given by curdsk, and fill
     754/    A059 :                     	;the base addresses curtrka - alloca, then fill
     755/    A059 :                     	;the values of the disk parameter block
     756/    A059 : 3A 42 A0            	lda	curdsk		;current disk# to c
     757/    A05C : 4F                  	mov	c,a
     758/    A05D :                     	;lsb of e = 0 if not yet logged - in
     759/    A05D : CD 1B AB            	call	seldskf		;HL filled by call
     760/    A060 :                     	;HL = 0000 if error, otherwise disk headers
     761/    A060 : 7C                  	mov	a,h		;return with 0000 in HL and z flag
     762/    A061 : B5                  	ora	l
     763/    A062 : C8                  	rz
     764/    A063 :                     	;disk header block address in hl
     765/    A063 : 5E                  	mov	e,m		;DE=.tran
     766/    A064 : 23                  	inx	h
     767/    A065 : 56                  	mov	d,m
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 14 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


     768/    A066 : 23                  	inx	h
     769/    A067 : 22 B3 AA            	shld	cdrmaxa		;.cdrmax
     770/    A06A : 23                  	inx	h
     771/    A06B : 23                  	inx	h
     772/    A06C : 22 B5 AA            	shld	curtrka		;HL=.currec
     773/    A06F : 23                  	inx	h
     774/    A070 : 23                  	inx	h
     775/    A071 : 22 B7 AA            	shld	curreca		;HL=.buffa
     776/    A074 : 23                  	inx	h
     777/    A075 : 23                  	inx	h
     778/    A076 :                     	;DE still contains .tran
     779/    A076 : EB                  	xchg			;.tran vector
     780/    A077 : 22 D0 AA            	shld	tranv
     781/    A07A : 21 B9 AA            	lxi	h,buffa		;DE= source for move, HL=dest
     782/    A07D : 0E 08               	mvi	c,addlist	;addlist filled
     783/    A07F : CD 4F A0            	call	move
     784/    A082 :                     	;now fill the disk parameter block
     785/    A082 : 2A BB AA            	lhld	dpbaddr		;DE is source
     786/    A085 : EB                  	xchg
     787/    A086 : 21 C1 AA            	lxi	h,sectpt	;HL is destination
     788/    A089 : 0E 0F               	mvi	c,dpblist	;data filled
     789/    A08B : CD 4F A0            	call	move
     790/    A08E :                     	;now set single/double map mode
     791/    A08E : 2A C6 AA            	lhld	maxall		;largest allocation number
     792/    A091 : 7C                  	mov	a,h		;00 indicates < 255
     793/    A092 : 21 DD AA            	lxi	h,single	;assume a=00
     794/    A095 : 36 FF               	mvi	m,_true
     795/    A097 : B7                  	ora	a
     796/    A098 : CA 9D A0            	jz	retselect
     797/    A09B :                     	;high order of maxall not zero, use double dm
     798/    A09B : 36 00               	mvi	m,_false
     799/    A09D :                     retselect:
     800/    A09D : 3E FF               	mvi	a,_true		;select disk function ok
     801/    A09F : B7                  	ora	a
     802/    A0A0 : C9                  	ret
     803/    A0A1 :                     
     804/    A0A1 :                     home:
     805/    A0A1 :                     	;move to home position, then offset to start of dir
     806/    A0A1 : CD 18 AB            	call	homef		;move to track 00, sector 00 reference
     807/    A0A4 :                     	;lxi h,offset ;mov c,m ;inx h ;mov b,m ;call settrkf
     808/    A0A4 :                     	;first directory position selected
     809/    A0A4 : AF                  	xra	a		;constant zero to accumulator
     810/    A0A5 : 2A B5 AA            	lhld	curtrka		;curtrk=0000
     811/    A0A8 : 77                  	mov	m,a
     812/    A0A9 : 23                  	inx	h
     813/    A0AA : 77                  	mov	m,a
     814/    A0AB : 2A B7 AA            	lhld	curreca		;currec=0000
     815/    A0AE : 77                  	mov	m,a
     816/    A0AF : 23                  	inx	h
     817/    A0B0 : 77                  	mov	m,a
     818/    A0B1 :                     	;curtrk, currec both set to 0000
     819/    A0B1 : C9                  	ret
     820/    A0B2 :                     
     821/    A0B2 :                     rdbuff:
     822/    A0B2 :                     	;read buffer and check condition
     823/    A0B2 : CD 27 AB            	call	readf		;current drive, track, sector, dma
     824/    A0B5 : C3 BB A0            	jmp	diocomp		;check for i/o errors
     825/    A0B8 :                     
     826/    A0B8 :                     wrbuff:
     827/    A0B8 :                     	;write buffer and check condition
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 15 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


     828/    A0B8 :                     	;write type (wrtype) is in register C
     829/    A0B8 :                     	;wrtype = 0 => normal write operation
     830/    A0B8 :                     	;wrtype = 1 => directory write operation
     831/    A0B8 :                     	;wrtype = 2 => start of new block
     832/    A0B8 : CD 2A AB            	call	writef		;current drive, track, sector, dma
     833/    A0BB :                     diocomp:	;check for disk errors
     834/    A0BB : B7                  	ora	a
     835/    A0BC : C8                  	rz
     836/    A0BD : 21 09 9D            	lxi	h,pererr
     837/    A0C0 : C3 4A A0            	jmp	goerr
     838/    A0C3 :                     
     839/    A0C3 :                     seek_dir:
     840/    A0C3 :                     	;seek the record containing the current dir entry
     841/    A0C3 : 2A EA AA            	lhld	dcnt		;directory counter to HL
     842/    A0C6 : 0E 02               	mvi	c,dskshf	;value to HL
     843/    A0C8 : CD EA A1            	call	hlrotr
     844/    A0CB : 22 E5 AA            	shld	arecord		;ready for seek
     845/    A0CE : 22 EC AA            	shld	drec
     846/    A0D1 :                     	;  jmp seek
     847/    A0D1 :                     	;ret
     848/    A0D1 :                     
     849/    A0D1 :                     
     850/    A0D1 :                     seek:
     851/    A0D1 :                     	;seek the track given by arecord (actual record)
     852/    A0D1 :                     	;local equates for registers
     853/    A0D1 :                     ;arech	equ	b		;arecord = BC
     854/    A0D1 :                     ;arecl	equ	c
     855/    A0D1 :                     ;crech	equ	d		;currec  = DE
     856/    A0D1 :                     ;crecl	equ	e
     857/    A0D1 :                     ;ctrkh	equ	h		;curtrk  = HL
     858/    A0D1 :                     ;ctrkl	equ	l
     859/    A0D1 :                     ;tcrech	equ	h		;tcurrec = HL
     860/    A0D1 :                     ;tcrecl	equ	l
     861/    A0D1 :                     	;load the registers from memory
     862/    A0D1 : 21 E5 AA            	lxi	h,arecord
     863/    A0D4 : 4E                  	mov	c,m		; % c = arecl
     864/    A0D5 : 23                  	inx	h
     865/    A0D6 : 46                  	mov	b,m		; % b = arech
     866/    A0D7 : 2A B7 AA            	lhld	curreca
     867/    A0DA : 5E                  	mov	e,m		; % e = crecl
     868/    A0DB : 23                  	inx	h
     869/    A0DC : 56                  	mov	d,m		; % d = crech
     870/    A0DD : 2A B5 AA            	lhld	curtrka
     871/    A0E0 : 7E                  	mov	a,m
     872/    A0E1 : 23                  	inx	h
     873/    A0E2 : 66                  	mov	h,m		; % h = ctrkh
     874/    A0E3 : 6F                  	mov	l,a		; % l = ctrkl
     875/    A0E4 :                     	;loop while arecord < currec
     876/    A0E4 :                     seek0:
     877/    A0E4 : 79                  	mov	a,c		; % c = arecl
     878/    A0E5 : 93                  	sub	e		; % e = crecl
     879/    A0E6 : 78                  	mov	a,b		; % b = arech
     880/    A0E7 : 9A                  	sbb	d		; % d = crech
     881/    A0E8 : D2 FA A0            	jnc	seek1		;skip if arecord >= currec
     882/    A0EB :                     	;currec = currec - sectpt
     883/    A0EB : E5                  	push	h		; % h = ctrkh
     884/    A0EC : 2A C1 AA            	lhld	sectpt
     885/    A0EF : 7B                  	mov	a,e		; % e = crecl
     886/    A0F0 : 95                  	sub	l
     887/    A0F1 : 5F                  	mov	e,a		; % e = crecl
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 16 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


     888/    A0F2 : 7A                  	mov	a,d		; % d = crech
     889/    A0F3 : 9C                  	sbb	h
     890/    A0F4 : 57                  	mov	d,a		; % d = crech
     891/    A0F5 : E1                  	pop	h		; % h = ctrkh
     892/    A0F6 :                     	;curtrk = curtrk - 1
     893/    A0F6 : 2B                  	dcx	h		; % h = ctrkh
     894/    A0F7 : C3 E4 A0            	jmp	seek0 ;for another try
     895/    A0FA :                     seek1:
     896/    A0FA :                     	;look while arecord >= (t:=currec + sectpt)
     897/    A0FA : E5                  	push	h		; % h = ctrkh
     898/    A0FB : 2A C1 AA            	lhld	sectpt		;HL = currec+sectpt
     899/    A0FE : 19                  	dad	d		; % d = crech
     900/    A0FF : DA 0F A1            	jc	seek2		;can be > FFFFH	
     901/    A102 : 79                  	mov	a,c		; % c = arecl
     902/    A103 : 95                  	sub	l		; % l = tcrecl
     903/    A104 : 78                  	mov	a,b		; % b = arech
     904/    A105 : 9C                  	sbb	h		; % h = tcrech
     905/    A106 : DA 0F A1            	jc	seek2		;skip if t > arecord
     906/    A109 :                     	;currec = t
     907/    A109 : EB                  	xchg
     908/    A10A :                     	;curtrk = curtrk + 1
     909/    A10A : E1                  	pop	h		; % h = ctrkh
     910/    A10B : 23                  	inx	h		; % h = ctrkh
     911/    A10C : C3 FA A0            	jmp	seek1		;for another try
     912/    A10F : E1                  seek2:	pop	h		; % h = ctrkh
     913/    A110 :                     	;arrive here with updated values in each register
     914/    A110 : C5                  	push	b		;to stack for later ; % b = arech
     915/    A111 : D5                  	push	d		; % d = crech
     916/    A112 : E5                  	push	h		; % h = ctrkh
     917/    A113 :                     	;stack contains (lowest) BC=arecord, DE=currec, HL=curtrk
     918/    A113 : EB                  	xchg			;HL = curtrk+offset
     919/    A114 : 2A CE AA            	lhld	offset
     920/    A117 : 19                  	dad	d
     921/    A118 : 44                  	mov	b,h		;track set up
     922/    A119 : 4D                  	mov	c,l
     923/    A11A : CD 1E AB            	call	settrkf
     924/    A11D :                     	;note that BC - curtrk is difference to move in bios
     925/    A11D : D1                  	pop	d		;recall curtrk
     926/    A11E : 2A B5 AA            	lhld	curtrka		;curtrk updated
     927/    A121 : 73                  	mov	m,e
     928/    A122 : 23                  	inx	h
     929/    A123 : 72                  	mov	m,d
     930/    A124 :                     	;now compute sector as arecord-currec
     931/    A124 : D1                  	pop	d		;recall currec ; % d = crech
     932/    A125 : 2A B7 AA            	lhld	curreca
     933/    A128 : 73                  	mov	m,e		; % e = crecl
     934/    A129 : 23                  	inx	h
     935/    A12A : 72                  	mov	m,d		; % d = crech
     936/    A12B : C1                  	pop	b		;BC=arecord, DE=currec ; % b = arech
     937/    A12C : 79                  	mov	a,c		; % c = arecl
     938/    A12D : 93                  	sub	e		; % e = crecl
     939/    A12E : 4F                  	mov	c,a		; % c = arecl
     940/    A12F : 78                  	mov	a,b		; % b = arech
     941/    A130 : 9A                  	sbb	d		; % d = crech
     942/    A131 : 47                  	mov	b,a		; % b = arech
     943/    A132 : 2A D0 AA            	lhld	tranv		;BC=sector#, DE=.tran
     944/    A135 : EB                  	xchg
     945/    A136 : CD 30 AB            	call	sectran		;HL = tran(sector)
     946/    A139 : 4D                  	mov	c,l		;BC = tran(sector)
     947/    A13A : 44                  	mov	b,h
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 17 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


     948/    A13B : C3 21 AB            	jmp	setsecf		;sector selected
     949/    A13E :                     	;ret
     950/    A13E :                     
     951/    A13E :                     ;	file control block (fcb) constants
     952/    A13E : =E5H                empty	equ	0e5h	;empty directory entry
     953/    A13E : =7FH                lstrec	equ	127	;last record# in extent
     954/    A13E : =80H                recsiz	equ	128	;record size
     955/    A13E : =20H                fcblen	equ	32	;file control block size
     956/    A13E : =4H                 dirrec	equ	recsiz/fcblen	;directory elts / record
     957/    A13E : =2H                 dskshf	equ	2	;log2(dirrec)
     958/    A13E : =3H                 dskmsk	equ	dirrec-1
     959/    A13E : =5H                 fcbshf	equ	5	;log2(fcblen)
     960/    A13E :                     
     961/    A13E : =CH                 extnum	equ	12	;extent number field
     962/    A13E : =1FH                maxext	equ	31	;largest extent number
     963/    A13E : =DH                 ubytes	equ	13	;unfilled bytes field
     964/    A13E : =EH                 modnum	equ	14	;data module number
     965/    A13E : =FH                 maxmod	equ	15	;largest module number
     966/    A13E : =80H                fwfmsk	equ	80h	;file write flag is high order modnum
     967/    A13E : =FH                 namlen	equ	15	;name length
     968/    A13E : =FH                 reccnt	equ	15	;record count field
     969/    A13E : =10H                dskmap	equ	16	;disk map field
     970/    A13E : =1FH                lstfcb	equ	fcblen-1
     971/    A13E : =20H                nxtrec	equ	fcblen
     972/    A13E : =21H                ranrec	equ	nxtrec+1;random record field (2 bytes)
     973/    A13E :                     
     974/    A13E :                     ;	reserved file indicators
     975/    A13E : =9H                 rofile	equ	9	;high order of first type char
     976/    A13E : =AH                 invis	equ	10	;invisible file in dir command
     977/    A13E :                     ;	equ	11	;reserved
     978/    A13E :                     
     979/    A13E :                     ;	utility functions for file access
     980/    A13E :                     
     981/    A13E :                     dm_position:
     982/    A13E :                     	;compute disk map position for vrecord to HL
     983/    A13E : 21 C3 AA            	lxi	h,blkshf	;shift count to C
     984/    A141 : 4E                  	mov	c,m
     985/    A142 : 3A E3 AA            	lda	vrecord		;current virtual record to A
     986/    A145 :                     dmpos0:
     987/    A145 : B7                  	ora	a
     988/    A146 : 1F                  	rar
     989/    A147 : 0D                  	dcr	c
     990/    A148 : C2 45 A1            	jnz	dmpos0
     991/    A14B :                     	;A = shr(vrecord,blkshf) = vrecord/2**(sect/block)
     992/    A14B : 47                  	mov	b,a		;save it for later addition
     993/    A14C : 3E 08               	mvi	a,8		;8-blkshf to accumulator
     994/    A14E : 96                  	sub	m
     995/    A14F : 4F                  	mov	c,a		;extent shift count in register c
     996/    A150 : 3A E2 AA            	lda	extval		;extent value ani extmsk
     997/    A153 :                     dmpos1:
     998/    A153 :                     	;blkshf = 3,4,5,6,7, C=5,4,3,2,1
     999/    A153 :                     	;shift is 4,3,2,1,0
    1000/    A153 : 0D                  	dcr	c
    1001/    A154 : CA 5C A1            	jz	dmpos2
    1002/    A157 : B7                  	ora	a
    1003/    A158 : 17                  	ral
    1004/    A159 : C3 53 A1            	jmp	dmpos1
    1005/    A15C :                     dmpos2:
    1006/    A15C :                     	;arrive here with A = shl(ext and extmsk,7-blkshf)
    1007/    A15C : 80                  	add	b		;add the previous shr(vrecord,blkshf) value
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 18 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    1008/    A15D :                     	;A is one of the following values, depending upon alloc
    1009/    A15D :                     	;bks blkshf
    1010/    A15D :                     	;1k   3     v/8 + extval * 16
    1011/    A15D :                     	;2k   4     v/16+ extval * 8
    1012/    A15D :                     	;4k   5     v/32+ extval * 4
    1013/    A15D :                     	;8k   6     v/64+ extval * 2
    1014/    A15D :                     	;16k  7     v/128+extval * 1
    1015/    A15D : C9                  	ret		;with dm_position in A
    1016/    A15E :                     
    1017/    A15E :                     getdm:
    1018/    A15E :                     	;return disk map value from position given by BC
    1019/    A15E : 2A 43 A0            	lhld	info		;base address of file control block
    1020/    A161 : 11 10 00            	lxi	d,dskmap	;HL =.diskmap
    1021/    A164 : 19                  	dad	d
    1022/    A165 : 09                  	dad	b		;index by a single byte value
    1023/    A166 : 3A DD AA            	lda	single		;single byte/map entry?
    1024/    A169 : B7                  	ora	a		;get disk map single byte
    1025/    A16A : CA 71 A1            	jz	getdmd
    1026/    A16D : 6E                  	mov	l,m		;with HL=00bb
    1027/    A16E : 26 00               	mvi	h,0
    1028/    A170 : C9                  	ret
    1029/    A171 :                     getdmd:
    1030/    A171 : 09                  	dad	b		;HL=.fcb(dm+i*2)
    1031/    A172 :                     	;double precision value returned
    1032/    A172 : 5E                  	mov	e,m
    1033/    A173 : 23                  	inx	h
    1034/    A174 : 56                  	mov	d,m
    1035/    A175 : EB                  	xchg
    1036/    A176 : C9                  	ret
    1037/    A177 :                     
    1038/    A177 :                     index:
    1039/    A177 :                     	;compute disk block number from current fcb
    1040/    A177 : CD 3E A1            	call	dm_position	;0...15 in register A
    1041/    A17A : 4F                  	mov	c,a		;value to HL
    1042/    A17B : 06 00               	mvi	b,0
    1043/    A17D : CD 5E A1            	call	getdm
    1044/    A180 : 22 E5 AA            	shld	arecord
    1045/    A183 : C9                  	ret
    1046/    A184 :                     
    1047/    A184 :                     allocated:
    1048/    A184 :                     	;called following index to see if block allocated
    1049/    A184 : 2A E5 AA            	lhld	arecord
    1050/    A187 : 7D                  	mov	a,l
    1051/    A188 : B4                  	ora	h
    1052/    A189 : C9                  	ret
    1053/    A18A :                     
    1054/    A18A :                     atran:
    1055/    A18A :                     	;compute actual record address, assuming index called
    1056/    A18A : 3A C3 AA            	lda	blkshf		;shift count to reg A
    1057/    A18D : 2A E5 AA            	lhld	arecord
    1058/    A190 :                     atran0:
    1059/    A190 : 29                  	dad	h		;shl(arecord,blkshf)
    1060/    A191 : 3D                  	dcr	a
    1061/    A192 : C2 90 A1            	jnz	atran0
    1062/    A195 : 22 E7 AA            	shld	arecord1	;save shifted block #  
    1063/    A198 : 3A C4 AA            	lda	blkmsk		;mask value to C
    1064/    A19B : 4F                  	mov	c,a
    1065/    A19C : 3A E3 AA            	lda	vrecord		;masked value in A
    1066/    A19F : A1                  	ana	c
    1067/    A1A0 : B5                  	ora	l		;to HL
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 19 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    1068/    A1A1 : 6F                  	mov	l,a
    1069/    A1A2 : 22 E5 AA            	shld	arecord		;arecord=HL or (vrecord and blkmsk)
    1070/    A1A5 : C9                  	ret
    1071/    A1A6 :                     
    1072/    A1A6 :                     getexta:
    1073/    A1A6 :                     	;get current extent field address to A
    1074/    A1A6 : 2A 43 A0            	lhld	info		;HL=.fcb(extnum)
    1075/    A1A9 : 11 0C 00            	lxi	d,extnum
    1076/    A1AC : 19                  	dad	d
    1077/    A1AD : C9                  	ret
    1078/    A1AE :                     
    1079/    A1AE :                     getfcba:
    1080/    A1AE :                     	;compute reccnt and nxtrec addresses for get/setfcb
    1081/    A1AE : 2A 43 A0            	lhld	info		;DE=.fcb(reccnt)
    1082/    A1B1 : 11 0F 00            	lxi	d,reccnt
    1083/    A1B4 : 19                  	dad	d
    1084/    A1B5 : EB                  	xchg
    1085/    A1B6 : 21 11 00            	lxi	h,(nxtrec-reccnt)	;HL=.fcb(nxtrec)
    1086/    A1B9 : 19                  	dad	d
    1087/    A1BA : C9                  	ret
    1088/    A1BB :                     
    1089/    A1BB :                     getfcb:
    1090/    A1BB :                     	;set variables from currently addressed fcb
    1091/    A1BB : CD AE A1            	call	getfcba		;addresses in DE, HL
    1092/    A1BE : 7E                  	mov	a,m		;vrecord=fcb(nxtrec)
    1093/    A1BF : 32 E3 AA            	sta	vrecord
    1094/    A1C2 : EB                  	xchg			;rcount=fcb(reccnt)
    1095/    A1C3 : 7E                  	mov	a,m
    1096/    A1C4 : 32 E1 AA            	sta	rcount
    1097/    A1C7 : CD A6 A1            	call	getexta		;HL=.fcb(extnum)
    1098/    A1CA : 3A C5 AA            	lda	extmsk		;extent mask to a
    1099/    A1CD : A6                  	ana	m		;fcb(extnum) and extmsk
    1100/    A1CE : 32 E2 AA            	sta	extval
    1101/    A1D1 : C9                  	ret
    1102/    A1D2 :                     
    1103/    A1D2 :                     setfcb:
    1104/    A1D2 :                     	;place values back into current fcb
    1105/    A1D2 : CD AE A1            	call	getfcba		;addresses to DE, HL
    1106/    A1D5 : 3A D5 AA            	lda	seqio
    1107/    A1D8 : FE 02               	cpi	02		;check ranfill
    1108/    A1DA : C2 DE A1            	jnz	setfcb1
    1109/    A1DD : AF                  	xra	a
    1110/    A1DE :                     setfcb1:
    1111/    A1DE : 4F                   	mov	c,a		;=1 if sequential i/o
    1112/    A1DF : 3A E3 AA            	lda	vrecord		;fcb(nxtrec)=vrecord+seqio
    1113/    A1E2 : 81                  	add	c
    1114/    A1E3 : 77                  	mov	m,a
    1115/    A1E4 : EB                  	xchg			;fcb(reccnt)=rcount
    1116/    A1E5 : 3A E1 AA            	lda	rcount
    1117/    A1E8 : 77                  	mov	m,a
    1118/    A1E9 : C9                  	ret
    1119/    A1EA :                     
    1120/    A1EA :                     hlrotr:
    1121/    A1EA :                     	;hl rotate right by amount C
    1122/    A1EA : 0C                  	inr	c		;in case zero
    1123/    A1EB :                     hlrotr0:
    1124/    A1EB : 0D                  	dcr	c		;return when zero
    1125/    A1EC : C8                  	rz
    1126/    A1ED : 7C                  	mov	a,h		;high byte
    1127/    A1EE : B7                  	ora	a
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 20 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    1128/    A1EF : 1F                  	rar
    1129/    A1F0 : 67                  	mov	h,a
    1130/    A1F1 : 7D                  	mov	a,l		;low byte
    1131/    A1F2 : 1F                  	rar
    1132/    A1F3 : 6F                  	mov	l,a
    1133/    A1F4 : C3 EB A1            	jmp	hlrotr0
    1134/    A1F7 :                     
    1135/    A1F7 :                     
    1136/    A1F7 :                     compute_cs:
    1137/    A1F7 :                     	;compute checksum for current directory buffer
    1138/    A1F7 : 0E 80               	mvi	c,recsiz	;size of directory buffer
    1139/    A1F9 : 2A B9 AA            	lhld	buffa		;current directory buffer
    1140/    A1FC : AF                  	xra	a		;clear checksum value
    1141/    A1FD :                     computecs0:
    1142/    A1FD : 86                  	add	m		;cs=cs+buff(recsiz-C)
    1143/    A1FE : 23                  	inx	h
    1144/    A1FF : 0D                  	dcr	c
    1145/    A200 : C2 FD A1            	jnz	computecs0
    1146/    A203 : C9                  	ret			;with checksum in A
    1147/    A204 :                     
    1148/    A204 :                     hlrotl:
    1149/    A204 :                     	;rotate the mask in HL by amount in C
    1150/    A204 : 0C                  	inr	c		;may be zero
    1151/    A205 :                     hlrotl0:
    1152/    A205 : 0D                  	dcr	c		;return if zero
    1153/    A206 : C8                  	rz
    1154/    A207 : 29                  	dad	h
    1155/    A208 : C3 05 A2            	jmp	hlrotl0
    1156/    A20B :                     
    1157/    A20B :                     set_cdisk:
    1158/    A20B :                     	;set a "1" value in curdsk position of BC
    1159/    A20B : C5                  	push	b		;save input parameter
    1160/    A20C : 3A 42 A0            	lda	curdsk		;ready parameter for shift
    1161/    A20F : 4F                  	mov	c,a
    1162/    A210 : 21 01 00            	lxi	h,1		;number to shift
    1163/    A213 : CD 04 A2            	call	hlrotl		;HL = mask to integrate
    1164/    A216 : C1                  	pop	b		;original mask
    1165/    A217 : 79                  	mov	a,c
    1166/    A218 : B5                  	ora	l
    1167/    A219 : 6F                  	mov	l,a
    1168/    A21A : 78                  	mov	a,b		;HL = mask or rol(1,curdsk)
    1169/    A21B : B4                  	ora	h
    1170/    A21C : 67                  	mov	h,a
    1171/    A21D : C9                  	ret
    1172/    A21E :                     
    1173/    A21E :                     nowrite:
    1174/    A21E :                     	;return true if dir checksum difference occurred
    1175/    A21E : 2A AD AA            	lhld	rodsk
    1176/    A221 : 3A 42 A0            	lda	curdsk
    1177/    A224 : 4F                  	mov	c,a
    1178/    A225 : CD EA A1            	call	hlrotr
    1179/    A228 : 7D                  	mov	a,l		;non zero if nowrite
    1180/    A229 : E6 01               	ani	1b
    1181/    A22B : C9                  	ret
    1182/    A22C :                     
    1183/    A22C :                     set_ro:
    1184/    A22C :                     	;set current disk to read only
    1185/    A22C : 21 AD AA            	lxi	h,rodsk
    1186/    A22F : 4E                  	mov	c,m
    1187/    A230 : 23                  	inx	h
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 21 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    1188/    A231 : 46                  	mov	b,m
    1189/    A232 : CD 0B A2            	call	set_cdisk	;sets bit to 1
    1190/    A235 : 22 AD AA            	shld	rodsk
    1191/    A238 :                     	;high water mark in directory goes to max
    1192/    A238 : 2A C8 AA            	lhld	dirmax		;DE = directory max
    1193/    A23B : 23                  	inx	h
    1194/    A23C : EB                  	xchg
    1195/    A23D : 2A B3 AA            	lhld	cdrmaxa		;HL = .cdrmax
    1196/    A240 : 73                  	mov	m,e		;cdrmax = dirmax
    1197/    A241 : 23                  	inx	h
    1198/    A242 : 72                  	mov	m,d
    1199/    A243 : C9                  	ret
    1200/    A244 :                     
    1201/    A244 :                     check_rodir:
    1202/    A244 :                     	;check current directory element for read/only status
    1203/    A244 : CD 5E A2            	call	getdptra	;address of element
    1204/    A247 :                     						
    1205/    A247 :                     check_rofile:
    1206/    A247 :                     	;check current buff(dptr) or fcb(0) for r/o status
    1207/    A247 : 11 09 00            	lxi	d,rofile	;offset to ro bit
    1208/    A24A : 19                  	dad	d
    1209/    A24B : 7E                  	mov	a,m		;return if not set
    1210/    A24C : 17                  	ral
    1211/    A24D : D0                  	rnc
    1212/    A24E : 21 0F 9D            	lxi	h,roferr
    1213/    A251 : C3 4A A0            	jmp	goerr
    1214/    A254 :                     ;	jmp rof_error ;exit to read only disk message
    1215/    A254 :                     
    1216/    A254 :                     
    1217/    A254 :                     check_write:
    1218/    A254 :                     	;check for write protected disk
    1219/    A254 : CD 1E A2            	call	nowrite		;ok to write if not rodsk
    1220/    A257 : C8                  	rz
    1221/    A258 : 21 0D 9D            	lxi	h,roderr
    1222/    A25B : C3 4A A0            	jmp	goerr
    1223/    A25E :                     ;	jmp rod_error ;read only disk error
    1224/    A25E :                     
    1225/    A25E :                     getdptra:
    1226/    A25E :                     	;compute the address of a directory element at
    1227/    A25E :                     	;positon dptr in the buffer
    1228/    A25E : 2A B9 AA            	lhld	buffa
    1229/    A261 : 3A E9 AA            	lda	dptr
    1230/    A264 :                     addh:
    1231/    A264 :                     	;HL = HL + A
    1232/    A264 : 85                  	add	l
    1233/    A265 : 6F                  	mov	l,a
    1234/    A266 : D0                  	rnc
    1235/    A267 :                     	;overflow to H
    1236/    A267 : 24                  	inr	h
    1237/    A268 : C9                  	ret
    1238/    A269 :                     
    1239/    A269 :                     
    1240/    A269 :                     getmodnum:
    1241/    A269 :                     	;compute the address of the module number 
    1242/    A269 :                     	;bring module number to accumulator
    1243/    A269 :                     	;(high order bit is fwf (file write flag)
    1244/    A269 : 2A 43 A0            	lhld	info		;HL=.fcb(modnum)
    1245/    A26C : 11 0E 00            	lxi	d,modnum
    1246/    A26F : 19                  	dad	d
    1247/    A270 : 7E                  	mov	a,m		;A=fcb(modnum)
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 22 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    1248/    A271 : C9                  	ret
    1249/    A272 :                     
    1250/    A272 :                     clrmodnum:
    1251/    A272 :                     	;clear the module number field for user open/make
    1252/    A272 : CD 69 A2            	call	getmodnum	;fcb(modnum)=0
    1253/    A275 : 36 00               	mvi	m,0
    1254/    A277 : C9                  	ret
    1255/    A278 :                     
    1256/    A278 :                     setfwf:
    1257/    A278 : CD 69 A2            	call	getmodnum	;HL=.fcb(modnum), A=fcb(modnum)
    1258/    A27B :                     	;set fwf (file write flag) to "1"
    1259/    A27B : F6 80               	ori	fwfmsk		;fcb(modnum)=fcb(modnum) or 80h
    1260/    A27D : 77                  	mov	m,a
    1261/    A27E :                     	;also returns non zero in accumulator
    1262/    A27E : C9                  	ret
    1263/    A27F :                     
    1264/    A27F :                     
    1265/    A27F :                     compcdr:
    1266/    A27F :                     	;return cy if cdrmax > dcnt
    1267/    A27F : 2A EA AA            	lhld	dcnt		;DE = directory counter
    1268/    A282 : EB                  	xchg
    1269/    A283 : 2A B3 AA            	lhld	cdrmaxa		;HL=.cdrmax
    1270/    A286 : 7B                  	mov	a,e		;low(dcnt) - low(cdrmax)
    1271/    A287 : 96                  	sub	m
    1272/    A288 : 23                  	inx	h		;HL = .cdrmax+1
    1273/    A289 : 7A                  	mov	a,d		;hig(dcnt) - hig(cdrmax)
    1274/    A28A : 9E                  	sbb	m
    1275/    A28B :                     	;condition dcnt - cdrmax  produces cy if cdrmax>dcnt
    1276/    A28B : C9                  	ret
    1277/    A28C :                     
    1278/    A28C :                     setcdr:
    1279/    A28C :                     	;if not (cdrmax > dcnt) then cdrmax = dcnt+1
    1280/    A28C : CD 7F A2            	call	compcdr
    1281/    A28F : D8                  	rc			;return if cdrmax > dcnt
    1282/    A290 :                     	;otherwise, HL = .cdrmax+1, DE = dcnt
    1283/    A290 : 13                  	inx	d
    1284/    A291 : 72                  	mov	m,d
    1285/    A292 : 2B                  	dcx	h
    1286/    A293 : 73                  	mov	m,e
    1287/    A294 : C9                  	ret
    1288/    A295 :                     
    1289/    A295 :                     subdh:
    1290/    A295 :                     	;compute HL = DE - HL
    1291/    A295 : 7B                  	mov	a,e
    1292/    A296 : 95                  	sub	l
    1293/    A297 : 6F                  	mov	l,a
    1294/    A298 : 7A                  	mov	a,d
    1295/    A299 : 9C                  	sbb	h
    1296/    A29A : 67                  	mov	h,a
    1297/    A29B : C9                  	ret
    1298/    A29C :                     
    1299/    A29C :                     newchecksum:
    1300/    A29C : 0E FF               	mvi	c,_true		;drop through to compute new checksum
    1301/    A29E :                     checksum:
    1302/    A29E :                     	;compute current checksum record and update the
    1303/    A29E :                     	;directory element if C=true, or check for = if not
    1304/    A29E :                     	;drec < chksiz?
    1305/    A29E : 2A EC AA            	lhld	drec		;DE-HL
    1306/    A2A1 : EB                  	xchg
    1307/    A2A2 : 2A CC AA            	lhld	chksiz
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 23 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    1308/    A2A5 : CD 95 A2            	call	subdh
    1309/    A2A8 : D0                  	rnc			;skip checksum if past checksum vector size
    1310/    A2A9 :                     	;drec < chksiz, so continue
    1311/    A2A9 : C5                  	push	b		;save init flag
    1312/    A2AA : CD F7 A1            	call	compute_cs	;check sum value to A
    1313/    A2AD : 2A BD AA            	lhld	checka		;address of check sum vector
    1314/    A2B0 : EB                  	xchg
    1315/    A2B1 : 2A EC AA            	lhld	drec		;value of drec
    1316/    A2B4 : 19                  	dad	d		;HL = .check(drec)
    1317/    A2B5 : C1                  	pop	b		;recall true=0ffh or false=00 to C
    1318/    A2B6 : 0C                  	inr	c		;0ffh produces zero flag
    1319/    A2B7 : CA C4 A2            	jz	initial_cs
    1320/    A2BA :                     	;not initializing, compare
    1321/    A2BA : BE                  	cmp	m		;compute_cs=check(drec)?
    1322/    A2BB : C8                  	rz			;no message if ok
    1323/    A2BC :                     	;checksum error, are we beyond
    1324/    A2BC :                     	;the end of the disk?
    1325/    A2BC : CD 7F A2            	call	compcdr
    1326/    A2BF : D0                  	rnc			;no message if so
    1327/    A2C0 : CD 2C A2            	call	set_ro		;read/only disk set
    1328/    A2C3 : C9                  	ret
    1329/    A2C4 :                     initial_cs:
    1330/    A2C4 :                     	;initializing the checksum
    1331/    A2C4 : 77                  	mov	m,a
    1332/    A2C5 : C9                  	ret
    1333/    A2C6 :                     
    1334/    A2C6 :                     
    1335/    A2C6 :                     wrdir:
    1336/    A2C6 :                     	;write the current directory entry, set checksum
    1337/    A2C6 : CD 9C A2            	call	newchecksum	;initialize entry
    1338/    A2C9 : CD E0 A2            	call	setdir		;directory dma
    1339/    A2CC : 0E 01               	mvi	c,1		;indicates a write directory operation
    1340/    A2CE : CD B8 A0            	call	wrbuff		;write the buffer
    1341/    A2D1 : C3 DA A2                    jmp	setdata		;to data dma address
    1342/    A2D4 :                     	;ret
    1343/    A2D4 :                     
    1344/    A2D4 :                     rd_dir:
    1345/    A2D4 :                     	;read a directory entry into the directory buffer
    1346/    A2D4 : CD E0 A2            	call	setdir		;directory dma
    1347/    A2D7 : CD B2 A0            	call	rdbuff		;directory record loaded
    1348/    A2DA :                             ; jmp setdata to data dma address    
    1349/    A2DA :                     	;ret
    1350/    A2DA :                     
    1351/    A2DA :                     setdata:
    1352/    A2DA :                     	;set data dma address
    1353/    A2DA : 21 B1 AA            	lxi	h,dmaad		;to complete the call
    1354/    A2DD : C3 E3 A2            	jmp	setdma
    1355/    A2E0 :                     
    1356/    A2E0 :                     setdir:
    1357/    A2E0 :                     	;set directory dma address
    1358/    A2E0 : 21 B9 AA            	lxi	h,buffa		;jmp setdma to complete call     
    1359/    A2E3 :                     
    1360/    A2E3 :                     setdma:
    1361/    A2E3 :                     	;HL=.dma address to set (i.e., buffa or dmaad)
    1362/    A2E3 : 4E                  	mov	c,m		;parameter ready
    1363/    A2E4 : 23                  	inx	h
    1364/    A2E5 : 46                  	mov	b,m
    1365/    A2E6 : C3 24 AB            	jmp	setdmaf
    1366/    A2E9 :                     
    1367/    A2E9 :                     
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 24 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    1368/    A2E9 :                     dir_to_user:
    1369/    A2E9 :                     	;copy the directory entry to the user buffer
    1370/    A2E9 :                     	;after call to search or searchn by user code
    1371/    A2E9 : 2A B9 AA            	lhld	buffa		;source is directory buffer
    1372/    A2EC : EB                  	xchg
    1373/    A2ED : 2A B1 AA            	lhld	dmaad		;destination is user dma address
    1374/    A2F0 : 0E 80               	mvi	c,recsiz	;copy entire record
    1375/    A2F2 : C3 4F A0            	jmp	move
    1376/    A2F5 :                     	;ret
    1377/    A2F5 :                     
    1378/    A2F5 :                     end_of_dir:
    1379/    A2F5 :                     	;return zero flag if at end of directory, non zero
    1380/    A2F5 :                     	;if not at end (end of dir if dcnt = 0ffffh)
    1381/    A2F5 : 21 EA AA            	lxi	h,dcnt		;may be 0ffh
    1382/    A2F8 : 7E                  	mov	a,m
    1383/    A2F9 : 23                  	inx	h		;low(dcnt) = high(dcnt)?
    1384/    A2FA : BE                  	cmp	m
    1385/    A2FB : C0                  	rnz			;non zero returned if different
    1386/    A2FC :                     	;high and low the same, = 0ffh?
    1387/    A2FC : 3C                  	inr	a		;0ffh becomes 00 if so
    1388/    A2FD : C9                  	ret
    1389/    A2FE :                     
    1390/    A2FE :                     set_end_dir:
    1391/    A2FE :                     	;set dcnt to the end of the directory
    1392/    A2FE : 21 FF FF            	lxi	h,enddir
    1393/    A301 : 22 EA AA            	shld	dcnt
    1394/    A304 : C9                  	ret
    1395/    A305 :                     
    1396/    A305 :                     read_dir:
    1397/    A305 :                     	;read next directory entry, with C=true if initializing
    1398/    A305 : 2A C8 AA            	lhld	dirmax		;in preparation for subtract
    1399/    A308 : EB                  	xchg
    1400/    A309 : 2A EA AA            	lhld	dcnt		;dcnt=dcnt+1
    1401/    A30C : 23                  	inx	h
    1402/    A30D : 22 EA AA            	shld	dcnt
    1403/    A310 :                     	;continue while dirmax >= dcnt (dirmax-dcnt no cy)
    1404/    A310 : CD 95 A2            	call	subdh		;DE-HL
    1405/    A313 : D2 19 A3            	jnc	read_dir0
    1406/    A316 :                     	;yes, set dcnt to end of directory
    1407/    A316 : C3 FE A2            	jmp	set_end_dir
    1408/    A319 :                     ;		ret
    1409/    A319 :                     read_dir0:
    1410/    A319 :                     	;not at end of directory, seek next element
    1411/    A319 :                     	;initialization flag is in C
    1412/    A319 : 3A EA AA            	lda	dcnt		;low(dcnt) and dskmsk
    1413/    A31C : E6 03               	ani	dskmsk
    1414/    A31E : 06 05               	mvi	b,fcbshf	;to multiply by fcb size
    1415/    A320 :                     read_dir1:
    1416/    A320 : 87                  	add	a
    1417/    A321 : 05                  	dcr	b
    1418/    A322 : C2 20 A3            	jnz	read_dir1
    1419/    A325 :                     	;A = (low(dcnt) and dskmsk) shl fcbshf
    1420/    A325 : 32 E9 AA            	sta	dptr		;ready for next dir operation
    1421/    A328 : B7                  	ora	a		;return if not a new record
    1422/    A329 : C0                  	rnz
    1423/    A32A : C5                  	push	b		;save initialization flag C
    1424/    A32B : CD C3 A0            	call	seek_dir	;seek proper record
    1425/    A32E : CD D4 A2            	call	rd_dir		;read the directory record
    1426/    A331 : C1                  	pop	b		;recall initialization flag
    1427/    A332 : C3 9E A2            	jmp	checksum	;checksum the directory elt
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 25 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    1428/    A335 :                     	;ret
    1429/    A335 :                     
    1430/    A335 :                     
    1431/    A335 :                     getallocbit:
    1432/    A335 :                     	;given allocation vector position BC, return with byte
    1433/    A335 :                     	;containing BC shifted so that the least significant
    1434/    A335 :                     	;bit is in the low order accumulator position.  HL is
    1435/    A335 :                     	;the address of the byte for possible replacement in
    1436/    A335 :                     	;memory upon return, and D contains the number of shifts
    1437/    A335 :                     	;required to place the returned value back into position
    1438/    A335 : 79                  	mov	a,c
    1439/    A336 : E6 07               	ani	111b
    1440/    A338 : 3C                  	inr	a
    1441/    A339 : 5F                  	mov	e,a
    1442/    A33A : 57                  	mov	d,a
    1443/    A33B :                     	;d and e both contain the number of bit positions to shift
    1444/    A33B : 79                  	mov	a,c		;C shr 3 to C
    1445/    A33C : 0F                  	rrc
    1446/    A33D : 0F                  	rrc
    1447/    A33E : 0F                  	rrc
    1448/    A33F : E6 1F               	ani	11111b
    1449/    A341 : 4F                  	mov	c,a
    1450/    A342 : 78                  	mov	a,b		;B shl 5
    1451/    A343 : 87                  	add	a
    1452/    A344 : 87                  	add	a
    1453/    A345 : 87                  	add	a
    1454/    A346 : 87                  	add	a
    1455/    A347 : 87                  	add	a
    1456/    A348 : B1                  	ora	c		;bbbccccc to C
    1457/    A349 : 4F                  	mov	c,a
    1458/    A34A : 78                  	mov	a,b		;BC shr 3 to BC
    1459/    A34B : 0F                  	rrc
    1460/    A34C : 0F                  	rrc
    1461/    A34D : 0F                  	rrc
    1462/    A34E : E6 1F               	ani	11111b
    1463/    A350 : 47                  	mov	b,a
    1464/    A351 : 2A BF AA            	lhld	alloca		;base address of allocation vector
    1465/    A354 : 09                  	dad	b		;byte to A, hl = .alloc(BC shr 3)
    1466/    A355 : 7E                  	mov	a,m
    1467/    A356 :                     	;now move the bit to the low order position of A
    1468/    A356 : 07                  rotl:	rlc
    1469/    A357 : 1D                  	dcr	e
    1470/    A358 : C2 56 A3            	jnz	rotl
    1471/    A35B : C9                  	ret
    1472/    A35C :                     
    1473/    A35C :                     
    1474/    A35C :                     set_alloc_bit:
    1475/    A35C :                     	;BC is the bit position of ALLOC to set or reset.  The
    1476/    A35C :                     	;value of the bit is in register E.
    1477/    A35C : D5                  	push	d		;shifted val A, count in D
    1478/    A35D : CD 35 A3            	call	getallocbit
    1479/    A360 : E6 FE               	ani	11111110b	;mask low bit to zero (may be set)
    1480/    A362 : C1                  	pop	b		;low bit of C is masked into A
    1481/    A363 : B1                  	ora	c
    1482/    A364 :                     ;	jmp rotr ;to rotate back into proper position	
    1483/    A364 :                     	;ret
    1484/    A364 :                     rotr:
    1485/    A364 :                     	;byte value from ALLOC is in register A, with shift count
    1486/    A364 :                     	;in register C (to place bit back into position), and
    1487/    A364 :                     	;target ALLOC position in registers HL, rotate and replace
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 26 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    1488/    A364 : 0F                  	rrc			;back into position
    1489/    A365 : 15                  	dcr	d
    1490/    A366 : C2 64 A3            	jnz	rotr 
    1491/    A369 : 77                  	mov	m,a		;back to ALLOC
    1492/    A36A : C9                  	ret
    1493/    A36B :                     
    1494/    A36B :                     scandm:
    1495/    A36B :                     	;scan the disk map addressed by dptr for non-zero
    1496/    A36B :                     	;entries, the allocation vector entry corresponding
    1497/    A36B :                     	;to a non-zero entry is set to the value of C (0,1)
    1498/    A36B : CD 5E A2            	call	getdptra	;HL = buffa + dptr
    1499/    A36E :                     	;HL addresses the beginning of the directory entry
    1500/    A36E : 11 10 00            	lxi	d,dskmap	;hl now addresses the disk map
    1501/    A371 : 19                  	dad	d
    1502/    A372 : C5                  	push	b		;save the 0/1 bit to set
    1503/    A373 : 0E 11               	mvi	c,fcblen-dskmap+1	;size of single byte disk map + 1
    1504/    A375 :                     scandm0:
    1505/    A375 :                     	;loop once for each disk map entry
    1506/    A375 : D1                  	pop	d		;recall bit parity
    1507/    A376 : 0D                  	dcr	c		;all done scanning?
    1508/    A377 : C8                  	rz
    1509/    A378 :                     	;no, get next entry for scan
    1510/    A378 : D5                  	push	d		;replace bit parity
    1511/    A379 : 3A DD AA            	lda	single
    1512/    A37C : B7                  	ora	a
    1513/    A37D : CA 88 A3            	jz	scandm1
    1514/    A380 :                     	;single byte scan operation
    1515/    A380 : C5                  	push	b		;save counter
    1516/    A381 : E5                  	push	h		;save map address
    1517/    A382 : 4E                  	mov	c,m		;BC=block#
    1518/    A383 : 06 00               	mvi	b,0
    1519/    A385 : C3 8E A3            	jmp	scandm2
    1520/    A388 :                     scandm1:
    1521/    A388 :                     	;double byte scan operation
    1522/    A388 : 0D                  	dcr	c		;count for double byte
    1523/    A389 : C5                  	push	b		;save counter
    1524/    A38A : 4E                  	mov	c,m		;BC=block#
    1525/    A38B : 23                  	inx	h
    1526/    A38C : 46                  	mov	b,m
    1527/    A38D : E5                  	push	h		;save map address
    1528/    A38E :                     scandm2:
    1529/    A38E :                     	;arrive here with BC=block#, E=0/1
    1530/    A38E : 79                  	mov	a,c		;skip if = 0000
    1531/    A38F : B0                  	ora	b
    1532/    A390 : CA 9D A3            	jz	scanm3
    1533/    A393 : 2A C6 AA            	lhld	maxall		;check invalid index
    1534/    A396 : 7D                  	mov	a,l		;maxall - block#
    1535/    A397 : 91                  	sub	c
    1536/    A398 : 7C                  	mov	a,h
    1537/    A399 : 98                  	sbb	b
    1538/    A39A : D4 5C A3            	cnc	set_alloc_bit
    1539/    A39D :                     	;bit set to 0/1
    1540/    A39D :                     scanm3:
    1541/    A39D : E1                  	pop	h		;to next bit position
    1542/    A39E : 23                  	inx	h
    1543/    A39F : C1                  	pop	b		;recall counter
    1544/    A3A0 : C3 75 A3            	jmp	scandm0		;for another item
    1545/    A3A3 :                     
    1546/    A3A3 :                     initialize:
    1547/    A3A3 :                     	;initialize the current disk
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 27 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    1548/    A3A3 :                     	;lret = false ;set to true if $ file exists
    1549/    A3A3 :                     	;compute the length of the allocation vector - 2
    1550/    A3A3 : 2A C6 AA            	lhld	maxall		;perform maxall/8
    1551/    A3A6 : 0E 03               	mvi	c,3
    1552/    A3A8 :                     	;number of bytes in alloc vector is (maxall/8)+1
    1553/    A3A8 : CD EA A1            	call	hlrotr		;HL = maxall/8+1
    1554/    A3AB : 23                  	inx	h
    1555/    A3AC : 44                  	mov	b,h		;count down BC til zero
    1556/    A3AD : 4D                  	mov	c,l
    1557/    A3AE : 2A BF AA            	lhld	alloca		;base of allocation vector
    1558/    A3B1 :                     	;fill the allocation vector with zeros
    1559/    A3B1 :                     initial0:
    1560/    A3B1 : 36 00               	mvi	m,0		;alloc(i)=0
    1561/    A3B3 : 23                  	inx	h
    1562/    A3B4 : 0B                  	dcx	b		;count length down
    1563/    A3B5 : 78                  	mov	a,b
    1564/    A3B6 : B1                  	ora	c
    1565/    A3B7 : C2 B1 A3            	jnz	initial0
    1566/    A3BA :                     	;set the reserved space for the directory
    1567/    A3BA : 2A CA AA            	lhld	dirblk
    1568/    A3BD : EB                  	xchg
    1569/    A3BE : 2A BF AA            	lhld	alloca		;HL=.alloc()
    1570/    A3C1 : 73                  	mov	m,e		;sets reserved directory blks
    1571/    A3C2 : 23                  	inx	h
    1572/    A3C3 : 72                  	mov	m,d
    1573/    A3C4 :                     	;allocation vector initialized, home disk
    1574/    A3C4 : CD A1 A0            	call	home
    1575/    A3C7 :                             ;cdrmax = 3 (scans at least one directory record)
    1576/    A3C7 : 2A B3 AA            	lhld	cdrmaxa
    1577/    A3CA : 36 03               	mvi	m,3
    1578/    A3CC : 23                  	inx	h
    1579/    A3CD : 36 00               	mvi	m,0
    1580/    A3CF :                     	;cdrmax = 0000
    1581/    A3CF : CD FE A2            	call	set_end_dir	;dcnt = enddir
    1582/    A3D2 :                     	;read directory entries and check for allocated storage
    1583/    A3D2 :                     initial2:
    1584/    A3D2 : 0E FF               	mvi	c,_true
    1585/    A3D4 : CD 05 A3            	call	read_dir
    1586/    A3D7 : CD F5 A2            	call	end_of_dir	;return if end of directory
    1587/    A3DA : C8                  	rz
    1588/    A3DB :                     	;not end of directory, valid entry?
    1589/    A3DB : CD 5E A2            	call	getdptra	;HL = buffa + dptr
    1590/    A3DE : 3E E5               	mvi	a,empty
    1591/    A3E0 : BE                  	cmp	m
    1592/    A3E1 : CA D2 A3            	jz	initial2	;go get another item
    1593/    A3E4 :                     	;not empty, user code the same?
    1594/    A3E4 : 3A 41 A0            	lda	usrcode
    1595/    A3E7 : BE                  	cmp	m
    1596/    A3E8 : C2 F6 A3            	jnz	pdollar
    1597/    A3EB :                     	;same user code, check for '$' submit
    1598/    A3EB : 23                  	inx	h		;first character
    1599/    A3EC : 7E                  	mov	a,m
    1600/    A3ED : D6 24               	sui	'$'		;dollar file?
    1601/    A3EF : C2 F6 A3            	jnz	pdollar
    1602/    A3F2 :                     	;dollar file found, mark in lret
    1603/    A3F2 : 3D                  	dcr	a		;lret = 255
    1604/    A3F3 : 32 45 A0            	sta	lret
    1605/    A3F6 :                     pdollar:
    1606/    A3F6 :                     	;now scan the disk map for allocated blocks
    1607/    A3F6 : 0E 01               	mvi	c,1		;set to allocated
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 28 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    1608/    A3F8 : CD 6B A3            	call	scandm
    1609/    A3FB : CD 8C A2            	call	setcdr		;set cdrmax to dcnt
    1610/    A3FE : C3 D2 A3            	jmp	initial2	;for another entry
    1611/    A401 :                     
    1612/    A401 :                     copy_dirloc:
    1613/    A401 :                     	;copy directory location to lret following
    1614/    A401 :                     	;delete, rename, ... ops
    1615/    A401 : 3A D4 AA            	lda	dirloc
    1616/    A404 : C3 01 A0            	jmp	sta_ret
    1617/    A407 :                     ;	ret
    1618/    A407 :                     
    1619/    A407 :                     compext:
    1620/    A407 :                     	;compare extent# in A with that in C, return nonzero
    1621/    A407 :                     	;if they do not match
    1622/    A407 : C5                  	push	b		;save C's original value
    1623/    A408 : F5                  	push	psw
    1624/    A409 : 3A C5 AA            	lda	extmsk
    1625/    A40C : 2F                  	cma
    1626/    A40D : 47                  	mov	b,a
    1627/    A40E :                     	;B has negated form of extent mask
    1628/    A40E : 79                  	mov	a,c		;low bits removed from C
    1629/    A40F : A0                  	ana	b
    1630/    A410 : 4F                  	mov	c,a
    1631/    A411 : F1                  	pop	psw		;low bits removed from A
    1632/    A412 : A0                  	ana	b
    1633/    A413 : 91                  	sub	c		;set flags
    1634/    A414 : E6 1F               	ani	maxext
    1635/    A416 : C1                  	pop	b		;restore original values
    1636/    A417 : C9                  	ret
    1637/    A418 :                     
    1638/    A418 :                     search:
    1639/    A418 :                     	;search for directory element of length C at info
    1640/    A418 : 3E FF               	mvi	a,0ffh		;changed if actually found
    1641/    A41A : 32 D4 AA            	sta	dirloc
    1642/    A41D : 21 D8 AA            	lxi	h,searchl	;searchl = C
    1643/    A420 : 71                  	mov	m,c
    1644/    A421 : 2A 43 A0            	lhld	info		;searcha = info
    1645/    A424 : 22 D9 AA            	shld	searcha
    1646/    A427 : CD FE A2            	call	set_end_dir	;dcnt = enddir
    1647/    A42A : CD A1 A0            	call	home		;to start at the beginning
    1648/    A42D :                     	;(drop through to searchn)
    1649/    A42D :                     
    1650/    A42D :                     searchn:
    1651/    A42D :                     	;search for the next directory element, assuming
    1652/    A42D :                     	;a previous call on search which sets searcha and
    1653/    A42D :                     	;searchl
    1654/    A42D : 0E 00               	mvi	c,_false	;read next dir element
    1655/    A42F : CD 05 A3            	call	read_dir
    1656/    A432 : CD F5 A2            	call	end_of_dir	;skip to end if so
    1657/    A435 : CA 94 A4            	jz	search_fin
    1658/    A438 :                     	;not end of directory, scan for match
    1659/    A438 : 2A D9 AA            	lhld	searcha		;DE=beginning of user fcb
    1660/    A43B : EB                  	xchg
    1661/    A43C : 1A                  	ldax	d		;first character
    1662/    A43D : FE E5               	cpi	empty		;keep scanning if empty
    1663/    A43F : CA 4A A4            	jz	searchnext
    1664/    A442 :                     	;not empty, may be end of logical directory
    1665/    A442 : D5                  	push	d		;save search address
    1666/    A443 : CD 7F A2            	call	compcdr		;past logical end?
    1667/    A446 : D1                  	pop	d		;recall address
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 29 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    1668/    A447 : D2 94 A4            	jnc	search_fin	;artificial stop
    1669/    A44A :                     searchnext:
    1670/    A44A : CD 5E A2            	call	getdptra	;HL = buffa+dptr
    1671/    A44D : 3A D8 AA            	lda	searchl		;length of search to c
    1672/    A450 : 4F                  	mov	c,a
    1673/    A451 : 06 00               	mvi	b,0		;b counts up, c counts down
    1674/    A453 :                     searchloop:
    1675/    A453 : 79                  	mov	a,c
    1676/    A454 : B7                  	ora	a
    1677/    A455 : CA 83 A4            	jz	endsearch
    1678/    A458 : 1A                  	ldax	d		;? matches all
    1679/    A459 : FE 3F               	cpi	'?'
    1680/    A45B : CA 7C A4            	jz	searchok
    1681/    A45E :                     	;scan next character if not ubytes
    1682/    A45E : 78                  	mov	a,b
    1683/    A45F : FE 0D               	cpi	ubytes
    1684/    A461 : CA 7C A4            	jz	searchok
    1685/    A464 :                     	;not the ubytes field, extent field?
    1686/    A464 : FE 0C               	cpi	extnum		;may be extent field
    1687/    A466 : 1A                  	ldax	d		;fcb character
    1688/    A467 : CA 73 A4            	jz	searchext	;skip to search extent
    1689/    A46A : 96                  	sub	m		;mask-out flags/extent modulus
    1690/    A46B : E6 7F               	ani	7fh
    1691/    A46D : C2 2D A4            	jnz	searchn		;skip if not matched
    1692/    A470 : C3 7C A4            	jmp	searchok	;matched character
    1693/    A473 :                     searchext:
    1694/    A473 :                     	;A has fcb character
    1695/    A473 :                     	;attempt an extent # match
    1696/    A473 : C5                  	push	b		;save counters
    1697/    A474 : 4E                  	mov	c,m		;directory character to c
    1698/    A475 : CD 07 A4            	call	compext		;compare user/dir char
    1699/    A478 : C1                  	pop	b		;recall counters
    1700/    A479 : C2 2D A4            	jnz	searchn		;skip if no match
    1701/    A47C :                     searchok:
    1702/    A47C :                     	;current character matches
    1703/    A47C : 13                  	inx	d
    1704/    A47D : 23                  	inx	h
    1705/    A47E : 04                  	inr	b
    1706/    A47F : 0D                  	dcr	c
    1707/    A480 : C3 53 A4            	jmp	searchloop
    1708/    A483 :                     endsearch:
    1709/    A483 :                     	;entire name matches, return dir position
    1710/    A483 : 3A EA AA            	lda	dcnt
    1711/    A486 : E6 03               	ani	dskmsk
    1712/    A488 : 32 45 A0            	sta	lret
    1713/    A48B :                     	;lret = low(dcnt) and 11b
    1714/    A48B : 21 D4 AA            	lxi	h,dirloc	;dirloc=0ffh?
    1715/    A48E : 7E                  	mov	a,m
    1716/    A48F : 17                  	ral
    1717/    A490 : D0                  	rnc
    1718/    A491 :                     	;yes, change it to 0 to mark as found
    1719/    A491 : AF                  	xra	a		;dirloc=0
    1720/    A492 : 77                  	mov	m,a
    1721/    A493 : C9                  	ret
    1722/    A494 :                     search_fin:
    1723/    A494 :                     	;end of directory, or empty name
    1724/    A494 : CD FE A2            	call	set_end_dir	;may be artifical end
    1725/    A497 : 3E FF               	mvi	a,255
    1726/    A499 : C3 01 A0            	jmp	sta_ret
    1727/    A49C :                     
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 30 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    1728/    A49C :                     
    1729/    A49C :                     delete:
    1730/    A49C :                     	;delete the currently addressed file
    1731/    A49C : CD 54 A2            	call	check_write	;write protected?
    1732/    A49F : 0E 0C               	mvi	c,extnum	;search through file type
    1733/    A4A1 : CD 18 A4            	call	search
    1734/    A4A4 :                     delete0:
    1735/    A4A4 :                     	;loop while directory matches
    1736/    A4A4 : CD F5 A2            	call	end_of_dir	;stop if end
    1737/    A4A7 : C8                  	rz
    1738/    A4A8 :                     	;set each non zero disk map entry to 0
    1739/    A4A8 :                     	;in the allocation vector
    1740/    A4A8 :                     	;may be r/o file
    1741/    A4A8 : CD 44 A2            	call	check_rodir	;ro disk error if found
    1742/    A4AB : CD 5E A2            	call	getdptra	;HL=.buff(dptr)
    1743/    A4AE : 36 E5               	mvi	m,empty
    1744/    A4B0 : 0E 00               	mvi	c,0		;alloc elts set to 0
    1745/    A4B2 : CD 6B A3            	call	scandm
    1746/    A4B5 : CD C6 A2            	call	wrdir		;write the directory
    1747/    A4B8 : CD 2D A4            	call	searchn		;to next element
    1748/    A4BB : C3 A4 A4            	jmp	delete0		;for another record
    1749/    A4BE :                     
    1750/    A4BE :                     get_block:
    1751/    A4BE :                     	;given allocation vector position BC, find the zero bit
    1752/    A4BE :                     	;closest to this position by searching left and right.
    1753/    A4BE :                     	;if found, set the bit to one and return the bit position
    1754/    A4BE :                     	;in hl.  if not found (i.e., we pass 0 on the left, or
    1755/    A4BE :                     	;maxall on the right), return 0000 in hl
    1756/    A4BE : 50                  	mov	d,b		;copy of starting position to de
    1757/    A4BF : 59                  	mov	e,c
    1758/    A4C0 :                     lefttst:
    1759/    A4C0 : 79                  	mov	a,c		;skip if left=0000
    1760/    A4C1 : B0                  	ora	b
    1761/    A4C2 : CA D1 A4            	jz	righttst
    1762/    A4C5 :                     	;left not at position zero, bit zero?
    1763/    A4C5 : 0B                  	dcx	b		;left,right pushed
    1764/    A4C6 : D5                  	push	d
    1765/    A4C7 : C5                  	push	b
    1766/    A4C8 : CD 35 A3            	call	getallocbit
    1767/    A4CB : 1F                  	rar			;return block number if zero
    1768/    A4CC : D2 EC A4            	jnc	retblock
    1769/    A4CF :                     	;bit is one, so try the right
    1770/    A4CF : C1                  	pop	b		;left, right restored
    1771/    A4D0 : D1                  	pop	d
    1772/    A4D1 :                     righttst:
    1773/    A4D1 : 2A C6 AA            	lhld	maxall		;value of maximum allocation#
    1774/    A4D4 : 7B                  	mov	a,e		;right=maxall?
    1775/    A4D5 : 95                  	sub	l
    1776/    A4D6 : 7A                  	mov	a,d
    1777/    A4D7 : 9C                  	sbb	h
    1778/    A4D8 : D2 F4 A4            	jnc	retblock0	;return block 0000 if so
    1779/    A4DB : 13                  	inx	d		;left, right pushed
    1780/    A4DC : C5                  	push	b
    1781/    A4DD : D5                  	push	d
    1782/    A4DE : 42                  	mov	b,d		;ready right for call
    1783/    A4DF : 4B                  	mov	c,e
    1784/    A4E0 : CD 35 A3            	call	getallocbit
    1785/    A4E3 : 1F                  	rar			;return block number if zero
    1786/    A4E4 : D2 EC A4            	jnc	retblock
    1787/    A4E7 : D1                  	pop	d		;restore left and right pointers
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 31 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    1788/    A4E8 : C1                  	pop	b
    1789/    A4E9 : C3 C0 A4            	jmp	lefttst ;for another attempt
    1790/    A4EC :                     retblock:
    1791/    A4EC : 17                  	ral			;bit back into position and set to 1
    1792/    A4ED : 3C                  	inr	a
    1793/    A4EE :                     	;d contains the number of shifts required to reposition
    1794/    A4EE : CD 64 A3            	call	rotr		;move bit back to position and store
    1795/    A4F1 : E1                  	pop	h		;HL returned value, DE discarded
    1796/    A4F2 : D1                  	pop	d
    1797/    A4F3 : C9                  	ret
    1798/    A4F4 :                     retblock0:
    1799/    A4F4 :                     	;cannot find an available bit, return 0000
    1800/    A4F4 : 79                  	mov	a,c		;
    1801/    A4F5 : B0                  	ora	b		;also at beginning
    1802/    A4F6 : C2 C0 A4            	jnz	lefttst
    1803/    A4F9 : 21 00 00            	lxi	h,0000h
    1804/    A4FC : C9                  	ret
    1805/    A4FD :                     
    1806/    A4FD :                     copy_fcb:
    1807/    A4FD :                     	;copy the entire file control block
    1808/    A4FD : 0E 00               	mvi	c,0		;start at 0, to fcblen-1
    1809/    A4FF : 1E 20               	mvi	e,fcblen
    1810/    A501 :                     	;	jmp copy_dir
    1811/    A501 :                     
    1812/    A501 :                     copy_dir:
    1813/    A501 :                     	;copy fcb information starting at C for E bytes
    1814/    A501 :                     	;into the currently addressed directory entry
    1815/    A501 : D5                  	push	d		;save length for later
    1816/    A502 : 06 00               	mvi	b,0		;double index to BC
    1817/    A504 : 2A 43 A0            	lhld	info		;HL = source for data
    1818/    A507 : 09                  	dad	b		;DE=.fcb(C), source for copy
    1819/    A508 : EB                  	xchg
    1820/    A509 : CD 5E A2            	call	getdptra	;HL=.buff(dptr), destination
    1821/    A50C : C1                  	pop	b		;DE=source, HL=dest, C=length
    1822/    A50D : CD 4F A0            	call	move		;data moved
    1823/    A510 :                     seek_copy:
    1824/    A510 :                     	;enter from close to seek and copy current element
    1825/    A510 : CD C3 A0            	call	seek_dir	;to the directory element
    1826/    A513 : C3 C6 A2            	jmp	wrdir		;write the directory element
    1827/    A516 :                     	;ret
    1828/    A516 :                     
    1829/    A516 :                     
    1830/    A516 :                     rename:
    1831/    A516 :                     	;rename the file described by the first half of
    1832/    A516 :                     	;the currently addressed file control block. the
    1833/    A516 :                     	;new name is contained in the last half of the
    1834/    A516 :                     	;currently addressed file conrol block.  the file
    1835/    A516 :                     	;name and type are changed, but the reel number
    1836/    A516 :                     	;is ignored.  the user number is identical
    1837/    A516 : CD 54 A2            	call	check_write	;may be write protected
    1838/    A519 :                     	;search up to the extent field
    1839/    A519 : 0E 0C               	mvi	c,extnum
    1840/    A51B : CD 18 A4            	call	search
    1841/    A51E :                     	;copy position 0
    1842/    A51E : 2A 43 A0            	lhld	info		;HL=.fcb(0), A=fcb(0)
    1843/    A521 : 7E                  	mov	a,m
    1844/    A522 : 11 10 00            	lxi	d,dskmap	;HL=.fcb(dskmap)
    1845/    A525 : 19                  	dad	d
    1846/    A526 : 77                  	mov	m,a		;fcb(dskmap)=fcb(0)
    1847/    A527 :                     	;assume the same disk drive for new named file
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 32 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    1848/    A527 :                     rename0:
    1849/    A527 : CD F5 A2            	call	end_of_dir	;stop at end of dir
    1850/    A52A : C8                  	rz
    1851/    A52B :                     	;not end of directory, rename next element
    1852/    A52B : CD 44 A2            	call	check_rodir	;may be read-only file
    1853/    A52E : 0E 10               	mvi	c,dskmap
    1854/    A530 : 1E 0C               	mvi	e,extnum
    1855/    A532 : CD 01 A5            	call	copy_dir
    1856/    A535 :                     	;element renamed, move to next
    1857/    A535 : CD 2D A4            	call	searchn
    1858/    A538 : C3 27 A5            	jmp	rename0
    1859/    A53B :                     
    1860/    A53B :                     indicators:
    1861/    A53B :                     	;set file indicators for current fcb
    1862/    A53B : 0E 0C               	mvi	c,extnum	;through file type
    1863/    A53D : CD 18 A4            	call	search
    1864/    A540 :                     indic0:
    1865/    A540 : CD F5 A2            	call	end_of_dir	;stop at end of dir
    1866/    A543 : C8                  	rz
    1867/    A544 :                     	;not end of directory, continue to change
    1868/    A544 : 0E 00               	mvi	c,0		;copy name
    1869/    A546 : 1E 0C               	mvi	e,extnum
    1870/    A548 : CD 01 A5            	call	copy_dir
    1871/    A54B : CD 2D A4            	call	searchn
    1872/    A54E : C3 40 A5            	jmp	indic0
    1873/    A551 :                     
    1874/    A551 :                     open:
    1875/    A551 :                     	;search for the directory entry, copy to fcb
    1876/    A551 : 0E 0F               	mvi	c,namlen
    1877/    A553 : CD 18 A4            	call	search
    1878/    A556 : CD F5 A2            	call	end_of_dir	;return with lret=255 if end
    1879/    A559 : C8                  	rz
    1880/    A55A :                     	;not end of directory, copy fcb information
    1881/    A55A :                     open_copy:
    1882/    A55A :                     	;(referenced below to copy fcb info)
    1883/    A55A : CD A6 A1            	call	getexta		;save extent#
    1884/    A55D : 7E                  	mov	a,m
    1885/    A55E : F5                  	push	psw
    1886/    A55F : E5                  	push	h
    1887/    A560 : CD 5E A2            	call	getdptra	;DE = .buff(dptr)
    1888/    A563 : EB                  	xchg
    1889/    A564 : 2A 43 A0            	lhld	info		;HL=.fcb(0)
    1890/    A567 : 0E 20               	mvi	c,nxtrec	;length of move operation
    1891/    A569 : D5                  	push	d		;save .buff(dptr)
    1892/    A56A : CD 4F A0            	call	move		;from .buff(dptr) to .fcb(0)
    1893/    A56D :                     	;note that entire fcb is copied, including indicators
    1894/    A56D : CD 78 A2            	call	setfwf		;sets file write flag
    1895/    A570 : D1                  	pop	d		;HL=.buff(dptr+extnum)
    1896/    A571 : 21 0C 00            	lxi	h,extnum
    1897/    A574 : 19                  	dad	d
    1898/    A575 : 4E                  	mov	c,m		;C = directory extent number
    1899/    A576 : 21 0F 00            	lxi	h,reccnt	;HL=.buff(dptr+reccnt)
    1900/    A579 : 19                  	dad	d
    1901/    A57A : 46                  	mov	b,m		;B holds directory record count
    1902/    A57B : E1                  	pop	h		;restore extent number
    1903/    A57C : F1                  	pop	psw
    1904/    A57D : 77                  	mov	m,a
    1905/    A57E :                     	;HL = .user extent#, B = dir rec cnt, C = dir extent#
    1906/    A57E :                     	;if user ext < dir ext then user := 128 records
    1907/    A57E :                     	;if user ext = dir ext then user := dir records
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 33 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    1908/    A57E :                     	;if user ext > dir ext then user := 0 records
    1909/    A57E : 79                  	mov	a,c		;ready dir reccnt
    1910/    A57F : BE                  	cmp	m
    1911/    A580 : 78                  	mov	a,b
    1912/    A581 : CA 8B A5            	jz	open_rcnt	;if same, user gets dir reccnt
    1913/    A584 : 3E 00               	mvi	a,0		;user is larger
    1914/    A586 : DA 8B A5            	jc	open_rcnt
    1915/    A589 : 3E 80               	mvi	a,128		;directory is larger
    1916/    A58B :                     open_rcnt: ;A has record count to fill
    1917/    A58B : 2A 43 A0            	lhld	info
    1918/    A58E : 11 0F 00            	lxi	d,reccnt
    1919/    A591 : 19                  	dad	d
    1920/    A592 : 77                  	mov	m,a
    1921/    A593 : C9                  	ret
    1922/    A594 :                     
    1923/    A594 :                     mergezero:
    1924/    A594 :                     	;HL = .fcb1(i), DE = .fcb2(i),
    1925/    A594 :                     	;if fcb1(i) = 0 then fcb1(i) := fcb2(i)
    1926/    A594 : 7E                  	mov	a,m		;return if = 0000
    1927/    A595 : 23                  	inx	h
    1928/    A596 : B6                  	ora	m
    1929/    A597 : 2B                  	dcx	h
    1930/    A598 : C0                  	rnz
    1931/    A599 : 1A                  	ldax	d		;low byte copied
    1932/    A59A : 77                  	mov	m,a
    1933/    A59B : 13                  	inx	d
    1934/    A59C : 23                  	inx	h
    1935/    A59D : 1A                  	ldax	d		;back to input form
    1936/    A59E : 77                  	mov	m,a
    1937/    A59F : 1B                  	dcx	d
    1938/    A5A0 : 2B                  	dcx	h
    1939/    A5A1 : C9                  	ret
    1940/    A5A2 :                     
    1941/    A5A2 :                     close:
    1942/    A5A2 :                     	;locate the directory element and re-write it
    1943/    A5A2 : AF                  	xra	a
    1944/    A5A3 : 32 45 A0            	sta	lret
    1945/    A5A6 : 32 EA AA            	sta	dcnt
    1946/    A5A9 : 32 EB AA            	sta	dcnt+1
    1947/    A5AC : CD 1E A2            	call	nowrite		;skip close if r/o disk
    1948/    A5AF : C0                  	rnz
    1949/    A5B0 :                     	;check file write flag - 0 indicates written
    1950/    A5B0 : CD 69 A2            	call	getmodnum	;fcb(modnum) in A
    1951/    A5B3 : E6 80               	ani	fwfmsk		;return if bit remains set
    1952/    A5B5 : C0                  	rnz
    1953/    A5B6 : 0E 0F               	mvi	c,namlen	;locate file
    1954/    A5B8 : CD 18 A4            	call	search
    1955/    A5BB : CD F5 A2            	call	end_of_dir	;return if not found
    1956/    A5BE : C8                  	rz
    1957/    A5BF :                     	;merge the disk map at info with that at buff(dptr)
    1958/    A5BF : 01 10 00            	lxi	b,dskmap
    1959/    A5C2 : CD 5E A2            	call	getdptra
    1960/    A5C5 : 09                  	dad	b		;DE is .buff(dptr+16)
    1961/    A5C6 : EB                  	xchg
    1962/    A5C7 : 2A 43 A0            	lhld	info		;DE=.buff(dptr+16), HL=.fcb(16)
    1963/    A5CA : 09                  	dad	b
    1964/    A5CB : 0E 10               	mvi	c,(fcblen-dskmap)	;length of single byte dm
    1965/    A5CD :                     merge0:
    1966/    A5CD : 3A DD AA            	lda	single		;skip to double
    1967/    A5D0 : B7                  	ora	a
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 34 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    1968/    A5D1 : CA E8 A5            	jz	merged
    1969/    A5D4 :                     	;this is a single byte map
    1970/    A5D4 :                     	;if fcb(i) = 0 then fcb(i) = buff(i)
    1971/    A5D4 :                     	;if buff(i) = 0 then buff(i) = fcb(i)
    1972/    A5D4 :                     	;if fcb(i) <> buff(i) then error
    1973/    A5D4 : 7E                  	mov	a,m
    1974/    A5D5 : B7                  	ora	a
    1975/    A5D6 : 1A                  	ldax	d
    1976/    A5D7 : C2 DB A5            	jnz	fcbnzero
    1977/    A5DA :                     	;fcb(i) = 0
    1978/    A5DA : 77                  	mov	m,a		;fcb(i) = buff(i)
    1979/    A5DB :                     fcbnzero:
    1980/    A5DB : B7                  	ora	a
    1981/    A5DC : C2 E1 A5            	jnz	buffnzero
    1982/    A5DF :                     	;buff(i) = 0
    1983/    A5DF : 7E                  	mov	a,m		;buff(i)=fcb(i)
    1984/    A5E0 : 12                  	stax	d
    1985/    A5E1 :                     buffnzero:
    1986/    A5E1 : BE                  	cmp	m		;fcb(i) = buff(i)?
    1987/    A5E2 : C2 1F A6            	jnz	mergerr
    1988/    A5E5 : C3 FD A5            	jmp	dmset		;if merge ok
    1989/    A5E8 :                     merged:
    1990/    A5E8 :                     	;this is a double byte merge operation
    1991/    A5E8 : CD 94 A5            	call	mergezero	;buff = fcb if buff 0000
    1992/    A5EB : EB                  	xchg			;fcb = buff if fcb 0000
    1993/    A5EC : CD 94 A5            	call	mergezero
    1994/    A5EF : EB                  	xchg
    1995/    A5F0 :                     	;they should be identical at this point
    1996/    A5F0 : 1A                  	ldax	d		;low same?
    1997/    A5F1 : BE                  	cmp	m
    1998/    A5F2 : C2 1F A6            	jnz	mergerr
    1999/    A5F5 : 13                  	inx	d		;to high byte
    2000/    A5F6 : 23                  	inx	h
    2001/    A5F7 : 1A                  	ldax	d		;high same?
    2002/    A5F8 : BE                  	cmp	m
    2003/    A5F9 : C2 1F A6            	jnz	mergerr
    2004/    A5FC :                     	;merge operation ok for this pair
    2005/    A5FC : 0D                  	dcr	c		;extra count for double byte
    2006/    A5FD :                     dmset:
    2007/    A5FD : 13                  	inx	d		;to next byte position
    2008/    A5FE : 23                  	inx	h
    2009/    A5FF : 0D                  	dcr	c		;for more
    2010/    A600 : C2 CD A5            	jnz	merge0
    2011/    A603 :                     	;end of disk map merge, check record count
    2012/    A603 :                     	;DE = .buff(dptr)+32, HL = .fcb(32)
    2013/    A603 : 01 EC FF            	lxi	b,-(fcblen-extnum)
    2014/    A606 : 09                  	dad	b
    2015/    A607 : EB                  	xchg
    2016/    A608 : 09                  	dad	b
    2017/    A609 :                     	;DE = .fcb(extnum), HL = .buff(dptr+extnum)
    2018/    A609 : 1A                  	ldax	d		;current user extent number
    2019/    A60A :                     	;if fcb(ext) >= buff(fcb) then
    2020/    A60A :                     	;buff(ext) := fcb(ext), buff(rec) := fcb(rec)
    2021/    A60A : BE                  	cmp	m
    2022/    A60B : DA 17 A6            	jc	endmerge
    2023/    A60E :                     	;fcb extent number >= dir extent number
    2024/    A60E : 77                  	mov	m,a		;buff(ext) = fcb(ext)
    2025/    A60F :                     	;update directory record count field
    2026/    A60F : 01 03 00            	lxi	b,(reccnt-extnum)
    2027/    A612 : 09                  	dad	b
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 35 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    2028/    A613 : EB                  	xchg
    2029/    A614 : 09                  	dad	b
    2030/    A615 :                     	;DE=.buff(reccnt), HL=.fcb(reccnt)
    2031/    A615 : 7E                  	mov	a,m		;buff(reccnt)=fcb(reccnt)
    2032/    A616 : 12                  	stax	d
    2033/    A617 :                     endmerge:
    2034/    A617 : 3E FF               	mvi	a,_true		;mark as copied
    2035/    A619 : 32 D2 AA            	sta	fcb_copied
    2036/    A61C : C3 10 A5            	jmp	seek_copy	;ok to "wrdir" here - 1.4 compat
    2037/    A61F :                     	;		ret
    2038/    A61F :                     mergerr:
    2039/    A61F :                     	;elements did not merge correctly
    2040/    A61F : 21 45 A0            	lxi	h,lret		;=255 non zero flag set
    2041/    A622 : 35                  	dcr	m
    2042/    A623 : C9                  	ret
    2043/    A624 :                     
    2044/    A624 :                     make:
    2045/    A624 :                     	;create a new file by creating a directory entry
    2046/    A624 :                     	;then opening the file
    2047/    A624 : CD 54 A2            	call	check_write	;may be write protected
    2048/    A627 : 2A 43 A0            	lhld	info		;save fcb address, look for e5
    2049/    A62A : E5                  	push	h
    2050/    A62B : 21 AC AA            	lxi	h,efcb		;info = .empty
    2051/    A62E : 22 43 A0            	shld	info
    2052/    A631 : 0E 01               	mvi	c,1		;length 1 match on empty entry
    2053/    A633 : CD 18 A4            	call	search
    2054/    A636 : CD F5 A2            	call	end_of_dir	;zero flag set if no space
    2055/    A639 : E1                  	pop	h		;recall info address
    2056/    A63A : 22 43 A0            	shld	info		;in case we return here
    2057/    A63D : C8                  	rz			;return with error condition 255 if not found
    2058/    A63E : EB                  	xchg			;DE = info address
    2059/    A63F :                     	;clear the remainder of the fcb
    2060/    A63F : 21 0F 00            	lxi	h,namlen	;HL=.fcb(namlen)
    2061/    A642 : 19                  	dad	d
    2062/    A643 : 0E 11               	mvi	c,fcblen-namlen	;number of bytes to fill
    2063/    A645 : AF                  	xra	a		;clear accumulator to 00 for fill
    2064/    A646 :                     make0:
    2065/    A646 : 77                  	mov	m,a
    2066/    A647 : 23                  	inx	h
    2067/    A648 : 0D                  	dcr	c
    2068/    A649 : C2 46 A6            	jnz	make0
    2069/    A64C : 21 0D 00            	lxi	h,ubytes	;HL = .fcb(ubytes)
    2070/    A64F : 19                  	dad	d
    2071/    A650 : 77                  	mov	m,a		;fcb(ubytes) = 0
    2072/    A651 : CD 8C A2            	call	setcdr		;may have extended the directory
    2073/    A654 :                     	;now copy entry to the directory
    2074/    A654 : CD FD A4            	call	copy_fcb
    2075/    A657 :                     	;and set the file write flag to "1"
    2076/    A657 : C3 78 A2            	jmp	setfwf
    2077/    A65A :                     	;ret
    2078/    A65A :                     
    2079/    A65A :                     open_reel:
    2080/    A65A :                     	;close the current extent, and open the next one
    2081/    A65A :                     	;if possible.  RMF is true if in read mode
    2082/    A65A : AF                  	xra	a		;set true if actually copied
    2083/    A65B : 32 D2 AA            	sta	fcb_copied
    2084/    A65E : CD A2 A5            	call	close		;close current extent
    2085/    A661 :                     	;lret remains at enddir if we cannot open the next ext
    2086/    A661 : CD F5 A2            	call	end_of_dir	;return if end
    2087/    A664 : C8                  	rz
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 36 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    2088/    A665 :                     	;increment extent number
    2089/    A665 : 2A 43 A0            	lhld	info		;HL=.fcb(extnum)
    2090/    A668 : 01 0C 00            	lxi	b,extnum
    2091/    A66B : 09                  	dad	b
    2092/    A66C : 7E                  	mov	a,m		;fcb(extnum)=++1
    2093/    A66D : 3C                  	inr	a
    2094/    A66E : E6 1F               	ani	maxext
    2095/    A670 : 77                  	mov	m,a
    2096/    A671 : CA 83 A6            	jz	open_mod	;move to next module if zero
    2097/    A674 :                     	;may be in the same extent group
    2098/    A674 : 47                  	mov	b,a
    2099/    A675 : 3A C5 AA            	lda	extmsk
    2100/    A678 : A0                  	ana	b
    2101/    A679 :                     	;if result is zero, then not in the same group
    2102/    A679 : 21 D2 AA            	lxi	h,fcb_copied	;true if the fcb was copied to directory
    2103/    A67C : A6                  	ana	m		;produces a 00 in accumulator if not written
    2104/    A67D : CA 8E A6            	jz	open_reel0	;go to next physical extent
    2105/    A680 :                     	;result is non zero, so we must be in same logical ext
    2106/    A680 : C3 AC A6            	jmp	open_reel1	;to copy fcb information
    2107/    A683 :                     open_mod:
    2108/    A683 :                     	;extent number overflow, go to next module
    2109/    A683 : 01 02 00            	lxi	b,(modnum-extnum)	;HL=.fcb(modnum)
    2110/    A686 : 09                  	dad	b
    2111/    A687 : 34                  	inr	m		;fcb(modnum)=++1
    2112/    A688 :                     	;module number incremented, check for overflow
    2113/    A688 : 7E                  	mov	a,m		;mask high order bits
    2114/    A689 : E6 0F               	ani	maxmod
    2115/    A68B : CA B6 A6            	jz	open_r_err	;cannot overflow to zero
    2116/    A68E :                     	;otherwise, ok to continue with new module
    2117/    A68E :                     open_reel0:
    2118/    A68E : 0E 0F               	mvi	c,namlen	;next extent found?
    2119/    A690 : CD 18 A4            	call	search
    2120/    A693 : CD F5 A2            	call	end_of_dir
    2121/    A696 : C2 AC A6            	jnz	open_reel1
    2122/    A699 :                     	;end of file encountered
    2123/    A699 : 3A D3 AA            	lda	rmf		;0ffh becomes 00 if read
    2124/    A69C : 3C                  	inr	a
    2125/    A69D : CA B6 A6            	jz	open_r_err	;sets lret = 1
    2126/    A6A0 :                     	;try to extend the current file
    2127/    A6A0 : CD 24 A6            	call	make
    2128/    A6A3 :                     	;cannot be end of directory
    2129/    A6A3 : CD F5 A2            	call	end_of_dir
    2130/    A6A6 : CA B6 A6            	jz	open_r_err	;with lret = 1
    2131/    A6A9 : C3 AF A6            	jmp	open_reel2
    2132/    A6AC :                     open_reel1:
    2133/    A6AC :                     	;not end of file, open
    2134/    A6AC : CD 5A A5            	call	open_copy
    2135/    A6AF :                     open_reel2:
    2136/    A6AF : CD BB A1            	call	getfcb		;set parameters
    2137/    A6B2 : AF                  	xra	a		;lret = 0
    2138/    A6B3 : C3 01 A0            	jmp	sta_ret
    2139/    A6B6 :                     ;	ret ;with lret = 0
    2140/    A6B6 :                     open_r_err:
    2141/    A6B6 :                     	;cannot move to next extent of this file
    2142/    A6B6 : CD 05 A0            	call	setlret1	;lret = 1
    2143/    A6B9 : C3 78 A2            	jmp	setfwf		;ensure that it will not be closed
    2144/    A6BC :                     	;ret
    2145/    A6BC :                     
    2146/    A6BC :                     seqdiskread:
    2147/    A6BC :                     	;sequential disk read operation
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 37 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    2148/    A6BC : 3E 01               	mvi	a,1
    2149/    A6BE : 32 D5 AA            	sta	seqio
    2150/    A6C1 :                     	;drop through to diskread
    2151/    A6C1 :                     
    2152/    A6C1 :                     diskread:	;(may enter from seqdiskread)
    2153/    A6C1 : 3E FF               	mvi	a,_true		;read mode flag = true (open_reel)
    2154/    A6C3 : 32 D3 AA            	sta	rmf
    2155/    A6C6 :                     	;read the next record from the current fcb
    2156/    A6C6 : CD BB A1            	call	getfcb		;sets parameters for the read
    2157/    A6C9 : 3A E3 AA            	lda	vrecord		;vrecord-rcount
    2158/    A6CC : 21 E1 AA            	lxi	h,rcount
    2159/    A6CF : BE                  	cmp	m
    2160/    A6D0 :                     	;skip if rcount > vrecord
    2161/    A6D0 : DA E6 A6            	jc	recordok
    2162/    A6D3 :                     	;not enough records in the extent
    2163/    A6D3 :                     	;record count must be 128 to continue
    2164/    A6D3 : FE 80               	cpi	128		;vrecord = 128?
    2165/    A6D5 : C2 FB A6            	jnz	diskeof		;skip if vrecord<>128
    2166/    A6D8 : CD 5A A6            	call	open_reel	;go to next extent if so
    2167/    A6DB : AF                  	xra	a		;vrecord=00
    2168/    A6DC : 32 E3 AA            	sta	vrecord
    2169/    A6DF :                     	;now check for open ok
    2170/    A6DF : 3A 45 A0            	lda	lret		;stop at eof
    2171/    A6E2 : B7                  	ora	a
    2172/    A6E3 : C2 FB A6            	jnz	diskeof
    2173/    A6E6 :                     recordok:
    2174/    A6E6 :                     	;arrive with fcb addressing a record to read
    2175/    A6E6 : CD 77 A1            	call	index
    2176/    A6E9 :                     	;error 2 if reading unwritten data
    2177/    A6E9 :                     	;(returns 1 to be compatible with 1.4)
    2178/    A6E9 : CD 84 A1            	call	allocated	;arecord=0000?
    2179/    A6EC : CA FB A6            	jz	diskeof
    2180/    A6EF :                     	;record has been allocated, read it
    2181/    A6EF : CD 8A A1            	call	atran		;arecord now a disk address
    2182/    A6F2 : CD D1 A0            	call	seek		;to proper track,sector
    2183/    A6F5 : CD B2 A0            	call	rdbuff		;to dma address
    2184/    A6F8 : C3 D2 A1            	jmp	setfcb		;replace parameter	
    2185/    A6FB :                     ;		ret
    2186/    A6FB :                     diskeof:
    2187/    A6FB : C3 05 A0            	jmp	setlret1	;lret = 1
    2188/    A6FE :                     	;ret
    2189/    A6FE :                     
    2190/    A6FE :                     seqdiskwrite:
    2191/    A6FE :                     	;sequential disk write
    2192/    A6FE : 3E 01               	mvi	a,1
    2193/    A700 : 32 D5 AA            	sta	seqio
    2194/    A703 :                     	;drop through to diskwrite
    2195/    A703 :                     
    2196/    A703 :                     diskwrite:	;(may enter here from seqdiskwrite above)
    2197/    A703 : 3E 00               	mvi	a,_false	;read mode flag
    2198/    A705 : 32 D3 AA            	sta	rmf
    2199/    A708 :                     	;write record to currently selected file
    2200/    A708 : CD 54 A2            	call	check_write	;in case write protected
    2201/    A70B : 2A 43 A0            	lhld	info		;HL = .fcb(0)
    2202/    A70E : CD 47 A2            	call	check_rofile	;may be a read-only file
    2203/    A711 : CD BB A1            	call	getfcb		;to set local parameters
    2204/    A714 : 3A E3 AA            	lda	vrecord		;vrecord-128
    2205/    A717 : FE 80               	cpi	lstrec+1
    2206/    A719 :                     	;skip if vrecord > lstrec
    2207/    A719 :                     	;vrecord = 128, cannot open next extent
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 38 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    2208/    A719 : D2 05 A0            	jnc	setlret1	;lret=1
    2209/    A71C :                     diskwr0:
    2210/    A71C :                     	;can write the next record, so continue
    2211/    A71C : CD 77 A1            	call	index
    2212/    A71F : CD 84 A1            	call	allocated
    2213/    A722 : 0E 00               	mvi	c,0		;marked as normal write operation for wrbuff
    2214/    A724 : C2 6E A7            	jnz	diskwr1
    2215/    A727 :                     	;not allocated
    2216/    A727 :                     	;the argument to getblock is the starting
    2217/    A727 :                     	;position for the disk search, and should be
    2218/    A727 :                     	;the last allocated block for this file, or
    2219/    A727 :                     	;the value 0 if no space has been allocated
    2220/    A727 : CD 3E A1            	call	dm_position
    2221/    A72A : 32 D7 AA            	sta	dminx		;save for later
    2222/    A72D : 01 00 00            	lxi	b,0000h		;may use block zero
    2223/    A730 : B7                  	ora	a		;skip if no previous block
    2224/    A731 : CA 3B A7            	jz	nopblock
    2225/    A734 :                     	;previous block exists at A
    2226/    A734 : 4F                  	mov	c,a		;previous block # in BC
    2227/    A735 : 0B                  	dcx	b
    2228/    A736 : CD 5E A1            	call	getdm		;previous block # to HL
    2229/    A739 : 44                  	mov	b,h		;BC=prev block#
    2230/    A73A : 4D                  	mov	c,l
    2231/    A73B :                     nopblock:
    2232/    A73B :                     	;BC = 0000, or previous block #
    2233/    A73B : CD BE A4            	call	get_block	;block # to HL
    2234/    A73E :                     	;arrive here with block# or zero
    2235/    A73E : 7D                  	mov	a,l
    2236/    A73F : B4                  	ora	h
    2237/    A740 : C2 48 A7            	jnz	blockok
    2238/    A743 :                     	;cannot find a block to allocate
    2239/    A743 : 3E 02               	mvi	a,2	 	;lret=2
    2240/    A745 : C3 01 A0            	jmp	sta_ret
    2241/    A748 :                     blockok:
    2242/    A748 :                     	;allocated block number is in HL
    2243/    A748 : 22 E5 AA            	shld	arecord
    2244/    A74B : EB                  	xchg			;block number to DE
    2245/    A74C : 2A 43 A0            	lhld	info		;HL=.fcb(dskmap)
    2246/    A74F : 01 10 00            	lxi	b,dskmap
    2247/    A752 : 09                  	dad	b
    2248/    A753 : 3A DD AA            	lda	single		;set flags for single byte dm
    2249/    A756 : B7                  	ora	a
    2250/    A757 : 3A D7 AA            	lda	dminx		;recall dm index
    2251/    A75A : CA 64 A7            	jz	allocwd		;skip if allocating word
    2252/    A75D :                     	;allocating a byte value
    2253/    A75D : CD 64 A2            	call	addh		;single byte alloc
    2254/    A760 : 73                  	mov	m,e
    2255/    A761 : C3 6C A7            	jmp	diskwru		;to continue
    2256/    A764 :                     allocwd:
    2257/    A764 :                     	;allocate a word value
    2258/    A764 : 4F                  	mov	c,a		;double(dminx)
    2259/    A765 : 06 00               	mvi	b,0
    2260/    A767 : 09                  	dad	b		;HL=.fcb(dminx*2)
    2261/    A768 : 09                  	dad	b
    2262/    A769 : 73                  	mov	m,e		;double wd
    2263/    A76A : 23                  	inx	h
    2264/    A76B : 72                  	mov	m,d
    2265/    A76C :                     diskwru:
    2266/    A76C :                     	;disk write to previously unallocated block
    2267/    A76C : 0E 02               	mvi	c,2		;marked as unallocated write
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 39 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    2268/    A76E :                     diskwr1:
    2269/    A76E :                     	;continue the write operation of no allocation error
    2270/    A76E :                     	;C = 0 if normal write, 2 if to prev unalloc block
    2271/    A76E : 3A 45 A0            	lda	lret		;stop if non zero returned value
    2272/    A771 : B7                  	ora	a
    2273/    A772 : C0                  	rnz
    2274/    A773 : C5                  	push	b		;save write flag
    2275/    A774 : CD 8A A1            	call	atran		;arecord set
    2276/    A777 : 3A D5 AA            	lda	seqio
    2277/    A77A : 3D                  	dcr	a
    2278/    A77B : 3D                  	dcr	a
    2279/    A77C : C2 BB A7            	jnz	diskwr11
    2280/    A77F : C1                  	pop	b
    2281/    A780 : C5                  	push	b
    2282/    A781 : 79                  	mov	a,c
    2283/    A782 : 3D                  	dcr	a
    2284/    A783 : 3D                  	dcr	a
    2285/    A784 : C2 BB A7            	jnz	diskwr11	;old allocation  
    2286/    A787 : E5                  	push	h		;arecord in hl ret from atran
    2287/    A788 : 2A B9 AA            	lhld	buffa		;zero buffa & fill
    2288/    A78B : 57                  	mov	d,a
    2289/    A78C : 77                  fill0:  mov	m,a
    2290/    A78D : 23                  	inx	h
    2291/    A78E : 14                  	inr	d
    2292/    A78F : F2 8C A7            	jp	fill0
    2293/    A792 : CD E0 A2            	call	setdir
    2294/    A795 : 2A E7 AA            	lhld	arecord1
    2295/    A798 : 0E 02               	mvi	c,2
    2296/    A79A : 22 E5 AA            fill1:  shld	arecord
    2297/    A79D : C5                  	push	b
    2298/    A79E : CD D1 A0            	call	seek
    2299/    A7A1 : C1                  	pop	b
    2300/    A7A2 : CD B8 A0            	call	wrbuff		;write fill record
    2301/    A7A5 : 2A E5 AA            	lhld	arecord		;restore last record     
    2302/    A7A8 : 0E 00               	mvi	c,0		;change  allocate flag   
    2303/    A7AA : 3A C4 AA            	lda	blkmsk
    2304/    A7AD : 47                  	mov	b,a
    2305/    A7AE : A5                  	ana	l
    2306/    A7AF : B8                  	cmp	b
    2307/    A7B0 : 23                  	inx	h
    2308/    A7B1 : C2 9A A7            	jnz	fill1		;cont until cluster is zeroed
    2309/    A7B4 : E1                  	pop	h
    2310/    A7B5 : 22 E5 AA            	shld	arecord
    2311/    A7B8 : CD DA A2            	call	setdata
    2312/    A7BB :                     diskwr11:
    2313/    A7BB : CD D1 A0            	call seek ;to proper file position
    2314/    A7BE : C1                  	pop	b		;restore/save write flag (C=2 if new block)
    2315/    A7BF : C5                  	push	b
    2316/    A7C0 : CD B8 A0            	call	wrbuff		;written to disk
    2317/    A7C3 : C1                  	pop	b		;C = 2 if a new block was allocated, 0 if not
    2318/    A7C4 :                     	;increment record count if rcount<=vrecord
    2319/    A7C4 : 3A E3 AA            	lda	vrecord		;vrecord-rcount
    2320/    A7C7 : 21 E1 AA            	lxi	h,rcount
    2321/    A7CA : BE                  	cmp	m
    2322/    A7CB : DA D2 A7            	jc	diskwr2
    2323/    A7CE :                     	;rcount <= vrecord
    2324/    A7CE : 77                  	mov	m,a		;rcount = vrecord+1
    2325/    A7CF : 34                  	inr	m
    2326/    A7D0 : 0E 02               	mvi	c,2		;mark as record count incremented
    2327/    A7D2 :                     diskwr2:
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 40 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    2328/    A7D2 : =>TRUE              	if	patch1
    2329/    A7D2 :                     	; CP/M V2.2 patch 1 for use of optional blocking/deblocking
    2330/    A7D2 : 00                  	nop
    2331/    A7D3 : 00                  	nop
    2332/    A7D4 : 21 00 00            	lxi	h,0
    2333/    A7D7 : =>FALSE             	else
    2334/    A7D7 :                     	; original code
    2335/    A7D7 :                     	;A has vrecord, C=2 if new block or new record#
    2336/    A7D7 :                     	dcr	c
    2337/    A7D7 :                     	dcr	c
    2338/    A7D7 :                     	jnz	noupdate
    2339/    A7D7 : [2328]              	endif
    2340/    A7D7 : F5                  	push	psw		;save vrecord value
    2341/    A7D8 : CD 69 A2            	call	getmodnum	;HL=.fcb(modnum), A=fcb(modnum)
    2342/    A7DB :                     	;reset the file write flag to mark as written fcb
    2343/    A7DB : E6 7F               	ani	(~fwfmsk)&0ffh	;bit reset
    2344/    A7DD : 77                  	mov	m,a		;fcb(modnum) = fcb(modnum) and 7fh
    2345/    A7DE : F1                  	pop	psw		;restore vrecord
    2346/    A7DF :                     noupdate:
    2347/    A7DF :                     	;check for end of extent, if found attempt to open
    2348/    A7DF :                     	;next extent in preparation for next write
    2349/    A7DF : FE 7F               	cpi	lstrec		;vrecord=lstrec?
    2350/    A7E1 : C2 00 A8            	jnz	diskwr3		;skip if not
    2351/    A7E4 :                     	;may be random access write, if so we are done
    2352/    A7E4 :                     	;change next     
    2353/    A7E4 : 3A D5 AA            	lda	seqio		;skip next extent open op
    2354/    A7E7 : FE 01               	cpi	1
    2355/    A7E9 : C2 00 A8            	jnz	diskwr3
    2356/    A7EC :                     	;update current fcb before going to next extent
    2357/    A7EC : CD D2 A1            	call	setfcb
    2358/    A7EF : CD 5A A6            	call	open_reel	;rmf=false
    2359/    A7F2 :                     	;vrecord remains at lstrec causing eof if
    2360/    A7F2 :                     	;no more directory space is available
    2361/    A7F2 : 21 45 A0            	lxi	h,lret
    2362/    A7F5 : 7E                  	mov	a,m
    2363/    A7F6 : B7                  	ora	a
    2364/    A7F7 : C2 FE A7            	jnz	nospace
    2365/    A7FA :                     	;space available, set vrecord=255
    2366/    A7FA : 3D                  	dcr	a		;goes to 00 next time
    2367/    A7FB : 32 E3 AA            	sta	vrecord
    2368/    A7FE :                     nospace:
    2369/    A7FE : 36 00               	mvi	m,0		;lret = 00 for returned value
    2370/    A800 :                     diskwr3:
    2371/    A800 : C3 D2 A1            	jmp	setfcb ;replace parameters
    2372/    A803 :                     	;ret
    2373/    A803 :                     
    2374/    A803 :                     rseek:
    2375/    A803 :                     	;random access seek operation, C=0ffh if read mode
    2376/    A803 :                     	;fcb is assumed to address an active file control block
    2377/    A803 :                     	;(modnum has been set to 1100_0000b if previous bad seek)
    2378/    A803 : AF                  	xra	a		;marked as random access operation
    2379/    A804 : 32 D5 AA            	sta	seqio
    2380/    A807 :                     rseek1:
    2381/    A807 : C5                  	push	b		;save r/w flag
    2382/    A808 : 2A 43 A0            	lhld	info		;DE will hold base of fcb
    2383/    A80B : EB                  	xchg
    2384/    A80C : 21 21 00            	lxi	h,ranrec	;HL=.fcb(ranrec)
    2385/    A80F : 19                  	dad	d
    2386/    A810 : 7E                  	mov	a,m		;record number
    2387/    A811 : E6 7F               	ani	7fh
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 41 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    2388/    A813 : F5                  	push	psw
    2389/    A814 : 7E                  	mov	a,m		;cy=lsb of extent#
    2390/    A815 : 17                  	ral
    2391/    A816 : 23                  	inx	h		;A=ext#
    2392/    A817 : 7E                  	mov	a,m
    2393/    A818 : 17                  	ral
    2394/    A819 : E6 1F               	ani	11111b
    2395/    A81B : 4F                  	mov	c,a		;C holds extent number, record stacked
    2396/    A81C : 7E                  	mov	a,m		;mod#
    2397/    A81D : 1F                  	rar
    2398/    A81E : 1F                  	rar
    2399/    A81F : 1F                  	rar
    2400/    A820 : 1F                  	rar
    2401/    A821 : E6 0F               	ani	1111b
    2402/    A823 : 47                  	mov	b,a		;B holds module#, C holds ext#
    2403/    A824 : F1                  	pop	psw		;recall sought record #
    2404/    A825 :                     	;check to insure that high byte of ran rec = 00
    2405/    A825 : 23                  	inx	h		;l=high byte (must be 00)
    2406/    A826 : 6E                  	mov	l,m
    2407/    A827 : 2C                  	inr	l		;zero flag, l=6
    2408/    A828 : 2D                  	dcr	l
    2409/    A829 : 2E 06               	mvi	l,6
    2410/    A82B :                     	;produce error 6, seek past physical eod
    2411/    A82B : C2 8B A8            	jnz	seekerr
    2412/    A82E :                     	;otherwise, high byte = 0, A = sought record
    2413/    A82E : 21 20 00            	lxi	h,nxtrec	;HL = .fcb(nxtrec)
    2414/    A831 : 19                  	dad	d
    2415/    A832 : 77                  	mov	m,a		;sought rec# stored away
    2416/    A833 :                     	;arrive here with B=mod#, C=ext#, DE=.fcb, rec stored
    2417/    A833 :                     	;the r/w flag is still stacked.  compare fcb values
    2418/    A833 : 21 0C 00            	lxi	h,extnum	;A=seek ext#
    2419/    A836 : 19                  	dad	d
    2420/    A837 : 79                  	mov	a,c
    2421/    A838 : 96                  	sub	m		;tests for = extents
    2422/    A839 : C2 47 A8            	jnz	ranclose
    2423/    A83C :                     	;extents match, check mod#
    2424/    A83C : 21 0E 00            	lxi	h,modnum	;B=seek mod#
    2425/    A83F : 19                  	dad	d
    2426/    A840 : 78                  	mov	a,b
    2427/    A841 :                     	;could be overflow at eof, producing module#
    2428/    A841 :                     	;of 90H or 10H, so compare all but fwf
    2429/    A841 : 96                  	sub	m		;same?
    2430/    A842 : E6 7F               	ani	7fh
    2431/    A844 : CA 7F A8            	jz	seekok
    2432/    A847 :                     ranclose:
    2433/    A847 : C5                  	push	b		;save seek mod#,ext#, .fcb
    2434/    A848 : D5                  	push	d
    2435/    A849 : CD A2 A5            	call	close		;current extent closed
    2436/    A84C : D1                  	pop	d		;recall parameters and fill
    2437/    A84D : C1                  	pop	b
    2438/    A84E : 2E 03               	mvi	l,3		;cannot close error #3
    2439/    A850 : 3A 45 A0            	lda	lret
    2440/    A853 : 3C                  	inr	a
    2441/    A854 : CA 84 A8            	jz	badseek
    2442/    A857 : 21 0C 00            	lxi	h,extnum	;fcb(extnum)=ext#
    2443/    A85A : 19                  	dad	d
    2444/    A85B : 71                  	mov	m,c
    2445/    A85C : 21 0E 00            	lxi	h,modnum	;fcb(modnum)=mod#
    2446/    A85F : 19                  	dad	d
    2447/    A860 : 70                  	mov	m,b
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 42 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    2448/    A861 : CD 51 A5            	call	open		;is the file present?
    2449/    A864 : 3A 45 A0            	lda	lret		;open successful?
    2450/    A867 : 3C                  	inr	a
    2451/    A868 : C2 7F A8            	jnz	seekok
    2452/    A86B :                     	;cannot open the file, read mode?
    2453/    A86B : C1                  	pop	b		;r/w flag to c (=0ffh if read)
    2454/    A86C : C5                  	push	b		;everyone expects this item stacked
    2455/    A86D : 2E 04               	mvi	l,4		;seek to unwritten extent #4
    2456/    A86F : 0C                  	inr	c		;becomes 00 if read operation
    2457/    A870 : CA 84 A8            	jz	badseek		;skip to error if read operation
    2458/    A873 :                     	;write operation, make new extent
    2459/    A873 : CD 24 A6            	call	make
    2460/    A876 : 2E 05               	mvi	l,5		 ;cannot create new extent #5
    2461/    A878 : 3A 45 A0            	lda	lret		;no dir space
    2462/    A87B : 3C                  	inr	a
    2463/    A87C : CA 84 A8            	jz	badseek
    2464/    A87F :                     	;file make operation successful
    2465/    A87F :                     seekok:
    2466/    A87F : C1                  	pop	b		;discard r/w flag
    2467/    A880 : AF                  	xra	a		;with zero set
    2468/    A881 : C3 01 A0            	jmp	sta_ret
    2469/    A884 :                     badseek:
    2470/    A884 :                     	;fcb no longer contains a valid fcb, mark
    2471/    A884 :                     	;with 1100_000b in modnum field so that it
    2472/    A884 :                     	;appears as overflow with file write flag set
    2473/    A884 : E5                  	push	h		;save error flag
    2474/    A885 : CD 69 A2            	call	getmodnum	;HL = .modnum
    2475/    A888 : 36 C0               	mvi	m,11000000b
    2476/    A88A : E1                  	pop	h		;and drop through
    2477/    A88B :                     seekerr:
    2478/    A88B : C1                  	pop	b		;discard r/w flag
    2479/    A88C : 7D                  	mov	a,l		;lret=#, nonzero
    2480/    A88D : 32 45 A0            	sta	lret
    2481/    A890 :                     	;setfwf returns non-zero accumulator for err
    2482/    A890 : C3 78 A2            	jmp	setfwf		;flag set, so subsequent close ok
    2483/    A893 :                     	;ret
    2484/    A893 :                     
    2485/    A893 :                     randiskread:
    2486/    A893 :                     	;random disk read operation
    2487/    A893 : 0E FF               	mvi	c,_true		;marked as read operation
    2488/    A895 : CD 03 A8            	call	rseek
    2489/    A898 : CC C1 A6            	cz	diskread	;if seek successful
    2490/    A89B : C9                  	ret
    2491/    A89C :                     
    2492/    A89C :                     randiskwrite:
    2493/    A89C :                     	;random disk write operation
    2494/    A89C : 0E 00               	mvi	c,_false	;marked as write operation
    2495/    A89E : CD 03 A8            	call	rseek
    2496/    A8A1 : CC 03 A7            	cz	diskwrite	;if seek successful
    2497/    A8A4 : C9                  	ret
    2498/    A8A5 :                     
    2499/    A8A5 :                     compute_rr:
    2500/    A8A5 :                     	;compute random record position for getfilesize/setrandom
    2501/    A8A5 : EB                  	xchg
    2502/    A8A6 : 19                  	dad	d
    2503/    A8A7 :                     	;DE=.buf(dptr) or .fcb(0), HL = .f(nxtrec/reccnt)
    2504/    A8A7 : 4E                  	mov	c,m		;BC = 0000 0000 ?rrr rrrr
    2505/    A8A8 : 06 00               	mvi	b,0
    2506/    A8AA : 21 0C 00            	lxi	h,extnum	;A=e000 0000
    2507/    A8AD : 19                  	dad	d
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 43 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    2508/    A8AE : 7E                  	mov	a,m
    2509/    A8AF : 0F                  	rrc
    2510/    A8B0 : E6 80               	ani	80h
    2511/    A8B2 : 81                  	add	c
    2512/    A8B3 : 4F                  	mov	c,a
    2513/    A8B4 : 3E 00               	mvi	a,0
    2514/    A8B6 : 88                  	adc	b
    2515/    A8B7 : 47                  	mov	b,a
    2516/    A8B8 :                     	;BC = 0000 000? errrr rrrr
    2517/    A8B8 : 7E                  	mov	a,m
    2518/    A8B9 : 0F                  	rrc
    2519/    A8BA : E6 0F               	ani	0fh
    2520/    A8BC : 80                  	add	b
    2521/    A8BD : 47                  	mov	b,a
    2522/    A8BE :                     	;BC = 000? eeee errrr rrrr
    2523/    A8BE : 21 0E 00            	lxi	h,modnum	;A=XXX? mmmm
    2524/    A8C1 : 19                  	dad	d
    2525/    A8C2 : 7E                  	mov	a,m
    2526/    A8C3 : 87                  	add	a		;cy=? A=mmmm 0000
    2527/    A8C4 : 87                  	add	a
    2528/    A8C5 : 87                  	add	a
    2529/    A8C6 : 87                  	add	a
    2530/    A8C7 : F5                  	push	psw
    2531/    A8C8 : 80                  	add	b
    2532/    A8C9 : 47                  	mov	b,a
    2533/    A8CA :                     	;cy=?, BC = mmmm eeee errr rrrr
    2534/    A8CA : F5                  	push	psw		;possible second carry
    2535/    A8CB : E1                  	pop	h		;cy = lsb of L
    2536/    A8CC : 7D                  	mov	a,l		;cy = lsb of A
    2537/    A8CD : E1                  	pop	h		;cy = lsb of L
    2538/    A8CE : B5                  	ora	l		;cy/cy = lsb of A
    2539/    A8CF : E6 01               	ani	1		;A = 0000 000? possible carry-out
    2540/    A8D1 : C9                  	ret
    2541/    A8D2 :                     
    2542/    A8D2 :                     getfilesize:
    2543/    A8D2 :                     	;compute logical file size for current fcb
    2544/    A8D2 : 0E 0C               	mvi	c,extnum
    2545/    A8D4 : CD 18 A4            	call	search
    2546/    A8D7 :                     	;zero the receiving ranrec field
    2547/    A8D7 : 2A 43 A0            	lhld	info		;save position
    2548/    A8DA : 11 21 00            	lxi	d,ranrec
    2549/    A8DD : 19                  	dad	d
    2550/    A8DE : E5                  	push	h
    2551/    A8DF : 72                  	mov	m,d		;=00 00 00
    2552/    A8E0 : 23                  	inx	h
    2553/    A8E1 : 72                  	mov	m,d
    2554/    A8E2 : 23                  	inx	h
    2555/    A8E3 : 72                  	mov	m,d
    2556/    A8E4 :                     getsize:
    2557/    A8E4 : CD F5 A2            	call	end_of_dir
    2558/    A8E7 : CA 0C A9            	jz	setsize
    2559/    A8EA :                     	;current fcb addressed by dptr
    2560/    A8EA : CD 5E A2            	call	getdptra	;ready for compute size
    2561/    A8ED : 11 0F 00            	lxi	d,reccnt
    2562/    A8F0 : CD A5 A8            	call	compute_rr
    2563/    A8F3 :                     	;A=0000 000? BC = mmmm eeee errr rrrr
    2564/    A8F3 :                     	;compare with memory, larger?
    2565/    A8F3 : E1                  	pop	h		;recall, replace .fcb(ranrec)
    2566/    A8F4 : E5                  	push	h
    2567/    A8F5 : 5F                  	mov	e,a		;save cy
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 44 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    2568/    A8F6 : 79                  	mov	a,c		;ls byte
    2569/    A8F7 : 96                  	sub	m
    2570/    A8F8 : 23                  	inx	h
    2571/    A8F9 : 78                  	mov	a,b		;middle byte
    2572/    A8FA : 9E                  	sbb	m
    2573/    A8FB : 23                  	inx	h
    2574/    A8FC : 7B                  	mov	a,e		;carry if .fcb(ranrec) > directory
    2575/    A8FD : 9E                  	sbb	m
    2576/    A8FE : DA 06 A9            	jc	getnextsize	;for another try
    2577/    A901 :                     	;fcb is less or equal, fill from directory
    2578/    A901 : 73                  	mov	m,e
    2579/    A902 : 2B                  	dcx	h
    2580/    A903 : 70                  	mov	m,b
    2581/    A904 : 2B                  	dcx	h
    2582/    A905 : 71                  	mov	m,c
    2583/    A906 :                     getnextsize:
    2584/    A906 : CD 2D A4            	call	searchn
    2585/    A909 : C3 E4 A8            	jmp	getsize
    2586/    A90C :                     setsize:
    2587/    A90C : E1                  	pop	h		;discard .fcb(ranrec)
    2588/    A90D : C9                  	ret
    2589/    A90E :                     
    2590/    A90E :                     setrandom:
    2591/    A90E :                     	;set random record from the current file control block
    2592/    A90E : 2A 43 A0            	lhld	info		;ready params for computesize
    2593/    A911 : 11 20 00            	lxi	d,nxtrec
    2594/    A914 : CD A5 A8            	call	compute_rr	;DE=info, A=cy, BC=mmmm eeee errr rrrr
    2595/    A917 : 21 21 00            	lxi	h,ranrec	;HL = .fcb(ranrec)
    2596/    A91A : 19                  	dad	d
    2597/    A91B : 71                  	mov	m,c		;to ranrec
    2598/    A91C : 23                  	inx	h
    2599/    A91D : 70                  	mov	m,b
    2600/    A91E : 23                  	inx	h
    2601/    A91F : 77                  	mov	m,a
    2602/    A920 : C9                  	ret
    2603/    A921 :                     
    2604/    A921 :                     select:
    2605/    A921 :                     	;select disk info for subsequent input or output ops
    2606/    A921 : 2A AF AA            	lhld	dlog
    2607/    A924 : 3A 42 A0            	lda	curdsk
    2608/    A927 : 4F                  	mov	c,a
    2609/    A928 : CD EA A1            	call	hlrotr
    2610/    A92B : E5                  	push	h		;save it for test below, send to seldsk
    2611/    A92C : EB                  	xchg
    2612/    A92D : CD 59 A0            	call	selectdisk	;recall dlog vector
    2613/    A930 : E1                  	pop	h
    2614/    A931 : CC 47 A0            	cz	sel_error	;returns true if select ok
    2615/    A934 :                     	;is the disk logged in?
    2616/    A934 : 7D                  	mov	a,l		;return if bit is set
    2617/    A935 : 1F                  	rar
    2618/    A936 : D8                  	rc
    2619/    A937 :                     	;disk not logged in, set bit and initialize
    2620/    A937 : 2A AF AA            	lhld	dlog		;call ready
    2621/    A93A : 4D                  	mov	c,l
    2622/    A93B : 44                  	mov	b,h
    2623/    A93C : CD 0B A2            	call	set_cdisk	;dlog=set_cdisk(dlog)
    2624/    A93F : 22 AF AA            	shld	dlog
    2625/    A942 : C3 A3 A3            	jmp	initialize
    2626/    A945 :                     	;ret
    2627/    A945 :                     
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 45 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    2628/    A945 :                     curselect:
    2629/    A945 : 3A D6 AA            	lda	linfo		;skip if linfo=curdsk
    2630/    A948 : 21 42 A0            	lxi	h,curdsk
    2631/    A94B : BE                  	cmp	m
    2632/    A94C : C8                  	rz
    2633/    A94D : 77                  	mov	m,a		;curdsk=info
    2634/    A94E : C3 21 A9            	jmp	select
    2635/    A951 :                     	;ret
    2636/    A951 :                     
    2637/    A951 :                     reselect:
    2638/    A951 :                     	;check current fcb to see if reselection necessary
    2639/    A951 : 3E FF               	mvi	a,_true		;mark possible reselect
    2640/    A953 : 32 DE AA            	sta	resel
    2641/    A956 : 2A 43 A0            	lhld	info		;drive select code
    2642/    A959 : 7E                  	mov	a,m
    2643/    A95A : E6 1F               	ani	11111b		;non zero is auto drive select
    2644/    A95C : 3D                  	dcr	a		;drive code normalized to 0..30, or 255
    2645/    A95D : 32 D6 AA            	sta	linfo		;save drive code
    2646/    A960 : FE 1E               	cpi	30
    2647/    A962 : D2 75 A9            	jnc	noselect
    2648/    A965 :                     	;auto select function, save curdsk
    2649/    A965 : 3A 42 A0            	lda	curdsk		;olddsk=curdsk
    2650/    A968 : 32 DF AA            	sta	olddsk
    2651/    A96B : 7E                  	mov	a,m		;save drive code
    2652/    A96C : 32 E0 AA            	sta	fcbdsk
    2653/    A96F : E6 E0               	ani	11100000b	;preserve hi bits
    2654/    A971 : 77                  	mov	m,a
    2655/    A972 : CD 45 A9            	call	curselect
    2656/    A975 :                     noselect:
    2657/    A975 :                     	;set user code
    2658/    A975 : 3A 41 A0            	lda	usrcode		;0...31
    2659/    A978 : 2A 43 A0            	lhld	info
    2660/    A97B : B6                  	ora	m
    2661/    A97C : 77                  	mov	m,a
    2662/    A97D : C9                  	ret
    2663/    A97E :                     
    2664/    A97E :                     ;	individual function handlers
    2665/    A97E :                     func12:
    2666/    A97E :                     	;return version number
    2667/    A97E : 3E 22               	mvi	a,dvers		;lret = dvers (high = 00)
    2668/    A980 : C3 01 A0            	jmp	sta_ret
    2669/    A983 :                     ;	ret ;jmp goback
    2670/    A983 :                     
    2671/    A983 :                     func13:
    2672/    A983 :                     	;reset disk system - initialize to disk 0
    2673/    A983 : 21 00 00            	lxi	h,0
    2674/    A986 : 22 AD AA            	shld	rodsk
    2675/    A989 : 22 AF AA            	shld	dlog
    2676/    A98C : AF                  	xra	a		;note that usrcode remains unchanged
    2677/    A98D : 32 42 A0            	sta	curdsk
    2678/    A990 : 21 80 00            	lxi	h,tbuff		;dmaad = tbuff
    2679/    A993 : 22 B1 AA            	shld	dmaad
    2680/    A996 : CD DA A2                    call	setdata		;to data dma address
    2681/    A999 : C3 21 A9            	jmp	select
    2682/    A99C :                     	;ret ;jmp goback
    2683/    A99C :                     
    2684/    A99C : =A945H              func14	equ	curselect
    2685/    A99C :                     	;select disk info
    2686/    A99C :                     	;ret ;jmp goback
    2687/    A99C :                     
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 46 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    2688/    A99C :                     func15:
    2689/    A99C :                     	;open file
    2690/    A99C : CD 72 A2            	call	clrmodnum	;clear the module number
    2691/    A99F : CD 51 A9            	call	reselect
    2692/    A9A2 : C3 51 A5            	jmp	open
    2693/    A9A5 :                     	;ret ;jmp goback
    2694/    A9A5 :                     
    2695/    A9A5 :                     func16:
    2696/    A9A5 :                     	;close file
    2697/    A9A5 : CD 51 A9            	call	reselect
    2698/    A9A8 : C3 A2 A5            	jmp	close
    2699/    A9AB :                     	;ret ;jmp goback
    2700/    A9AB :                     
    2701/    A9AB :                     func17:
    2702/    A9AB :                     	;search for first occurrence of a file
    2703/    A9AB : 0E 00               	mvi	c,0		;length assuming '?' true
    2704/    A9AD : EB                  	xchg			;was lhld info		
    2705/    A9AE : 7E                  	mov	a,m		;no reselect if ?
    2706/    A9AF : FE 3F               	cpi	'?'
    2707/    A9B1 : CA C2 A9            	jz	qselect		;skip reselect if so
    2708/    A9B4 :                     	;normal search
    2709/    A9B4 : CD A6 A1            	call	getexta
    2710/    A9B7 : 7E                  	mov	a,m
    2711/    A9B8 : FE 3F               	cpi	'?'
    2712/    A9BA : C4 72 A2            	cnz	clrmodnum	;module number zeroed
    2713/    A9BD : CD 51 A9            	call	reselect
    2714/    A9C0 : 0E 0F               	mvi	c,namlen
    2715/    A9C2 :                     qselect:
    2716/    A9C2 : CD 18 A4            	call	search
    2717/    A9C5 : C3 E9 A2            	jmp	dir_to_user	;copy directory entry to user
    2718/    A9C8 :                     	;ret ;jmp goback
    2719/    A9C8 :                     
    2720/    A9C8 :                     func18:
    2721/    A9C8 :                     	;search for next occurrence of a file name
    2722/    A9C8 : 2A D9 AA            	lhld	searcha
    2723/    A9CB : 22 43 A0            	shld	info
    2724/    A9CE : CD 51 A9            	call	reselect
    2725/    A9D1 : CD 2D A4            	call	searchn
    2726/    A9D4 : C3 E9 A2            	jmp	dir_to_user	;copy directory entry to user
    2727/    A9D7 :                     	;ret ;jmp goback
    2728/    A9D7 :                     
    2729/    A9D7 :                     func19:
    2730/    A9D7 :                     	;delete a file
    2731/    A9D7 : CD 51 A9            	call	reselect
    2732/    A9DA : CD 9C A4            	call	delete
    2733/    A9DD : C3 01 A4            	jmp	copy_dirloc
    2734/    A9E0 :                     	;ret ;jmp goback
    2735/    A9E0 :                     
    2736/    A9E0 :                     func20:
    2737/    A9E0 :                     	;read a file
    2738/    A9E0 : CD 51 A9            	call	reselect
    2739/    A9E3 : C3 BC A6            	jmp	seqdiskread				;
    2740/    A9E6 :                     	 ;jmp goback
    2741/    A9E6 :                     
    2742/    A9E6 :                     func21:
    2743/    A9E6 :                     	;write a file
    2744/    A9E6 : CD 51 A9            	call	reselect
    2745/    A9E9 : C3 FE A6            	jmp	seqdiskwrite			;
    2746/    A9EC :                     	 ;jmp goback
    2747/    A9EC :                     
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 47 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    2748/    A9EC :                     func22:
    2749/    A9EC :                     	;make a file
    2750/    A9EC : CD 72 A2            	call	clrmodnum
    2751/    A9EF : CD 51 A9            	call	reselect
    2752/    A9F2 : C3 24 A6            	jmp	make
    2753/    A9F5 :                     	;ret ;jmp goback
    2754/    A9F5 :                     
    2755/    A9F5 :                     func23:
    2756/    A9F5 :                     	;rename a file
    2757/    A9F5 : CD 51 A9            	call	reselect
    2758/    A9F8 : CD 16 A5            	call	rename
    2759/    A9FB : C3 01 A4            	jmp	copy_dirloc
    2760/    A9FE :                     	;ret ;jmp goback
    2761/    A9FE :                     
    2762/    A9FE :                     func24:
    2763/    A9FE :                     	;return the login vector
    2764/    A9FE : 2A AF AA            	lhld	dlog
    2765/    AA01 : C3 29 AA            	jmp	sthl_ret			;
    2766/    AA04 :                     ;	ret ;jmp goback
    2767/    AA04 :                     
    2768/    AA04 :                     func25:
    2769/    AA04 :                     	;return selected disk number
    2770/    AA04 : 3A 42 A0            	lda	curdsk
    2771/    AA07 : C3 01 A0            	jmp	sta_ret
    2772/    AA0A :                     ;	ret ;jmp goback
    2773/    AA0A :                     
    2774/    AA0A :                     func26:
    2775/    AA0A :                     	;set the subsequent dma address to info
    2776/    AA0A : EB                  	xchg			;was lhld info	
    2777/    AA0B : 22 B1 AA            	shld	dmaad		;dmaad = info
    2778/    AA0E : C3 DA A2                    jmp	setdata		;to data dma address
    2779/    AA11 :                     	;ret ;jmp goback
    2780/    AA11 :                     
    2781/    AA11 :                     func27:
    2782/    AA11 :                     	;return the login vector address
    2783/    AA11 : 2A BF AA            	lhld	alloca
    2784/    AA14 : C3 29 AA            	jmp	sthl_ret
    2785/    AA17 :                     ;	ret ;jmp goback
    2786/    AA17 :                     
    2787/    AA17 : =A22CH              func28	equ	set_ro
    2788/    AA17 :                     	;write protect current disk
    2789/    AA17 :                     	;ret ;jmp goback
    2790/    AA17 :                     
    2791/    AA17 :                     func29:
    2792/    AA17 :                     	;return r/o bit vector
    2793/    AA17 : 2A AD AA            	lhld	rodsk
    2794/    AA1A : C3 29 AA            	jmp	sthl_ret
    2795/    AA1D :                     ;	ret ;jmp goback
    2796/    AA1D :                     
    2797/    AA1D :                     func30:
    2798/    AA1D :                     	;set file indicators
    2799/    AA1D : CD 51 A9            	call	reselect
    2800/    AA20 : CD 3B A5            	call	indicators
    2801/    AA23 : C3 01 A4            	jmp	copy_dirloc		;lret=dirloc
    2802/    AA26 :                     	;ret ;jmp goback
    2803/    AA26 :                     
    2804/    AA26 :                     func31:
    2805/    AA26 :                     	;return address of disk parameter block
    2806/    AA26 : 2A BB AA            	lhld	dpbaddr
    2807/    AA29 :                     sthl_ret:
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 48 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    2808/    AA29 : 22 45 A0             	shld	aret
    2809/    AA2C : C9                  	ret			;jmp goback
    2810/    AA2D :                     func32:
    2811/    AA2D :                     	;set user code
    2812/    AA2D : 3A D6 AA                    lda	linfo
    2813/    AA30 : FE FF               	cpi	0ffh
    2814/    AA32 : C2 3B AA            	jnz	setusrcode
    2815/    AA35 :                     	;interrogate user code instead
    2816/    AA35 : 3A 41 A0            	lda	usrcode		;lret=usrcode
    2817/    AA38 : C3 01 A0            	jmp	sta_ret
    2818/    AA3B :                     ;		ret ;jmp goback
    2819/    AA3B :                     setusrcode:
    2820/    AA3B : E6 1F               	ani	1fh
    2821/    AA3D : 32 41 A0            	sta	usrcode
    2822/    AA40 : C9                  	ret			;jmp goback
    2823/    AA41 :                     ;
    2824/    AA41 :                     func33:
    2825/    AA41 :                     	;random disk read operation
    2826/    AA41 : CD 51 A9            	call	reselect
    2827/    AA44 : C3 93 A8            	jmp	randiskread	;to perform the disk read
    2828/    AA47 :                     	;ret ;jmp goback
    2829/    AA47 :                     ;
    2830/    AA47 :                     func34:
    2831/    AA47 :                     	;random disk write operation
    2832/    AA47 : CD 51 A9            	call	 reselect
    2833/    AA4A : C3 9C A8            	jmp	randiskwrite	;to perform the disk write
    2834/    AA4D :                     	;ret ;jmp goback
    2835/    AA4D :                     ;
    2836/    AA4D :                     func35:
    2837/    AA4D :                     	;return file size (0-65536)
    2838/    AA4D : CD 51 A9            	call	reselect
    2839/    AA50 : C3 D2 A8            	jmp	getfilesize
    2840/    AA53 :                     	;ret ;jmp goback
    2841/    AA53 :                     ;
    2842/    AA53 : =A90EH              func36	equ	setrandom			;
    2843/    AA53 :                     	;set random record
    2844/    AA53 :                     	;ret ;jmp goback
    2845/    AA53 :                     func37:
    2846/    AA53 :                     ;
    2847/    AA53 : 2A 43 A0            	lhld	info
    2848/    AA56 : 7D                  	mov	a,l
    2849/    AA57 : 2F                  	cma
    2850/    AA58 : 5F                  	mov	e,a
    2851/    AA59 : 7C                  	mov	a,h
    2852/    AA5A : 2F                  	cma
    2853/    AA5B : 2A AF AA            	lhld	dlog
    2854/    AA5E : A4                  	ana	h
    2855/    AA5F : 57                  	mov	d,a
    2856/    AA60 : 7D                  	mov	a,l
    2857/    AA61 : A3                  	ana	e
    2858/    AA62 : 5F                  	mov	e,a
    2859/    AA63 : 2A AD AA            	lhld	rodsk
    2860/    AA66 : EB                  	xchg
    2861/    AA67 : 22 AF AA            	shld	dlog
    2862/    AA6A : 7D                  	mov	a,l
    2863/    AA6B : A3                  	ana	e
    2864/    AA6C : 6F                  	mov	l,a
    2865/    AA6D : 7C                  	mov	a,h
    2866/    AA6E : A2                  	ana	d
    2867/    AA6F : 67                  	mov	h,a
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 49 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    2868/    AA70 : 22 AD AA            	shld	rodsk
    2869/    AA73 : C9                  	ret
    2870/    AA74 :                     ;
    2871/    AA74 :                     ;
    2872/    AA74 :                     goback:
    2873/    AA74 :                     	;arrive here at end of processing to return to user
    2874/    AA74 : 3A DE AA            	lda	resel
    2875/    AA77 : B7                  	ora	a
    2876/    AA78 : CA 91 AA            	jz	retmon
    2877/    AA7B :                     	;reselection may have taken place
    2878/    AA7B : 2A 43 A0            	lhld	info		;fcb(0)=0
    2879/    AA7E : 36 00               	mvi	m,0
    2880/    AA80 : 3A E0 AA            	lda	fcbdsk
    2881/    AA83 : B7                  	ora	a
    2882/    AA84 : CA 91 AA            	jz	retmon
    2883/    AA87 :                     	;restore disk number
    2884/    AA87 : 77                  	mov	m,a		;fcb(0)=fcbdsk
    2885/    AA88 : 3A DF AA            	lda	olddsk
    2886/    AA8B : 32 D6 AA            	sta	linfo
    2887/    AA8E : CD 45 A9            	call	curselect
    2888/    AA91 :                     ;
    2889/    AA91 :                     ;	return from the disk monitor
    2890/    AA91 :                     retmon:
    2891/    AA91 : 2A 0F A0            	lhld	entsp		;user stack restored
    2892/    AA94 : F9                  	sphl
    2893/    AA95 : 2A 45 A0            	lhld	aret		;BA = HL = aret
    2894/    AA98 : 7D                  	mov	a,l
    2895/    AA99 : 44                  	mov	b,h
    2896/    AA9A : C9                  	ret
    2897/    AA9B :                     
    2898/    AA9B : =A004H              func38	equ	func_ret
    2899/    AA9B : =A004H              func39	equ	func_ret
    2900/    AA9B :                     
    2901/    AA9B :                     func40:
    2902/    AA9B :                     	;random disk write with zero fill of unallocated block
    2903/    AA9B : CD 51 A9            	call	reselect
    2904/    AA9E : 3E 02               	mvi	a,2
    2905/    AAA0 : 32 D5 AA            	sta	seqio
    2906/    AAA3 : 0E 00               	mvi	c,_false
    2907/    AAA5 : CD 07 A8            	call	rseek1
    2908/    AAA8 : CC 03 A7            	cz	diskwrite	;if seek successful
    2909/    AAAB : C9                  	ret
    2910/    AAAC :                     
    2911/    AAAC :                     
    2912/    AAAC :                     ;	data areas
    2913/    AAAC :                     
    2914/    AAAC :                     ;	initialized data
    2915/    AAAC : E5                  efcb:	db	empty	;0e5=available dir entry
    2916/    AAAD : 00 00               rodsk:	dw	0	;read only disk vector
    2917/    AAAF : 00 00               dlog:	dw	0	;logged-in disks
    2918/    AAB1 : 80 00               dmaad:	dw	tbuff	;initial dma address
    2919/    AAB3 :                     
    2920/    AAB3 :                     ;	curtrka - alloca are set upon disk select
    2921/    AAB3 :                     ;	(data must be adjacent, do not insert variables)
    2922/    AAB3 :                     ;	(address of translate vector, not used)
    2923/    AAB3 :                     cdrmaxa:ds	word	;pointer to cur dir max value
    2924/    AAB5 :                     curtrka:ds	word	;current track address
    2925/    AAB7 :                     curreca:ds	word	;current record address
    2926/    AAB9 :                     buffa:	ds	word	;pointer to directory dma address
    2927/    AABB :                     dpbaddr:ds	word	;current disk parameter block address
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 50 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


    2928/    AABD :                     checka:	ds	word	;current checksum vector address
    2929/    AABF :                     alloca:	ds	word	;current allocation vector address
    2930/    AAC1 : =8H                 addlist	equ	$-buffa	;address list size
    2931/    AAC1 :                     
    2932/    AAC1 :                     ;	sectpt - offset obtained from disk parm block at dpbaddr
    2933/    AAC1 :                     ;	(data must be adjacent, do not insert variables)
    2934/    AAC1 :                     sectpt:	ds	word	;sectors per track
    2935/    AAC3 :                     blkshf:	ds	byte	;block shift factor
    2936/    AAC4 :                     blkmsk:	ds	byte	;block mask
    2937/    AAC5 :                     extmsk:	ds	byte	;extent mask
    2938/    AAC6 :                     maxall:	ds	word	;maximum allocation number
    2939/    AAC8 :                     dirmax:	ds	word	;largest directory number
    2940/    AACA :                     dirblk:	ds	word	;reserved allocation bits for directory
    2941/    AACC :                     chksiz:	ds	word	;size of checksum vector
    2942/    AACE :                     offset:	ds	word	;offset tracks at beginning
    2943/    AAD0 : =FH                 dpblist	equ	$-sectpt	;size of area
    2944/    AAD0 :                     
    2945/    AAD0 :                     ;	local variables
    2946/    AAD0 :                     tranv:	ds	word	;address of translate vector
    2947/    AAD2 :                     fcb_copied:
    2948/    AAD2 :                     	ds	byte	;set true if copy_fcb called
    2949/    AAD3 :                     rmf:	ds	byte	;read mode flag for open_reel
    2950/    AAD4 :                     dirloc:	ds	byte	;directory flag in rename, etc.
    2951/    AAD5 :                     seqio:	ds	byte	;1 if sequential i/o
    2952/    AAD6 :                     linfo:	ds	byte	;low(info)
    2953/    AAD7 :                     dminx:	ds	byte	;local for diskwrite
    2954/    AAD8 :                     searchl:ds	byte	;search length
    2955/    AAD9 :                     searcha:ds	word	;search address
    2956/    AADB :                     tinfo:	ds	word	;temp for info in "make"
    2957/    AADD :                     single:	ds	byte	;set true if single byte allocation map
    2958/    AADE :                     resel:	ds	byte	;reselection flag
    2959/    AADF :                     olddsk:	ds	byte	;disk on entry to bdos
    2960/    AAE0 :                     fcbdsk:	ds	byte	;disk named in fcb
    2961/    AAE1 :                     rcount:	ds	byte	;record count in current fcb
    2962/    AAE2 :                     extval:	ds	byte	;extent number and extmsk
    2963/    AAE3 :                     vrecord:ds	word	;current virtual record
    2964/    AAE5 :                     arecord:ds	word	;current actual record
    2965/    AAE7 :                     arecord1:	ds	word	;current actual block# * blkmsk
    2966/    AAE9 :                     
    2967/    AAE9 :                     ;	local variables for directory access
    2968/    AAE9 :                     dptr:	ds	byte	;directory pointer 0,1,2,3
    2969/    AAEA :                     dcnt:	ds	word	;directory counter 0,1,...,dirmax
    2970/    AAEC :                     drec:	ds	word	;directory record 0,1,...,dirmax/4
    2971/    AAEE :                     
    2972/    AAEE : =AB00H              bios	equ	($ & 0ff00h)+100h	;next module
    2973/    AAEE :                     	end
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 51 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


  symbol table (* = unused):
  ------------------------

 ADDH :                        A264 C |  ADDLIST :                        8 - |
 ALLOCA :                      AABF C |  ALLOCATED :                   A184 C |
 ALLOCWD :                     A764 C |
*ARCHITECTURE :                                        x86_64-unknown-linux - |
 ARECORD :                     AAE5 C |  ARECORD1 :                    AAE7 C |
 ARET :                        A045 C |  ATRAN :                       A18A C |
 ATRAN0 :                      A190 C |  BACKSP :                      9F99 C |
 BACKUP :                      9EA4 C |  BACKX :                       9F4E C |
 BADSEEK :                     A884 C | *BDOSA :                          6 - |
 BDOSE :                       9D11 C | *BIGENDIAN :                      0 - |
 BIOS :                        AB00 - |  BLKMSK :                      AAC4 C |
 BLKSHF :                      AAC3 C |  BLOCKOK :                     A748 C |
*BOOTF :                       AB00 - | *BRANCHEXT :                      0 - |
 BUFFA :                       AAB9 C |  BUFFNZERO :                   A5E1 C |
 BYTE :                           1 - | *CASESENSITIVE :                  0 - |
 CDRMAXA :                     AAB3 C |  CHECKA :                      AABD C |
 CHECKSUM :                    A29E C |  CHECK_RODIR :                 A244 C |
 CHECK_ROFILE :                A247 C |  CHECK_WRITE :                 A254 C |
 CHKSIZ :                      AACC C |  CLOSE :                       A5A2 C |
 CLRMODNUM :                   A272 C |  COLUMN :                      A00C C |
 COMPCDR :                     A27F C |  COMPCOL :                     A00A C |
 COMPEXT :                     A407 C |  COMPOUT :                     9E62 C |
 COMPUTECS0 :                  A1FD C |  COMPUTE_CS :                  A1F7 C |
 COMPUTE_RR :                  A8A5 C |  CONB0 :                       9E42 C |
 CONB1 :                       9E45 C |  CONBRK :                      9E23 C |
 CONECH :                      9E06 C |  CONIN :                       9DFB C |
 CONINF :                      AB09 - |  CONOUT :                      9E48 C |
 CONOUTF :                     AB0C - |  CONSTF :                      AB06 - |
*CONSTPI :        3.141592653589793 - |  COPY_DIR :                    A501 C |
 COPY_DIRLOC :                 A401 C |  COPY_FCB :                    A4FD C |
 CR :                             D - |  CRLF :                        9EC9 C |
 CRLFP :                       9EB1 C |  CRLFP0 :                      9EB9 C |
 CTL :                           5E - |  CTLC :                           3 - |
 CTLE :                           5 - |  CTLH :                           8 - |
 CTLOUT :                      9E7F C |  CTLP :                          10 - |
 CTLR :                          12 - |  CTLS :                          13 - |
 CTLU :                          15 - |  CTLX :                          18 - |
*CTLZ :                          1A - |  CURDSK :                      A042 C |
 CURRECA :                     AAB7 C |  CURSELECT :                   A945 C |
 CURTRKA :                     AAB5 C | *DATE :                  08/12/2019 - |
 DCNT :                        AAEA C |  DELETE :                      A49C C |
 DELETE0 :                     A4A4 C |  DIOCOMP :                     A0BB C |
 DIRBLK :                      AACA C |  DIRINP :                      9FE0 C |
 DIRLOC :                      AAD4 C |  DIRMAX :                      AAC8 C |
 DIRREC :                         4 - |  DIR_TO_USER :                 A2E9 C |
 DISKEOF :                     A6FB C | *DISKF :                          C - |
 DISKREAD :                    A6C1 C | *DISKWR0 :                     A71C C |
 DISKWR1 :                     A76E C |  DISKWR11 :                    A7BB C |
 DISKWR2 :                     A7D2 C |  DISKWR3 :                     A800 C |
 DISKWRITE :                   A703 C |  DISKWRU :                     A76C C |
 DLOG :                        AAAF C |  DMAAD :                       AAB1 C |
 DMINX :                       AAD7 C |  DMPOS0 :                      A145 C |
 DMPOS1 :                      A153 C |  DMPOS2 :                      A15C C |
 DMSET :                       A5FD C |  DM_POSITION :                 A13E C |
 DPBADDR :                     AABB C |  DPBLIST :                        F - |
 DPTR :                        AAE9 C |  DREC :                        AAEC C |
 DSKERR :                      9DC6 C |  DSKMAP :                        10 - |
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 52 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


 DSKMSG :                      9DBA C |  DSKMSK :                         3 - |
 DSKSHF :                         2 - |  DVERS :                         22 - |
 ECHOC :                       9E14 C |  EFCB :                        AAAC C |
 EMPTY :                         E5 - |  ENDDIR :                      FFFF - |
 ENDMERGE :                    A617 C |  ENDSEARCH :                   A483 C |
 END_OF_DIR :                  A2F5 C |  ENTSP :                       A00F C |
 ERRFLG :                      9DE5 C |  EXTMSK :                      AAC5 C |
 EXTNUM :                         C - |  EXTVAL :                      AAE2 C |
*FALSE :                          0 - |  FCBDSK :                      AAE0 C |
 FCBLEN :                        20 - |  FCBNZERO :                    A5DB C |
 FCBSHF :                         5 - |  FCB_COPIED :                  AAD2 C |
 FILL0 :                       A78C C |  FILL1 :                       A79A C |
*FULLPMMU :                       1 - |  FUNC1 :                       9FC8 C |
 FUNC10 :                      9EE1 - |  FUNC11 :                      9FFE C |
 FUNC12 :                      A97E C |  FUNC13 :                      A983 C |
 FUNC14 :                      A945 - |  FUNC15 :                      A99C C |
 FUNC16 :                      A9A5 C |  FUNC17 :                      A9AB C |
 FUNC18 :                      A9C8 C |  FUNC19 :                      A9D7 C |
 FUNC2 :                       9E90 - |  FUNC20 :                      A9E0 C |
 FUNC21 :                      A9E6 C |  FUNC22 :                      A9EC C |
 FUNC23 :                      A9F5 C |  FUNC24 :                      A9FE C |
 FUNC25 :                      AA04 C |  FUNC26 :                      AA0A C |
 FUNC27 :                      AA11 C |  FUNC28 :                      A22C - |
 FUNC29 :                      AA17 C |  FUNC3 :                       9FCE C |
 FUNC30 :                      AA1D C |  FUNC31 :                      AA26 C |
 FUNC32 :                      AA2D C |  FUNC33 :                      AA41 C |
 FUNC34 :                      AA47 C |  FUNC35 :                      AA4D C |
 FUNC36 :                      A90E - |  FUNC37 :                      AA53 C |
 FUNC38 :                      A004 - |  FUNC39 :                      A004 - |
 FUNC40 :                      AA9B C |  FUNC6 :                       9FD4 C |
 FUNC7 :                       9FED C |  FUNC8 :                       9FF3 C |
 FUNC9 :                       9FF8 C |  FUNCTAB :                     9D47 C |
 FUNC_RET :                    A004 C |  FWFMSK :                        80 - |
 GETALLOCBIT :                 A335 C |  GETDM :                       A15E C |
 GETDMD :                      A171 C |  GETDPTRA :                    A25E C |
 GETEXTA :                     A1A6 C |  GETFCB :                      A1BB C |
 GETFCBA :                     A1AE C |  GETFILESIZE :                 A8D2 C |
 GETMODNUM :                   A269 C |  GETNEXTSIZE :                 A906 C |
 GETSIZE :                     A8E4 C |  GET_BLOCK :                   A4BE C |
 GOBACK :                      AA74 C |  GOERR :                       A04A C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
 HLROTL :                      A204 C |  HLROTL0 :                     A205 C |
 HLROTR :                      A1EA C |  HLROTR0 :                     A1EB C |
 HOME :                        A0A1 C |  HOMEF :                       AB18 - |
 INDEX :                       A177 C |  INDIC0 :                      A540 C |
 INDICATORS :                  A53B C | *INEXTMODE :                      0 - |
 INFO :                        A043 C |  INITIAL0 :                    A3B1 C |
 INITIAL2 :                    A3D2 C |  INITIALIZE :                  A3A3 C |
 INITIAL_CS :                  A2C4 C | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - | *INVIS :                          A - |
 IOLOC :                          3 - |  KBCHAR :                      A00E C |
 LEFTTST :                     A4C0 C |  LF :                             A - |
 LINELEN :                     9F70 C |  LINFO :                       AAD6 C |
 LISTCP :                      A00D C |  LISTF :                       AB0F - |
*LISTON :                         1 - | *LISTSTF :                     AB2D - |
 LRET :                        A045 - |  LSTACK :                      A041 C |
*LSTFCB :                        1F - |  LSTREC :                        7F - |
*MACEXP :                         7 - |  MAKE :                        A624 C |
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 53 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


 MAKE0 :                       A646 C |  MAXALL :                      AAC6 C |
 MAXEXT :                        1F - |  MAXMOD :                         F - |
 MERGE0 :                      A5CD C |  MERGED :                      A5E8 C |
 MERGERR :                     A61F C |  MERGEZERO :                   A594 C |
 MODNUM :                         E - | *MOMCPU :                      8080 - |
*MOMCPUNAME :                  8080 - |  MOVE :                        A04F C |
 MOVE0 :                       A050 C |  NAMLEN :                         F - |
*NESTMAX :                      100 - |  NEWCHECKSUM :                 A29C C |
 NFUNCS :                        29 - |  NOPBLOCK :                    A73B C |
 NOSELECT :                    A975 C |  NOSPACE :                     A7FE C |
 NOTBACKSP :                   9E79 C |  NOTC :                        9FBD C |
 NOTE :                        9F37 C |  NOTH :                        9F16 C |
 NOTP :                        9F48 C |  NOTR :                        9FA6 C |
 NOTRUB :                      9F26 C |  NOTU :                        9F6B C |
 NOTX :                        9F5F C | *NOUPDATE :                    A7DF C |
 NOWRITE :                     A21E C |  NXTREC :                        20 - |
*OFF :                            0 - |  OFFSET :                      AACE C |
 OLDDSK :                      AADF C |  ON :                          FFFF - |
 OPEN :                        A551 C |  OPEN_COPY :                   A55A C |
 OPEN_MOD :                    A683 C |  OPEN_RCNT :                   A58B C |
 OPEN_REEL :                   A65A C |  OPEN_REEL0 :                  A68E C |
 OPEN_REEL1 :                  A6AC C |  OPEN_REEL2 :                  A6AF C |
 OPEN_R_ERR :                  A6B6 C | *PACKING :                        0 - |
*PADDING :                        1 - |  PATCH1 :                         1 - |
 PCTLH :                       9EAC C |  PDOLLAR :                     A3F6 C |
 PERERR :                      9D09 C |  PERMSG :                      9DCA C |
 PERSUB :                      9D99 C |  PRINT :                       9ED3 C |
 PUNCHF :                      AB12 - |  QSELECT :                     A9C2 C |
 RANCLOSE :                    A847 C |  RANDISKREAD :                 A893 C |
 RANDISKWRITE :                A89C C |  RANREC :                        21 - |
 RCOUNT :                      AAE1 C |  RDBUFF :                      A0B2 C |
 RDECH1 :                      9FA9 C | *RDECHO :                      9FA6 C |
 RD_DIR :                      A2D4 C |  READ :                        9EE1 C |
 READEN :                      9FC1 C |  READERF :                     AB15 - |
 READF :                       AB27 - |  READN0 :                      9EF1 C |
 READNX :                      9EEF C |  READ_DIR :                    A305 C |
 READ_DIR0 :                   A319 C |  READ_DIR1 :                   A320 C |
 REBOOT :                         0 - |  RECCNT :                         F - |
 RECORDOK :                    A6E6 C |  RECSIZ :                        80 - |
*RELAXED :                        0 - |  RENAME :                      A516 C |
 RENAME0 :                     A527 C |  REP0 :                        9F78 C |
 REP1 :                        9F8A C |  RESEL :                       AADE C |
 RESELECT :                    A951 C |  RETBLOCK :                    A4EC C |
 RETBLOCK0 :                   A4F4 C |  RETMON :                      AA91 C |
 RETSELECT :                   A09D C |  RIGHTTST :                    A4D1 C |
 RMF :                         AAD3 C |  RODERR :                      9D0D C |
 RODMSG :                      9DE1 C |  RODSK :                       AAAD C |
 RODSUB :                      9DAB C |  ROFERR :                      9D0F C |
 ROFILE :                         9 - |  ROFMSG :                      9DDC C |
 ROFSUB :                      9DB1 C |  ROTL :                        A356 C |
 ROTR :                        A364 C |  RSEEK :                       A803 C |
 RSEEK1 :                      A807 C |  RUBOUT :                        7F - |
 SCANDM :                      A36B C |  SCANDM0 :                     A375 C |
 SCANDM1 :                     A388 C |  SCANDM2 :                     A38E C |
 SCANM3 :                      A39D C |  SEARCH :                      A418 C |
 SEARCHA :                     AAD9 C |  SEARCHEXT :                   A473 C |
 SEARCHL :                     AAD8 C |  SEARCHLOOP :                  A453 C |
 SEARCHN :                     A42D C |  SEARCHNEXT :                  A44A C |
 SEARCHOK :                    A47C C |  SEARCH_FIN :                  A494 C |
 SECTPT :                      AAC1 C |  SECTRAN :                     AB30 - |
 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 54 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


 SEEK :                        A0D1 C |  SEEK0 :                       A0E4 C |
 SEEK1 :                       A0FA C |  SEEK2 :                       A10F C |
 SEEKERR :                     A88B C |  SEEKOK :                      A87F C |
 SEEK_COPY :                   A510 C |  SEEK_DIR :                    A0C3 C |
 SELDSKF :                     AB1B - |  SELECT :                      A921 C |
 SELECTDISK :                  A059 C |  SELERR :                      9D0B C |
 SELMSG :                      9DD5 C |  SELSUB :                      9DA5 C |
 SEL_ERROR :                   A047 C |  SEQDISKREAD :                 A6BC C |
 SEQDISKWRITE :                A6FE C |  SEQIO :                       AAD5 C |
 SETCDR :                      A28C C |  SETDATA :                     A2DA C |
 SETDIR :                      A2E0 C |  SETDMA :                      A2E3 C |
 SETDMAF :                     AB24 - |  SETFCB :                      A1D2 C |
 SETFCB1 :                     A1DE C |  SETFWF :                      A278 C |
 SETLRET1 :                    A005 C |  SETRANDOM :                   A90E C |
 SETSECF :                     AB21 - |  SETSIZE :                     A90C C |
 SETTRKF :                     AB1E - |  SETUSRCODE :                  AA3B C |
 SET_ALLOC_BIT :               A35C C |  SET_CDISK :                   A20B C |
 SET_END_DIR :                 A2FE C |  SET_RO :                      A22C C |
 SINGLE :                      AADD C |  SSIZE :                         18 - |
 STA_RET :                     A001 C |  STHL_RET :                    AA29 C |
 STRTCOL :                     A00B C |  SUBDH :                       A295 C |
 TAB :                            9 - |  TAB0 :                        9E96 C |
 TABOUT :                      9E90 C |  TBUFF :                         80 - |
 TEST :                        FFFF - | *TFCB :                          5C - |
*TIME :                 12:48:49 PM - | *TINFO :                       AADB C |
 TRANV :                       AAD0 C | *TRUE :                           1 - |
 UBYTES :                         D - |  USRCODE :                     A041 C |
*VERSION :                     142F - |  VRECORD :                     AAE3 C |
 WAIT_ERR :                    9DB4 C |  WBOOTF :                      AB03 - |
 WORD :                           2 - |  WRBUFF :                      A0B8 C |
 WRDIR :                       A2C6 C |  WRITEF :                      AB2A - |
 _FALSE :                         0 - |  _TRUE :                         FF - |

    416 symbols
     41 unused symbols

 AS V1.42 Beta [Bld 148] - source file bdos.asm - page 55 - 08/12/2019 12:48:49 PM
Bdos Interface, Bdos, Version 2.2 Feb, 1980


  codepages:
  ----------

STANDARD (0 changed characters)


0.05 seconds assembly time

   2974 lines source file
      2 passes
      0 errors
      0 warnings
