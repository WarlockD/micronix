

printf (3s)                  3/22/82                  printf (3s)


     SSUUBBRROOUUTTIINNEE((SS))
          pprriinnttff,, ffpprriinnttff,, sspprriinnttff - formatted output conversion
          
     CC
          ## iinncclluuddee <<ssttddiioo..hh>>

          pprriinnttff((ffoorrmmaatt [[,, aarrgg]]......))
          cchhaarr **ffoorrmmaatt;;

          ffpprriinnttff((ssttrreeaamm,, ffoorrmmaatt [[,, aarrgg]] ......))
          FFIILLEE **ssttrreeaamm;;
          cchhaarr **ffoorrmmaatt;;

          sspprriinnttff((ss,, ffoorrmmaatt [[,, aarrgg ]] ......))
          cchhaarr **ss,, ffoorrmmaatt;;


     FFUUNNCCTTIIOONN
          PPrriinnttff  places  output  on ssttddoouutt - the standard output
          stream.
          
          FFpprriinnttff places output on ssttrreeaamm - the named output.
          
          SSpprriinnttff places output in the ss string. This  string  is
          followed by a "\0" character.
          
          These   functions   convert,  format  and  print  their
          arguments under the control of the first argument. This
          first argument will be a character string containing 1)
          plain characters that are copied to the output  stream,
          and   2)   conversion   specifications   which   enable
          conversion and printing of the next pprriinnttff argument.
          
          The conversion specifications are introduced by  the  %%
          character.  The  options  listed  below may follow this
          character:


              A minus sign (-) specifying _l_e_f_t _a_d_j_u_s_t_m_e_n_t of  the
              converted value in the indicated field.
              
              A   string   of   digits  specifying  _f_i_e_l_d  _w_i_d_t_h.
              Converted values with  fewer  characters  than  the
              indicated  field  width may be blank-padded to make
              up the difference, unless the  field  width  begins
              with a 0, in which case it will be zero-padded.
              
              A  period (.) may separate the field width from the
              next string of digits.
              
              An additional digit string may be added  specifying
              a  _p_r_e_c_i_s_i_o_n,  or  the  number  of digits that will
              appear after the decimal point. This is used for --ee
              and --ff  conversions,  or  to  specify  the  maximum


                               -1-




printf (3s)                  3/22/82                  printf (3s)


              number  of  characters to be printed from a string.
              [An  asterisk  (*)  may  indicate  field  width  or
              precision,   in  which  case  an  integer  argument
              indicates the field width or precision.]
              
              A 11 may be specified with dd,, oo,, xx,, or uu to indicate
              correspondence with a long  integer  argument.  The
              same  thing  may be accomplished with a capitalized
              conversion code.
              
              Any character may be given that specifies the  type
              of conversion to be executed.


          The  conversion  characters  are  listed  and described
          below:


             ddooxx
              Integer aarrgg  is  converted  to  decimal,  octal  or
              hexadecimal notation.


             ff
              Float   or  double  aarrgg  is  converted  to  decimal
              notation in the following format:
              
                                  [[--]]dddddd..dddddd
              
              The precision specification determines  the  amount
              of  "d"s.  A  precision  of 0 results in no digits;
              default is six digits.


             ee
              Float or double aarrgg is converted in  the  following
              format:
              
                                 [[--]]dd..ddddddee++dddd
              
              One  digit  before and one number after the decimal
              point  equal  the   precision   specification.   By
              default, six digits are produced.


             gg
              Float  or  double  aarrgg  is  printed  in  one of the
              formats listed  above,  depending  upon  which  one
              specifies  full  precision  in  the least amount of
              space.




                               -2-




printf (3s)                  3/22/82                  printf (3s)


             cc
              Character aarrgg printed; NULL characters are ignored.

             ss
              Character aarrgg is defined as  a  character  pointer;
              string   characters   are  printed  up  to  a  NULL
              character, or if specified, up to  point  indicated
              by the precision specification.


             %%
              Only the %% is printed; arguments are not converted.


     NNOOTTEESS
          Small  or  non-existent fields do not cause truncation.
          Fields are padded when the specified field exceeds  the
          actual width.
          
          Fields larger than 128 characters will fail.
          
          PPuuttcc (3) prints the characters generated by pprriinnttff..


     AALLSSOO RREEAADD
          putc (3), scanf (3), ecvt (3)
          




                               -3-


