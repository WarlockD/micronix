

cpp (1)                      4/13/82                      cpp (1)


     PPRROOGGRRAAMM
          ccpppp -- preprocess defines and includes
          
          
     UUSSAAGGEE
          ccpppp <<ffllaaggss >> <<ffiilleess>>
          
          
     FFUUNNCCTTIIOONN
          PPpp  is  the  preprocessor  used  by  the C compiler, to
          perform ##ddeeffiinnee,, ##iinncclluuddee,, and other functions signaled
          by a ## before actual compilation begins. It can be used
          to advantage, however, with most  language  processors.
          The flag options are:
          
          -c        Do  not strip out //** ccoommmmeennttss **// nor continue
                    lines that end with \\..
                    
         -dname     Define name; if the definition string  (=def)
                    is included, it reads it in before the input;
                    if "=def" is omitted, the definition is taken
                    as  "1". The "name" and "=def" must be in the
                    same  argument  -  no  blanks  are  permitted
                    unless  the  argument  is  quoted.  Up to ten
                    definitions may be entered in this fashion.

          -i        Change the prefix used  with  ##iinncclluuddee  <<ffiillee
                    nnaammee>>  from  the  default  ("") to the string
                    prefix. Multiple prefixes to be tried in  any
                    order  may be specified, separated by the "|"
                    character.
                    
          -o        <File> can be specified with flag. Writes the
                    output to the specified file and writes error
                    messages to STDOUT.  Default  is  STDOUT  for
                    output and STDERR for error messages. On many
                    systems,  the  --oo option is mandatory with --xx
                    because STDOUT is interpreted as a text file,
                    and hence becomes corrupted.
                    
          -p?       Change  the  preprocessor  control  character
                    from ## to ??..
                    
          -s?       Change  the  secondary  preprocessor  control
                    character from @@ to ??..
                    
          -x        Put out lexemes for input to the  C  compiler
                    ccpp11,, not lines of text.
                    
          -6        Put out extra newlines and/or SOH ('\') codes
                    to  keep  source  line  numbers  correct  for
                    UNIX/V6 compiler or ptc.
                    
          CCpppp processes the named  file,  or  STDIN  if  none  is


                               -1-




cpp (1)                      4/13/82                      cpp (1)


          named,  in  the  order specified, writing the resultant
          text to STDOUT. Preprocessor actions are  described  in
          detail  in  the  Preprocessor section of the C Compiler
          User's Manual. The presence of a secondary preprocessor
          control    character    permits    two    levels     of
          parameterization. For instance, the invocation

                                ccpppp --cc --pp@@

          will  expand ddeeffiinnee and iiffddeeff conditionals, leaving all
          ## commands and comments intact. Invoking  ccpppp  with  no
          arguments would expand both @@ and ## commands. The flag,
          --ss##,,   effectively   disables   the  secondary  control
          character.
          
          
     EEXXAAMMPPLLEE
          The standard for writing C programs is

                  //** nnaammee ooff pprrooggrraamm
                   **//
                    ##iinncclluuddee <<ssttdd..hh>>
          
                    ## ddeeffiinnee MMAAXXNN       110000
          
                    CCOOUUNNTT tthhiinnggss[[MMAAXXNN]];;
                    eettcc..

          The use of uppercase identifiers  is  not  required  by
          ccpppp,,   but   is  strongly  recommended  to  distinguish
          parameters  from   normal   program   identifiers   and
          keywords.
          
          
     NNOOTTEESS
          Unbalanced  quotes  ('  or  ") may not occur in a line,
          even in the absence of the -x flag. Flotaing  constants
          longer  than  38 digits may compile incorrectly on some
          host machines.
          
          
     SSEEEE AALLSSOO
          cp1 (1), ptc (1)
          Micronix C and Pascal manual




                               -2-


