

rp (1)                   3/18/82                   rp (1)


     PPRROOGGRRAAMM
          rrpp - rational_pilot -> pilot translator
          
          
     UUSSAAGGEE
          rrpp <rational_pilot_file >pilot_file


     FFUUNNCCTTIIOONN
          The  rrpp  preprocessor  for  pilot  enables you to write
          programs in the free-form structured language "rational
          pilot", then automatically translate them into standard
          pilot for interpretation by the "pilot"  command.  This
          implementation    incorporates    iinncclluuddee   and   mmaaccrroo
          capabilities. RRpp reads  from  the  standard  input  and
          writes to the standard output.

          Lines of the form:

                  iinncclluuddee ffiillee

          are  replaced  by  the  contents  of  the  named  file.
          IInncclluuddeess may be nested.

          Macro definitions such as:

                  ddeeffiinnee((ttookkeenn,, ssttrriinngg))

                     or

                  ddeeffiinnee((ttookkeenn,, ......$$11......$$22......$$33......))

          may appear. The left parenthesis must follow  the  word
          define immediately. In the first case, ssttrriinngg is merely
          substituted  for  ttookkeenn  everywhere  it appears. In the
          second, occurrences of the form:

                  ttookkeenn((aarrggaa,, aarrggbb,, aarrggcc))

          are replaced by  the  defining  string,  but  with  the
          values  substituted for the arguments. The construction
          $n, where n is  a  decimal  digit,  signifies  the  nth
          argument.   A   given  macro  may  have  at  most  nine
          arguments. Macro definitions may be recursive.

          Any valid pilot statement is a valid  rrpp  statement.  A
          statement  or  group  of  statements may be enclosed in
          curly brackets "{" and "}". The result is treated as  a
          single  statement.  In  addition to standard pilot, the
          following are understood:




                               -1-




rp (1)                   3/18/82                   rp (1)


          iiff ((ccoonnddiittiioonn)) ssttaatteemmeenntt;;

               The statement is  executed  if  the  condition  is
               true. The condition may be either a match query or
               a define query (see pilot (I)).

          iiff ((ccoonnddiittiioonn)) ssttaatteemmeenntt;; eellssee ssttaatteemmeenntt;;

               If  the  condition is true, the first statement is
               executed,  otherwise  the  second   statement   is
               executed. For example
               
                t: Give me your answer true.
                a:
                if (m: y)
                        {
                        t: Oh, Joy!
                        t: ...
                        }
                else if (m: n)
                        t: Oh, Woe!
                else
                        t: Eh?
               
               An eellssee goes with the last un-elsed iiff..

          wwhhiillee ((ccoonnddiittiioonn)) ssttaatteemmeenntt;;

               The  statement  is  executed repeatedly as long as
               the condition remains true (possibly zero times as
               the  condition  is  always   tested   before   the
               statement  is  executed.) The condition may not be
               left out. For an infinite loop, see rreeppeeaatt below.

          ffoorr ((ssttaatteemmeenntt;; ccoonnddiittiioonn;; ssttaatteemmeenntt)) ssttaatteemmeenntt;;

               First,  the  first  statement  is  executed.  Then
               repeatedly  the  condition is tested, and if true,
               the last statement is executed, then  the  second.
               If  the condition is false, the loop is broken and
               control proceeds to the next  statement  following
               the  ffoorr.. More clearly: the first statement is the
               initializer  of  the  loop,  the  second  is   the
               incrementation,  and  the  last is the body of the
               loop.

          rreeppeeaatt statement;

               The statement is executed repeatedly.

          rreeppeeaatt statement; uunnttiill (condition);

               The statement is  executed  repeatedly  until  the
               condition  is true. The condition is always tested


                               -2-




rp (1)                   3/18/82                   rp (1)


               after the statement is executed, which is to  say,
               the  statement  will  always  be executed at least
               once.

          bbrreeaakk;;

               One level of wwhhiillee,, ffoorr,, or rreeppeeaatt,, loop is broken
               out of.

          nneexxtt;;

               Transfers control to the looping mechanism of  the
               innermost  wwhhiillee,,  ffoorr,,  or  rreeppeeaatt,,  in  which it
               occurs.


          AALLSSOO RREEAADD
               Kernighan, B.W. and P.J. Plauger, _S_o_f_t_w_a_r_e  _T_o_o_l_s,
               (Addison-Wesley, 1976).




                               -3-


