

pilot (1) 	     		 7/19/82                pilot (1)


     NNAAMMEE
          ppiilloott - an author language


     DDEESSCCRRIIPPTTIIOONN
          This  program  gets  its name from and is loosely based
          upon that set of programs written for the  CP/M  system
          under  the  generic  name PILOT, itself based upon some
          complex IBM software.
          
          The present incarnation has adopted many of the  ideas,
          but  is  not  totally  faithful  to  the original PILOT
          standard.
          
          Pilot is an author language in the sense that it should
          be possible for  "authors,"  i.e.  non-programmers,  to
          successfully  and  fairly rapidly get something working
          in the pilot language.
          
          Pilot is  a  non-structured  language,  but  structured
          language  enthusiasts  may  be  assured  that  "rp"  (a
          rational pilot) is available as a preprocessor. (See rp
          (1)).
          
          In order to run something  in  pilot,  one  issues  the
          command:

                    ppiilloott ffiilleennaammee

          where  the  given  filename refers to a "pilot script".
          Pilot will simply read the script and  do  whatever  is
          requested.
          
          To  write  a "pilot script" one needs only a way to get
          text into a file. Most text editors will suffice.
          
          
                              PPiilloott OOppeerraattiioonn
          
          In general, pilot reads its input file, one line  at  a
          time,   performing   the   described   actions   before
          proceeding. The general layout of a pilot command is:
          
               **llaabbeell ccoommmmaanndd ccoonnddiittiioonnaall :: wwoorrdd11 wwoorrdd22 wwoorrdd33 ......
          
          **llaabbeell is a tag by which one may  refer  to  this  line
          elsewhere  in  the  script.  It  is  optional,  and  in
          practice, most commands will not have labels.  A  label
          may appear on a line by itself.
          
          ccoommmmaanndd is a single letter command, discussed in detail
          below.




				   -1-




pilot (1) 	     		 7/19/82                pilot (1)


          ccoonnddiittiioonnaall  is either the letter Y or N. A conditional
          specifier is optional. If one appears, the command will
          only do something if the Y or  N  matches  the  current
          state of pilot's condition flag.
          
          wwoorrddss are optional and specific to individual commands.
          
          
                            IInnssttrruuccttiioonn SSuummmmaarryy
          
                              A - accept
                              C - call
                              D - define
                              E - exit
                              J - jump 
                              M - match
                              N - new file
                              R - return
                              S - save
                              T - type
                              U - unix
                              W - wait


                         IInnssttrruuccttiioonn DDeessccrriippttiioonnss
          
     AA -- aacccceepptt -- aa:: [[vvaarriiaabbllee]]
          One  line of input is accepted from the standard input.
          If a variable name is given, a  copy  of  the  accepted
          data will be stored in the variable.

          Examples
                    a:
                    a: $save


     CC -- ccaallll -- cc:: **llaabbeell
          Jump  to  the given label, but remember where you were.
          If a return instruction  (r:)  is  encountered  in  the
          program  flow  after the label, pilot will jump back to
          the instruction following the call.

          Example
                    c: *output
                    e:
                    *output
                    t: Hello world!
                    r:
                    
                    1) Call instruction jump down to "*output".
                    
                    2) Type instruction - type "Hello world!"




				   -2-




pilot (1) 	     		 7/19/82                pilot (1)


                    3) Return - go back to just after the last call
                    
                    4) exit - all done!


     DD -- ddeeffiinnee -- dd:: $$mmoovvee ddaattaa
          The string "data" is evaluated if necessary and then  a
          copy of the resulting string of characters is stored in
          the  string  variable  "name".  Note  that  "$" denotes
          string variables.

          Example
                    d: $x The cheese
                    t: $x
                    
                    1) Definition $x is set to "The cheese"
                    
                    2) Type - "The cheese" will be typed.


     EE -- eexxiitt -- ee::
          This is a  simple  instruction.  Pilot  quits  when  it
          encounters  an  exit instruction. Anything to the right
          of the colon is ignored.

          Example
                    e:
                    
                    Stop the whole works right now.


     JJ -- jjuummpp -- jj:: **llaabbeell
          Go to some other part of the current pilot script  file
          and continue executing instructions from that point on.
          If no label name is given, pilot prints "Missing label"
          and stops. If there is no such label to be found in the
          current  pilot  script file, "name: Label not found" is
          printed and pilot stops.

          Example
                    *top
                    t:Hello
                    j:*top

          This would print "Hello" over and over again forever.
          
          A more useful example:

                    a:
                    m:yes
                    jn: *default
                    t: you typed yes
                    e:
                    * default


				   -3-




pilot (1) 	     		 7/19/82                pilot (1)


                    t: you didn't type yes
                    e:
                    
                    1) Accept a line from the controlling terminal
                    
                    2) Match it against "Yes"
                    
                    3) Jump to *default if the previous match failed.
                    
                    4) type - "you typed yes" otherwise


     MM -- mmaattcchh -- mm:: ppaatttteerrnn,,ppaatttteerrnn,,ppaatttteerrnn,, ......
          Compare the most recent input against the given list of
          patterns and set pilot's condition flag  based  on  the
          outcome.  The  following  instructions  may  base their
          behavior on the outcome of these  pattern  comparisons.
          Two results are possible:
          
          1) The input matched one of the patterns (success).

          2) The input matched none of them (failure).

          Comparison  of  each  pattern  is  by a marching window
          scan.

          Case is ignored, that is, a capital Q is considered  to
          be the same as a lower case q.

          Example
                    m:a
                    m:one,two,three
          
          The   first  will  succeed  whenever  the  most  recent
          terminal input contained the letter "a" anywhere.
          
          The second  will  succeed  if  the  most  recent  input
          contained  any  of  the three given character sequences
          which form the words one, two, three.


     NN -- nneeww ffiillee -- nn:: ffiilleennaammee
          Fairly straightforward: Pilot has been  marching  along
          executing  instructions  in its pilot script file. When
          it encounters the line

                nn:: nneewwffiillee

          pilot will have done with the current  file  and  start
          executing  instructions with the first line in the file
          named "newfile". (There must, of course  exist  such  a
          file, and it must be readable.) Pilot stops if it can't
          read the given file.



				   -4-




pilot (1) 	     		 7/19/82                pilot (1)


     RR -- rreettuurrnn -- rr::
          Discussed  in  C  -  call (above). A return instruction
          causes a jump to the line following the  most  recently
          executed  call  instruction.  If there are no calls for
          which there have  been  no  returns,  pilot  stops.  It
          returns  out  of  pilot  to  the calling program, as it
          were. Anything to the right of the colon is ignored.

          Example
                    r:


     SS -- ssaavvee -- ss:: $$vvaarriiaabbllee
          The current value of the input terminal input  register
          is saved in the string variable whose name is given. If
          no name is given, no action is taken.

          Example
                    s: $phial

          The most recently accepted input is saved in "phial".


     TT -- ttyyppee -- tt:: tteexxtt
          A  simple command, really. That which follows the colon
          is  simply  sent  verbatim  to  the  standard   output,
          (usually  the  terminal).  If the last character of the
          line is a left slant (\), then no  "newline"  character
          is sent at the end of the line.
          
          Example
                    t: A) First selection
                    t: B) Second selection
                    t:
                    t: Your choice ==>\
                    a:

          The four lines above are typed.
          
          
     UU -- uunniixx -- uu:: ccoommmmaanndd
          The  command to the right of the colon is executed just
          as if it had been typed as a command to the shell. This
          command gives you access to the  rest  of  the  system.
          This  instruction  can take much longer than any of the
          others just to get set up. If the  sub-process  created
          by   a   U  instruction  is  interrupted  or  otherwise
          abnormally terminated, pilot will stop.




				   -5-




pilot (1) 	     		 7/19/82                pilot (1)


          Example
                    u: ls
                    u: cat $file | form | lpr &
                    u: pilot zzz
          
          Each command is executed. Note that it is possible  for
          pilot  to  continue before the command finishes (ex. 2)
          or  for  there  to  coexist  several  layers  of  pilot
          programs (ex. 3).
          
          
     WW -- wwaaiitt -- ww:: [[$$vvaarriiaabbllee]] [[nnuummbbeerr]]
          Wait  is  just  like "accept" above only it "times out"
          after a certain  period.  The  default  period  is  six
          seconds. One can select a different period by placing a
          numeric  value  to the right of the colon as one of the
          arguments.  If  the  specified  time  interval  expires
          before  the  RETURN key has been pressed, then the data
          returned is the single word "TIMEOUT" which  can  later
          be tested.
          
          Example
                    w:
                    w: $data
                    w: 9
                    w: $fast 2
                    
                    1) Accept data for a six second period.
                    
                    2) Accept data; wait for six seconds; store it in "data"
                    
                    3) Accept data; wait for nine seconds.
                    
                    4) Accept data; wait for two seconds; store it in "fast"


     SEE ALSO
          rp - rational pilot




				   -6-


