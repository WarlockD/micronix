.he "setuid (2)                   3/19/82                   setuid (2)" 
.fo "				    -#-"
.in 5
.rm 65
.bd
NAME
.in +5
.br
.bd
signal
- set disposition of signals


.in -5
.bd
C
.in +5
.br
signal(sig, func)
.br
int (*func)();


.in -5
.bd
FUNCTION   
.in +5
.br
A signal is a means of notifying a process
of some external event.
A signal can be sent from the system
(in response to an attempt to execute an
illegal instruction, for example),
from a terminal (to abort a process),
or at the request of another process
(via the 
.bd
kill 
system call).
Normally, a signal causes termination
of the receiving process, but this call
allows the process either to ignore it
or to "catch" it via an interrupt to
a specified location.
There are 15 signals:

.nf
.in +4
.bd 15
1    -- (hangup)
2    interrupt (caused by typing DEL)
3    quit (caused by typing control \) *
4    illegal instruction *
5    -- (trace trap)
6    background (caused by typing control b)
7    record available at terminal **
8    -- (floating point exception)
9    kill (cannot be caught or ignored)
10   -- (bus error)
11   -- (memory fault)
12   bad argument to a system call *
13   write to a pipe with no one to read it
14   -- (alarm clock)
15   terminate (catchable kill)
.sp
.fi
.bd
* 
causes a core dump unless caught or ignored
.sp
.bd
** 
not reset when caught
.in -4

.fi
Signals marked "--" are not currently sent by the system.
(The Unix V6 descriptions are given).

A "func" of 0 tells the system to institute the default
action for the given signal. For all signals but 6 and 7,
this means process termination on receipt of the signal.
For signal 6, the default action is to put the process
into the "background" (all further signals, except 9, will be
ignored, and reads on a terminal will return eof).
For signal 7, the default action is to ignore the signal.
.bp
If "func" is 1, the signal will be ignored.
If "func" is any value greater than 1, then it is
taken as an address, and receipt of the signal will
cause an interrupt to that address.
Except as noted, a signal is reset to 0 after being
caught. So in general, the catching routine must
issue another signal call if it wants to continue
catching the signal.

If a signal is caught during a slow system call
(read or write to a terminal,
.bd
sleep
, or
.bd
wait
), the call will terminate prematurely and return
an error (number EINTR - see the Introduction).

After a fork, the child inherits all signal dispositions.
.bd
Exec
passes on all default and ignore dispositions,
but resets all caught signals to default action.


.in -5
.bd
RETURNS
.in +5
.br
The return value is the old signal disposition.
A 0 indicates success, a -1 indicates failure
(signal number out of range).


.in -5
.bd
ASSEMBLER
.in +5
.br
.bd
(signal = 48)
.br
.bd
sys; signal; sig; func;
.br
.bd
(old value in r0)


.in -5
.bd
RETURNS
.in +5
.br
The carry flag is cleared on success, or set on failure.
