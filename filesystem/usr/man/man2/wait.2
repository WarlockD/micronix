.he "wait (2)                     3/19/82                     wait (2)"
.fo "				    -#-"
.in 5
.rm 65
.bd
NAME
.in +5
.br
.bd
wait 
- wait for a process to terminate


.in -5
.bd
C
.in +5
.br
wait(pstat)
.br
int *pstat;


.in -5
.bd
FUNCTION    
.in +5
.br
This call waits for the termination of any of the caller's children.
If any child has died since the last wait, return is immediate.
If there are no children, an error is returned.
If there are several children, several wait calls are necessary
to learn of all the deaths.

Wait returns the process ID of the terminated child,
and fills in the user-supplied integer with the
termination status.
In the case of a normal termination via 
.bd
exit,
the low byte of the status is 0, and the high byte
is the low byte of the child's exit argument.
In the case of a signal-caused termination,
the low byte of the status is the signal number,
and the high byte is the child's l register.

If a parent process terminates without waiting
for its children, the initialization process
(process id = 1) inherits the children.


.in -5
.bd
RETURNS
.in +5
.br
A positive number indicates success, a -1 indicates failure
(no children).  On success, the pointed-to status
is filled in with the child's termination status,
and the child's process ID is returned.


.in -5
.bd
ASSEMBLER
.in +5
.br
.bd
(wait = 7)
.br
.bd
sys; wait
.br
.bd
(process id in hl)
.br
.bd
(status in de)


.in -5
.bd
RETURNS
.in +5
.br
The carry flag is cleared on success, or set on failure
(no children). On success, the child's process ID
is returned in hl, and its termination status is
returned in de.
