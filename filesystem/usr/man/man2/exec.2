.he "exec (2)                     3/19/82                exec (2)"
.fo "                               -#-"
.in 5
.rm 65
.bd
NAME
.in +5
.br
.bd
exec
- execute a program
.sp 2
.in -5
.bd
C
.in +5
.br
execv(name, argv)
.br
char *name;
.br
char *argv[];

execl(name, arg0, arg1, ..., argn, 0)
.br
char *name, *arg0, *arg1, ..., *argn;
.sp 2
.in -5
.bd
FUNCTION
.in +5
.br
.bd
Exec
overlays the calling core image with the named file,
then transfers to the beginning of the new core image.
There can be no return from a successful
.bd
exec:
the calling core image is lost.

Exec does not create a new process -
the same process continues with the new core image.
Previously opened files remain open
(so standard input and output are preserved),
and ignored signals remain ignored.
Caught signals, however, are reset to their default behavior.

Each process has "real" user and group IDs and "effective"
user and group IDs. The real IDs identify the user;
the effective IDs determine the access privileges.
If a file does not have "set-user-id" or "set-group-id"
mode [see
.bd
chmod,
(2)], then
.bd
exec
sets all IDs,
real and effective, to the individual executing the file.
If the file does have either mode,
.bd
exec
sets the corresponding
effective ID to the owner of the executed file. The real IDs
remain unchanged. This allows a user to write a
program that takes advantage of his own access privileges
(rather than its invoker's privileges).

In order to be executed, a file must have one of the
execute permission bits set, even for the super-user.
The system expects one of two file formats.
If the first byte is hex 99, then the first 16
bytes are taken to be a header with the following structure
.nf
.bp
struct header
        {
        char     ident,         /* hex 99 */
                 conf;          /* not used by exec */
        unsigned tablsize,      /* not used by exec */
                 textsize,      /* bytes in text segment */
                 datasize,      /* bytes in data segment */
                 bss_size,      /* bytes in bss segment */
                 heapsize,      /* minimum stack + heap */
                 textoff,       /* text segment offset */
                 dataoff;       /* data segment offset */
        };
.sp
.fi
(This header structure is produced by Whitesmith's compilers.)
The rest of the file is assumed to contain textsize bytes of
text, followed by datasize bytes of data. Text is loaded at
address textoff, data is loaded at address dataoff, and bss
space is allocated following the data. The break is set at the
highest location in the text or data + bss segments.

If the first byte of the file is not hex 99, then the file is
taken to be pure object code origined at address 256 (100
hex). The brake is set to the file size.

In any case, the program must meet the maximum-size
restriction (currently 65024 bytes), and it must keep a "halt"
instruction (the system-call trap) at address 8. (This is
supplied by the system, unless the text offset is <= 8.)

C offers two different interfaces to
.bd
exec.  Execl
is useful when a known file is being executed
with known arguments.
The arguments are all string pointers.
Any number of arguments may be given, but the last
must be a 0.

When the number of arguments
is not known in advance,
.bd
execv
is handy. Pointers
to the argument strings are collected into a list,
a null pointer is appended to mark the end of the
list, and
.bd
execv
is called with the address of the list.

Currently, the total number of bytes in the argument
strings (including the terminating nulls) is limited
to 512.

It is conventional to repeat the name
of the file being executed as the first argument,
so that programs can use the name with which they are invoked.
.bp
When a C program is executed, it begins as follows:

.bd
main(argc, argv)
.in +8
.br
.bd
int argc;
.br
.bd
char **argv;
.in -8

where
.bd
argc
is the argument count, and
.bd
argv
is a list of pointers to the argument strings themselves.  Conventionally,
.bd
argc
is at least 1 and
.bd
argv[0]
is the program name.
As delivered by the system, argv[argc] == -1, so that
.bd
argv
cannot be used directly in another
.bd
execv
until
.bd
argv[argc]
is set to 0.
.sp 2
.in -5
.bd
RETURNS
.in +5
.br
Any return is an error return.
In that case, the calling image is not lost and can continue.
Possible errors include: the file cannot be found,
is not an ordinary file,
is not executable, is too big, or the argument list
is too long.
.sp 2
.in -5
.bd
ASSEMBLER
.in +5
.br
.bd
(exec = 11)
.br
.bd
sys; exec; name; argv


.bp
.bd
Argv
is the address of a list of string pointers.
The last pointer must be 0. When the file starts
execution, core is set up as follows:


.nf
.bd 9
(top of user core)
argn:   string\0
        ...
arg0:   string\0
        -1
        argn
        ...
        arg0
sp ->   argc
.sp 2
.fi
.in -5
.bd
RETURNS
.in +5
.br
If
.bd
exec
returns at all, the carry flag is set to
indicate an error.
