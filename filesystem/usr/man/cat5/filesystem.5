

filesystem (5)               3/15/82               filesystem (5)


     FFIILLEE
          ffiilleessyysstteemm - format of UNIX version 6 file systems


     FFUUNNCCTTIIOONN
          Every file system storage volume, (hard or floppy disk)
          has  a  common  format  for  certain vital information.
          Every such volume is divided into a certain  number  of
          256 word (512 byte) blocks. Block 0 is unused.
          
          Block  1  is  the  super block. Starting from its first
          word, the format of a super-block is as follows.
          
          ssttrruucctt
                {{
                uunnssiiggnneedd        
                        iissiizzee,,
                        ffssiizzee,,
                        nnffrreeee,,
                        ffrreeee [[110000]],,
                        nniinnooddee,,
                        iinnooddee [[110000]],,

                cchhaarr    fflloocckk,,
                        iilloocckk,,
                        ffmmoodd;;

                lloonngg    ttiimmee;;
                }};;


          Isize is the number of blocks  devoted  to  the  i-list
          which starts just after the super-block, in block 2.
          
          Fsize  is the first block not potentially available for
          allocation to a file. These numbers  are  used  by  the
          system   to  check  for  a  bad  block  number.  If  an
          impossible block number  is  allocated  from  the  free
          list,  or  is  freed,  a  diagnostic  is written on the
          on-line console. Moreover, the free array is cleared to
          prevent further allocation from a presumably  corrupted
          free list.
          
          The free list for each volume is maintained as follows.
          The   free   array   contains,   in   ffrreeee[[11]],,   ......  ,,
          ffrreeee[[nnffrreeee--11]],, up to 99 numbers of free blocks. FFrreeee[[00]]
          is the block number of the head of a  chain  of  blocks
          constituting  the  free  list.  The  first word in each
          free-chain  block  is  the  number  (up  to   100)   of
          free-block  numbers listed in the next 100 words of the
          chain member. The first of these 100 blocks is the link
          to the next member of the chain.




                               -1-




filesystem (5)               3/15/82               filesystem (5)


          To allocate a block: decrement nnffrreeee and the new  block
          is ffrreeee[[nnffrreeee]]..
          
          If  the new block number is 0, there are no blocks left
          and an error is given.
          
          If nnffrreeee becomes 0, read in the block named by the  new
          block number, replace nnffrreeee by its first word, and copy
          the  block  number  in the next 100 words into the ffrreeee
          array.
          
          To free a block, check if nnffrreeee is  100;  if  so,  copy
          nnffrreeee and the ffrreeee array into it, write it out, and set
          nnffrreeee to 0.
          
          In  any  event,  set nnffrreeee[[nnffrreeee]] to the freed blocks's
          number and increment nnffrreeee..

          NNiinnooddee is the number of free  i-numbers  in  the  inode
          array. To allocate an i-node: If nniinnooddee is greater than
          0, decrement it and return iinnooddee[[nniinnooddee]]..
          
          If  nniinnooddee = 0, read the i-list and place the number of
          all free inodes (up to 100) into the iinnooddee array,  then
          try  again.  To free an i-node, provided nniinnooddee is less
          than 100,  place  its  number  into  iinnooddee[[nniinnooddee]]  and
          increment nniinnooddee..
          
          If  nniinnooddee  is  already 100, do not bother to enter the
          freed i-node into any table. This list  of  i-nodes  is
          used  only  to  speed  up  the  allocation process; the
          information as to whether the inode is really  free  or
          not is maintained in the inode itself.

          FFlloocckk  and  iilloocckk are flags maintained in the core copy
          of the file system while it is mounted; their values on
          disk are immaterial. The  value  of  ffmmoodd  on  disk  is
          likewise  immaterial;  it is used as a flag to indicate
          that the super-block has changed and should  be  copied
          to  the  disk  during  the next periodic update of file
          system information.

          TTiimmee is the last  time  the  super-block  of  the  file
          system  was changed and is a long representation of the
          number of seconds  that  have  elapsed  since  midnight
          January  1st  1970  (GMT). During a reboot, the time of
          the super-block for the root file system is used to set
          the system's idea of the time.

          II--nnuummbbeerrss begin at 1 and the storage for i-nodes begins
          in block 2. Also, i-nodes are 32 bytes long, so  16  of
          them  fit  into a block. Therefore, i-node ii is located
          in block ((ii ++ 3311)) // 1166,, and begins 3322 ** ((((ii ++ 3311))  ((mmoodd
          1166)))) bytes form its start. I-node 1 is reserved for the


                               -2-




filesystem (5)               3/15/82               filesystem (5)


          root  directory  of  the  file  system,  but  no  other
          i-number has a built-in meaning. Each i-node represents
          one file. The format of an i-node is as follows.

          ssttrruucctt
                {{
                iinntt     ffllaaggss;;
                cchhaarr    nnlliinnkkss,,
                        uuiidd,,

                        ggiidd,,
                        ssiizzee00;;

                iinntt     ssiizzee11,,
                        aaddddrr[[88]],,

                lloonngg    aaccttiimmee,,
                        mmooddttiimmee;;
                }};;


          The flags are as follows:

          110000000000        ii--nnooddee iiss aallllooccaatteedd
          006600000000        22--bbiitt ffiillee ttyyppee::
                000000000000  ppllaaiinn ffiillee
                004400000000  ddiirreeccttoorryy
                002200000000  cchhaarraacctteerr--ttyyppee ssppeecciiaall ffiillee
                006600000000  bblloocckk--ttyyppee ssppeecciiaall ffiillee

          001100000000        llaarrggee ffiillee
          000044000000        sseett uusseerr--IIDD oonn eexxeeccuuttiioonn
          000022000000        iiggnnoorreedd
          000000440000        rreeaadd ppeerrmmiissssiioonn ffoorr oowwnneerr
          000000220000        wwrriittee ppeerrmmiissssiioonn ffoorr oowwnneerr
          000000110000        eexxeeccuuttee ppeerrmmiissssiioonn ffoorr oowwnneerr
          000000007700        rreeaadd,, wwrriittee,, eexxeeccuuttee ppeerrmmiissssiioonn ffoorr ggrroouupp
          000000000077        rreeaadd,, wwrriittee,, eexxeeccuuttee ppeerrmmiissssiioonn ffoorr ootthheerrss

          Special files are recognized by  their  flags,  not  by
          i-number.
          
          A  block-type special file is one which can potentially
          be mounted as a file system, a  character-type  special
          file    cannot,    though   it   is   not   necessarily
          character-oriented. For special files the high byte  of
          the first address word specifies the type of device and
          the  low  byte specifies one of several devices of that
          type. The device type numbers of  block  and  character
          special files overlap.
          
          The  address  words  of  ordinary files and directories
          contain the number of the blocks in the file (if it  is
          small) or the number of indirect blocks (if the file is


                               -3-




filesystem (5)               3/15/82               filesystem (5)


          large). Byte number NN of a file is accessed as follows:
          NN  is  divided by 512 to find its logical block number,
          use bb as an example, in the file. If the file is  small
          ((ffllaagg  001100000000  iiss  00)),,  bb  must be less than 88,, and the
          physical block number is aaddddrr[[bb]]..
          
          If the file is large, bb is divided by 256 to  yield  ii..
          If ii is less than 77,, then aaddddrr[[ii]] is the physical block
          number  of  the  indirect block. The remainder from the
          division yields the word in the  indirect  block  which
          contains the number of the block for the sought byte.

          If ii is equal to 77,, the file has become extra large and
          aaddddrr[[77]]  is the address of a first indirect block. Each
          word in this block is the  number  of  a  second  level
          indirect  block; each word in the second-level indirect
          blocks points to a data block. Notice that large  files
          are  not  marked by any mode bit, but by having aaddddrr[[77]]
          non-zero. Even though this scheme allows for more  than
          33,554,432 (256 X 256 X 512) bytes per file, the length
          of  files is stored in 24 bits. In practice, a file can
          be at most 16,777,216 bytes long.
          
          For block bb in a file to exist,  it  is  not  necessary
          that  all blocks less than bb exist. A zero block number
          in either  address  words  of  the  i-node,  or  in  an
          indirect  block, indicates that the corresponding block
          has never been allocated. This type  of  missing  block
          reads as if it contained all zero words.


     SSEEEE AALLSSOO
          icheck (1), dcheck (1), fsck (1)




                               -4-


