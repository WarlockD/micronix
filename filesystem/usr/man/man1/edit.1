.he "edit (1)                     3/18/82                     edit (1)"
.fo "                               -#-"
.in 5
.rm 65
.bd 
PROGRAM
.br
.in +5
.bd
edit
- text editor
.sp 2
.in -5
.sp 
.bd
USAGE       
.br
.in +5
.bd
edit [file]


.in -5
.bd
FUNCTION   
.br
.in +5
.bd
Edit
is a line-oriented text editor which
operates on a temporary
.ul
copy
of the file it is editing so that changes made have no effect
on the file until a w(rite) command is issued.
The copy of the text being edited resides in a temporary file called
the 
.ul
buffer.
.sp
Commands to edit have a simple and regular structure:
zero or more addresses followed by a single command character, 
possibly followed by parameters to the command.
Missing addresses are supplied by default.
Certain commands allow the addition of text to the buffer
(i - insert, c - change, a - append, etc., see below).
Input governed by these commands is merely collected; no 
additional commands are recognized in this mode.

To get back to normal command mode, type a period (.)
alone at the
beginning of a line.
.sp
.bd
Edit
supports a limited form of regular expression notation.
A
.ul
regular expression
is used in commands and addresses to refer to patterns in the text.
Following are the specifications for regular expressions:
.sp
.in +10
.ta 10
.ti -10
1.	Any character except a special character matches itself.
These are the regular expression delimiters: 
.bd
{ }, 
.bd
[ ], 
.bd
?, 
and sometimes
.bd
%, *, 
and 
.bd
$.
.sp
.ti -10
2.	A 
.bd
? 
matches any character (except newline).
.sp
.ti -10
3.	A 
.bd
@ 
followed by any character except 
.bd
( 
or
.bd 
) 
matches that character.
.sp
.ti -10
4.	A string enclosed in 
.bd
[ 
and 
.bd
] 
(or 
.bd
[^ 
and 
.bd
] 
) matches any character in, or not in, the set consisting of 
the characters of the string
(example: [abc] matches a, b, or c).
If a substring of the form
.bd
a-b
with 
.bd
a 
and 
.bd
b 
letters or digits within the brackets, it is understood to mean
the set of characters spanned by the two limits.
(Examples: [0-9] matches any digit; [a-zA-Z] matches any upper or lower
letters.)
.sp
.ti -10
5.	A regular expression of forms 1-4 followed by 
.bd
* 
matches a contiguous run of 0 or more occurrences of the preceding
regular expression. (Examples: 
.bd
* 
matches any number of spaces (including zero);
.bd
?* 
matches the entire line (any number of occurrences of
any character).
.sp
.ti -10
6.	A regular expression enclosed in 
.bd
{ 
and 
.bd
} 
matches what the regular expression matches.  [It also has side effects -
see the 
.bd
s 
- (substitute) command below.]
.sp
.ti -10
7.	The concatenation of regular expressions matches the concatenation
of what is matched.
.sp
.ti -10
8.	A 
.bd
% 
as the first character of a regular expression
restricts matches to the left end of the line.  A
.bd
$ 
as the last character similarly limits
matches to the right end of the line.
.sp
.ti  -10
9.	A regular expression matches the longest among the left-most
of possible matches.
.sp
.ti -9
10.	An empty regular expression stands for a copy of the last
regular expression encountered.
.sp 3
.in -10
To understand addressing in
.bd
edit,
you need to know that at any time, 
.bd
edit 
remembers a 
.ul
current line.
In general, the current line is set to the last line
affected by the previous line.
The current line is initially set to the last line of the file.
Addresses are constructed as follows:
.sp
.in +4
A 
.bd
(.) 
addresses the current line.
.sp
A 
.bd
$ 
addresses the last line.
.sp
A decimal number (n)
addresses the nth line of the buffer.
.sp
A regular expression enclosed in 
.bd
/ 
addresses the line
found by searching 
.ul
forward 
from the current line for the first line,
which is matched by the regular expression.
If necessary, the search wraps around to the beginning of the buffer.
.sp
A regular expression enclosed in 
.bd
\ 
addresses
the line as above, except that search is
.ul
backwards
through the file.
.sp
Two addresses separated by a  
.bd
+ 
or
.bd 
- 
addresses the line in the buffer which is the
sum (or difference) of the two addresses.
(Example: 2+1 addresses the third line of the buffer.)
.sp
If an address begins with 
.bd
+ 
or
.bd 
-, 
addition or subtraction
is taken with respect to the current line (i.e,  
-5 is equivalent to .-5).
.sp
An address consisting entirely of minus signs or entirely of plus signs
is taken to mean the line forward or behind the current line
by as many lines as plus or minus signs.  
(Example:  "--" addresses the line before last.)
.sp 3
.in -4
Commands may require  one, two or no addresses. 
Commands which require no addresses regard the presence of an address 
as an error.
Commands which accept addresses assume default addresses
if too few addresses are given.
.sp
Addresses are separated by a 
.bd
,.
The second address of a two address sequence must correspond to 
the following line.
(Example: 3,2 is an illegal address list.) A
.bd
% 
is shorthand for 
.bd
1,$.
.sp
In the following list of 
.bd
edit
commands, the default addresses are shown in parentheses.
The parentheses are not part of the address, but are
used to show that the given addresses are the defaults.
Most commands may be followed by a "p" meaning
that the line is to be printed after the operation is performed.
With many commands this happens automatically.
.bp
.nf
.bd
(.) a
.bd
<text>
.bd
(.)
.fi
.sp
.in +4
The given text (which may be excessively long and/or
consist of many lines)
is a(ppended) after the present line and before the next line if there is 
one.
0 is legal as an address for this command; the text is placed at
the beginning of the buffer.
.nf
.sp 2
.in -4
.bd
(.,.) c
.bd
<text>
.bd
(.)
.fi
.sp
.in +4
The c(hange) command first deletes the addressed lines,
then accepts text which replaces these lines.
.nf
.sp 2
.in -4
.bd
(.,.) d
.bd
<text>
.bd
(.)
.fi

.in +4
The addressed lines are d(eleted) from the buffer.
(Example: 1,$d completely erases the buffer.)
.sp 2
.ti -4
.bd
e[!] [filename]
.br

The e(nter) command causes the entire contents of the buffer to
be deleted, then the named file to be read in.
If you are finished editing one file and wish to switch
to another, use 
.bd
enter.
If the file you  are presently  working on has not been
written, a diagnostic is printed.
This is intended to reduce the possibility
of accidental loss of work.
The optional exclamation point overrides this safety feature.
.sp 2
.ti -4
.bd
f [filename]
.br

The remembered f(ilename) is printed.  If a filename is 
given, the remembered filename is changed to it.
.bp
.ti -4
.bd
(1,$) g/regular expression/command
.br

G(lobal).  First, every line in the buffer matching the regular 
expression is marked.  Then for each marked line, the command is 
executed with 
.bd
(.) 
initially set to that line.
.sp 2
.in -4
.bd
(.) i
.bd
<text>
.bd
(.)
.in +4
.fi

The given text is i(nserted) just before the addressed line.
This command differs from 
.bd
append 
(above) only in the placement of the text.
.sp 2
.ti  -4
.bd
(.,.+1) j
.br

The j(oin) command joins the addressed lines into a single line.
In any case, an additional space is inserted between the text of the 
formerly separate lines.
.sp 2
.ti -4
.bd
(.,.) l
.br

The addressed lines are l(isted)
in an unambiguous way.
Control characters are
displayed as a caret ("^") followed by the upper case letter
corresponding to the control character.
Dirty characters (with the sign bit set) are displayed as
three-digit octal preceded by a back slashes ("\").
.sp 2
.ti -4
.bd
(.,.) m a
.br

The m(ove) command repositions the addressed lines after the line
referred to by the address "a".
.sp 2
.ti -4
.bd
n[!]
.br

Edit the n(ext) file, if any, in the argument list.
This is an easy way to edit a group of files
without having to remember all their names yourself.
If the exclamation point is given, the command is forced.
(Example: edit a b c d e; ...  n  ... n ...)
.bp
.ti -4
.bd
(.,.) p[l][=]
.br

The addressed lines are p(rinted) in the specified format.
The "l" means to print in the manner described in the "l" command
(above).  The
.bd
= 
means to number the lines.
Note that the printing format remains in effect until it is changed again.
.sp 2
.ti -4
.bd
q[!]
.br

Use the q(uit) command to terminate an editing session.
No automatic write of the file is done.
A diagnostic is printed if the buffer has been changed since the last write
command. 
This feature offers some degree of protection against accidental loss of work.
The optional exclamation point immediately following
the "q" overrides this safety feature,
(i.e., quit impetuously).
.sp 2
.ti -4
.bd
(.)r [filename]
.br

The r(ead) command reads in the named file after the addressed line.
If no filename is given, the remembered filename is used.
The filename is remembered if there is as yet no remembered filename.
Address "0" is legal for this command and causes the named file
to be read in at the beginning of the buffer.
.sp 2
.ti -4
.bd
(.,.)s/regular expression/replacement/[g]
.br

In the s(ubstitute) command, each addressed line is searched for 
strings matching the regular expression.
An optional "g" (global) may follow the substitute command.
In the presence of a "g" all occurrences of matched strings
are replaced by the given replacement text.
In the absence of a "g" only the first matched string in each
line is replaced.
It is an error for the substitution to fail on all addressed lines.
.sp
An 
.bd
& 
appearing in the replacement text is replaced by the string
matching the regular expression.
(Example: s/toves/slithy &/  would change "toves" into "slithy toves".)
.bd
@n 
where it is a digit (1 through 9)  is replaced by the nth regular
subexpression enclosed in 
.bd
} 
and 
.bd
{.
When nest parenthesized regular sub-expressions are present, n is 
determined by counting occurrences of 
.bd
{ 
starting from the left.

These regular sub-expressions tagged by number can be extremely useful
in automating otherwise impossible editing tasks.
(Example:
.bd
s/{[A-Z][a-z]*}, {[A-Z][a-z]*}/@2,@1/
would convert a list of people's names from:
"lastname, firstname" to "firstname lastname".)

Lines may be split by substituting newline characters into them.
.bd
@n 
in the replacement pattern is understood to mean newline.

If no replacement pattern is given, the previous replacement pattern
is used, (i.e., "s/pattern").

If neither pattern is given, then the previous substitute command
is re-executed, (i.e., "s").
This feature saves a lot of time.
.sp 2
.ti -4
.bd
(.,.)t a
.br

The t(ranscribe) command works exactly like the 
.bd
move 
command, except that a copy of the addressed lines is placed after the
line corresponding to address "a".
.sp 2
.ti -4
.bd
u
.br
.bd
Undo
previous command; only works if file is still in buffer.
.sp 2
.ti -4
.bd
(1,$) w[!] [filename]
.br
The addressed lines are w(ritten) onto the named file.
If no file name is given, the remembered name, if any, is used.
If the named file exists and is not the remembered file,
a diagnostic is printed.  This is intended to 
prevent accidental overwriting of valuable files.
The optional exclamation  point immediately following
the write command character suppresses this safety feature.
.sp 2
.ti -4
.bd
(1,$) x/regular expression/command
.br

Exactly like the global command (above) except that
all lines
.ul
not
matching the regular expression are affected.
.bp
.ti  -4
.bd
(.+1) z [N]
.br

Print the next 
.bd
n 
lines (default 22).
The value 
.bd
n 
is sticky, in that it becomes the default value for 
future scroll commands.
This command is quite useful for marching your way
through text.
.sp 2
.ti -4
.bd
($) =[l]
.br

Lines are printed with line number.
If [l] is given, then the line is additionally printed in the 
style described in the "l" command (above).  Lines are printed 
out with numbers until the "=" sign is entered again.
.sp 2
.ti -4
.bd
< file
.br

The named file is read as further input for edit.
The command may contain further 
.bd
< 
commands.
.sp 2
.ti -4
.bd
(.+1,.+1) <newline>
.br

An address alone on a line causes the text of the addressed line
to be printed.
A blank line alone is equivalent to 
.bd
.+1p 
and is useful for
stepping through text.


.in -5
.bd
NOTES
.br
.in +5
Sending a ^C character to 
.bd
edit 
under CP/M (Digital Research)
will cause your work to be ungracefully lost (but this is not a
problem under Micronix).


.in -5
.bd
SEE ALSO
.br
.in +5
Kernighan, Brian W. and P.J. Plauger,
.ul
Software Tools, 
(Addison-Wesley, 1976). 
                                                       
