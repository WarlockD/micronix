.he "cpp (1)                      4/13/82                      cpp (1)"
.fo "                               -#-"
.in 5
.rm 65
.bd 
PROGRAM
.in +5
.br
.bd
cpp - 
preprocess defines and includes


.in -5
.bd
USAGE       
.in +5
.br
.bd
cpp <flags > <files>


.in -5
.bd
FUNCTION
.in +5
.br
.bd
Pp 
is the preprocessor used by the C compiler, to perform 
.bd
#define, #include, 
and other functions signaled by a 
.bd
# 
before actual compilation begins.
It can be used to advantage, however, with most language processors.
The flag options are:

.in +10
.ta 10
.ti -10
-c	Do not strip out
.bd
/* comments */ 
nor continue lines that end with 
.bd
\.

.ti -11
-dname	Define name; if the definition string (=def) is included, it
reads it in before the input; if "=def" 
is omitted, the definition is taken as "1".  The "name" and 
"=def" must be in the same argument - no blanks are permitted
unless the argument is quoted.  Up to ten definitions may be 
entered in this fashion.
.sp
.ti -10
-i 	Change the prefix used with
.bd
#include <file name> 
from the default ("") to the string prefix.  Multiple prefixes
to be tried in any order may be specified, separated by the "|"
character.

.ti -10
-o     	<File> can be specified with flag.  Writes the output to the 
specified file and writes error messages to STDOUT.
Default is STDOUT for output and STDERR for error
messages.
On many systems, the 
.bd
-o 
option is mandatory with 
.bd
-x
because STDOUT is interpreted as a text file, and hence becomes corrupted.

.ti -10
-p?	Change the preprocessor control character from
.bd
# 
to 
.bd
?.

.ti -10
-s?	Change the secondary preprocessor control character from
.bd
@
to 
.bd
?.

.ti -10
-x	Put out lexemes for input to the C compiler 
.bd
cp1,
not lines of text.

.ti -10
-6	Put out extra newlines and/or SOH ('\') codes to
keep source line numbers
correct for UNIX/V6 compiler or ptc.

.in -10
.bd
Cpp 
processes the named file, or STDIN if none is named,
in the order specified,
writing the resultant text to STDOUT.
Preprocessor actions are described in detail in the
Preprocessor section of the C Compiler User's Manual.  The 
presence of a secondary preprocessor control character 
permits two
levels of parameterization.
For instance, the invocation
.sp
.ce
.bd
cpp -c -p@
.sp
will expand 
.bd
define 
and 
.bd
ifdef 
conditionals, leaving all 
.bd
# 
commands and
comments intact.  Invoking 
.bd
cpp 
with no arguments would expand both 
.bd
@ 
and 
.bd
# 
commands.  The flag, 
.bd
-s#, 
effectively disables the secondary control character.


.in -5
.bd
EXAMPLE
.in +5
.br
The standard for writing C programs is
.sp
.nf
.bd 8
        /* name of program
         */
	#include <std.h>

	# define MAXN	100

	COUNT things[MAXN];
	etc.
.fi
.sp
The use of uppercase identifiers is not required by 
.bd
cpp,
but is strongly recommended to distinguish parameters
from normal program identifiers and keywords.


.in -5
.bd
NOTES
.in +5
.br
Unbalanced quotes (' or ") may not occur in a line, even in
the absence of the -x flag.  Flotaing constants longer than 38
digits may compile incorrectly on some host machines.


.in -5
.bd
SEE ALSO
.in +5
.br
cp1 (1), ptc (1)
.br
Micronix C and Pascal manual
.br
