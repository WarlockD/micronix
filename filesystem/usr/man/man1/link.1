.he "link (1)                     4/14/82                     link (1)"
.fo "                               -#-"
.in 5
.rm 65
.bd
PROGRAM
.in +5
.bd
link
- combine object files
.sp 2
.in -5
.bd
USAGE
.in +5
.br
link -[flags] <files>
.sp 2
.in -5
.bd
FUNCTION
.in +5
.br
.bd
Link
combines relocatable object files in standard format for any target
machine, selectively loading from libraries of such files made
with
.bd
lib,
to create an executable image for
stand-alone execution, or for input to other binary reformatters.

The flags are:

.in +5
.ta 5
.ti -5
-a	Make all relocation items and all symbols absolute.  Used
to prerelocate code that will be linked elsewhere, and is not to be
relocated.

.ti -5
-c	Suppress code output (.text and .data), and make all symbols
absolute.  Used to make a module that only defines symbol values for
specifying addresses in shared libraries, etc.

.ti -4
-db##	Set data bias to the long integer ##. Default is end of
text section, rounded up to required storage boundary for the 
target machine.

.ti -5
-dr#	Round data bias up to ensure that there are at least #
low-order binary zeros in its value. Ignored if -db## is specified.

.ti -5
-d	Do not define bss symbols, and do not complain about undefined
symbols.  Used for partial links, i.e., if the output module is to
be input to
.bd
link.

.ti -5
-eb*	If the symbol * is referenced, make it equal to the first unused
location past the bss area.
.bp
.ti -5
ed*	If the symbol * is referenced, make it equal to the first
unused location past the initialized data area.

.ti -5
et*	If the symbol * is referenced, make it equal to the first
unused location past the text area.

.ti -5
-h	Suppress headers in output file.  This should be specified
only for stand-alone modules such as bootstraps.

.ti -5
-l*	Append library name to the end of the list of files to
be linked, where the library name is formed by appending * to "/lib/lib".
Up to ten such names may be
specified as flags; they are appended in the order specified.

.ti -5
-o*	Write output module to file *. Default is xeq.

.ti -5
-r	Suppress relocation bits.  This should not be specified if
the output module is to be input to 
.bd
link. 

.ti -5
-tb##	Set text bias to the long integer ##.  Default is location zero.

.ti -5
-t	Suppress symbol table.  This should not be specified if the output
module is to be input to
.bd
link.

.ti -5
-u*	Enter the symbol * into the symbol table as an undefined
public reference, usually to force loading of selected modules from
a library.

.ti -5
-x*	Specify placement in the output module of the input .text and
.data sections.  The 2-weighted bit of # routes .text input, the
1-weighted bit, .data.  If either bit is set, the corresponding
sections are put in the text segment output; otherwise they go in the
data segment.  The default value used, predictably, is 2.

.in -5
The bss section is always assumed to follow the data section in
both the input and output files.  It is perfectly permissible for text
and data sections to overlap, as far as 
.bd
link
is concerned; the target machine may or may not make sense of this
situation (as with separate instruction and data spaces).

The specified <files> are linked in order; if a file is in library
format, it is searched once from start to end.  Only those library
modules are included which define public symbols for which there are
currently outstanding unsatisfied references.  Hence, libraries
must be carefully ordered, or rescanned, to ensure that all 
references are resolved.  By special dispensation, flags of the form "-1*"
may be interspersed among <files>.  These call for the corresponding
libraries to be searched at the points specified in the list of files.
No space may occur after the "-1", in this usage.

.ul
File Format

A relocatable object image consists of a header followed by a text
segment, a data segment, the symbol table, and relocation information.

The header consists of an identification byte 0x99, a configuration
byte, a short unsigned int containing the number of symbol table bytes,
and six unsigned ints giving: the number of bytes of object code
defined by the text segment, the number of bytes needed by the bss
segment, the number of bytes needed for stack plus heap, the text segment
offset.  Byte order and size of all ints in the header are
determined by the configuration byte.

The configuration byte contains all information needed to fully
represent
the header and remaining information in the file.  Its value val
defines the following fields: ((val & 07) << 1) + 1 is the number
of characters in the symbol table name field, so that values [0, 8) 
provide for odd lengths
in the range [1, 15].  If (val & 010) then ints are four bytes;
otherwise they are two bytes.  If (val * 020) then ints are
represented least significant byte first, otherwise most 
significant byte first; order is assumed purely ascending or
purely descending. (val & 0140) >> 5 is the strongest for bounds
that are multiples of 0, 2, 4, 8 bytes.  If (val & 0200) no relocation
information is present in this file.

Relocation information consists of two successive byte streams, one
for the text segment and one for the data segment, each terminated by a zero
control byte.  Control bytes in the range [1, 31] cause that many bytes
in the corresponding segment to be skipped; bytes in the range [32, 63]
skip 32 bytes, plus 256 times the control byte minus 32, plus the
number of bytes specified by the relocation byte following.

All other control bytes control relocation of the next short or long
int in the corresponding segment. If the 1-weighted bit is set in
such a control byte, then a change in load bias must be subtracted
from the int.  The 2-weighted bit is set if a long int is
being relocated instead of a short int.  The value of the control byte 
right-shifted two places, minus 16, constitutes a "symbol code".

A symbol code of 47 is replaced by a code obtained from the byte
or bytes following in the relocation stream.  If the next byte is less than
128, the symbol code is its value plus 47.  Otherwise, the code is
that byte minus 128, times 256, plus 175 plus the value of the next
relocation byte after that one.

A symbol code of zero calls for no further relocation; 1 means that a
change in the text bias must be added; 3 means that a change in bss
bias must be added.  Other symbol codes call for the value symbol
table entry indexed by the symbol code minus 4 to be added to the
item.

Each symbol table entry consists of a value int, a flag byte, and a
name padded with trailing NULLs.  Meaningful flag values are o for
undefined, 4 for defined absolute, 5 for defined text relative, 6
for defined data relative, and 7 for defined bss relative.  To this
is added 010 if the symbol is to be globally known.  If a symbol still
undefined after linking has a non-zero value, 
.bd
link
assigns the symbol a unique area, in the bss segment, whose length
is specified by the value, and considers the symbol defined.  This
occurs only if -d has not been given.
.sp 2
.in -5
.bd
RETURNS
.in +5
.bd
Link
returns success if no error messages are printed to STDOUT, that is,
if no undefined symbols remain and if all reads and writes succeed;
otherwise, it returns failure.
.sp 2
.in -5
.bd
EXAMPLE
.in +5
.br
To load the C program echo.o 
with separate I/D spaces for Micronix (UNIX/V6):
.sp
.ti +5
.bd
% link -1c.11 -rt -db0 /lib/Crts.o echo.o; taout

or with read-only text section:
.sp
.ti +5
.bd
% link -1c.11 -rt -dr13 /lib/Crts.o echo.o; taout
.bp
And to load the 8080 version of echo under CP/M:
.sp
.nf
.bd
A:link -hrt -tb0x0100 a:chdr.o echo.o a:clib.a a:mlib.a
.sp 2
.fi
.in -5
.bd
SEE ALSO
.in +5
.br
hex (1), lib (1), lord (1), obj (1), cc (1), as (1), cp1 (1),
cp2 (1), cpp (1)       

NOTE: This program and documentation are products of Whitesmiths, Ltd.,
