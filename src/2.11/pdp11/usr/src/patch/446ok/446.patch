*** /usr/src/sys/pdpuba/rk.c.old	Sat Jan 18 16:44:45 1997
--- /usr/src/sys/pdpuba/rk.c	Sat Dec 27 17:22:21 2008
***************
*** 43,48 ****
--- 43,55 ----
  					*/
  #endif
  
+ /* added rkroot() to support RK11 based systems (2008-12-14,wfjm) */
+ 
+ rkroot()
+ {
+ 	rkattach((struct rkdevice *)0177400, 0);
+ }
+ 
  rkattach(addr, unit)
  struct rkdevice *addr;
  {
*** /usr/src/sys/conf/boot/rmboot.s.old	Fri Apr 19 21:03:43 1991
--- /usr/src/sys/conf/boot/rmboot.s	Sat Dec 27 17:27:04 2008
***************
*** 50,56 ****
  /  Otherwise, use a BOOT opcode, if available;
  /  if necessary, read in block 0 to location 0 "by hand".
  
! / rm02/3/5 bootstrap - salkind@nyu
  
  WC	= -256.
  READ	= 70
--- 50,56 ----
  /  Otherwise, use a BOOT opcode, if available;
  /  if necessary, read in block 0 to location 0 "by hand".
  
! / rm02/3/5 rp06 bootstrap - salkind@nyu
  
  WC	= -256.
  READ	= 70
*** /usr/src/sys/conf/boot/rkboot.s.old	Sat Dec 27 17:28:29 2008
--- /usr/src/sys/conf/boot/rkboot.s	Fri Dec 26 12:51:47 2008
***************
*** 0 ****
--- 1,77 ----
+ /*
+  *	SCCS id	@(#)rkboot.s	1.0 (2.11BSD)	12/26/2008
+  */
+ #include "localopts.h"
+ 
+ /  The boot options and device are placed in the last SZFLAGS bytes
+ /  at the end of core for the bootstrap.
+ ENDCORE=	160000		/ end of core, mem. management off
+ SZFLAGS=	6		/ size of boot flags
+ BOOTOPTS=	2		/ location of options, bytes below ENDCORE
+ BOOTDEV=	4		/ boot unit
+ CHECKWORD=	6
+ 
+ .globl	_doboot, hardboot, _bootcsr
+ .text
+ _doboot:
+ 	mov	4(sp),r4	/ boot options
+ 	mov	2(sp),r3	/ boot device
+ 
+ #ifndef	KERN_NONSEP
+ /  If running separate I/D, need to turn off memory management.
+ /  Call the routine unmap in low text, after setting up a jump
+ /  in low data where the PC will be pointing.
+ .globl	unmap
+ 	mov	$137,*$unmap+2		/ jmp *$hardboot
+ 	mov	$hardboot,*$unmap+4
+ 	jmp	unmap
+ 	/ "return" from unmap will be to hardboot in data
+ .data
+ #else
+ /  Reset to turn off memory management
+ 	reset
+ #endif
+ 
+ /  On power fail, hardboot is the entry point (map is already off)
+ /  and the args are in r4 (RB_POWRFAIL), r3 (rootdev)
+ 
+ hardboot:
+ 	mov	r4, ENDCORE-BOOTOPTS
+ 	ash	$-3,r3		/ shift out the partition number
+ 	bic	$!7,r3		/ save only the drive number
+ 	mov	r3, ENDCORE-BOOTDEV
+ 	com	r4		/ if CHECKWORD == ~bootopts, flags are believed
+ 	mov	r4, ENDCORE-CHECKWORD
+ 1:
+ 	reset
+ 
+ /  The remainder of the code is dependent on the boot device.
+ /  If you have a bootstrap ROM, just jump to the correct entry.
+ /  Otherwise, use a BOOT opcode, if available;
+ /  if necessary, read in block 0 to location 0 "by hand".
+ 
+ / Bootstrap for rk05 drive - wfjm
+ 
+ WC = -256.
+ 
+ rkcs =  4	/ offset from base csr: control & status
+ rkda = 12	/ desired disk address
+ 
+ / RK05 constants.
+ iocom = 005	/ read + go
+ 
+ / initialize rk
+ 
+ 	mov	_bootcsr,r1	/ bootcsr points to rkcs
+ 	add	$rkda-rkcs,r1	/ r1 -> rkda
+ 	mov	ENDCORE-BOOTDEV,r2	/ drive number
+ 	ash	$13,r2		/ drsel is in bits 15:13
+ 	mov	r2,(r1)		/ setup rkda (disk address)
+ 	clr	-(r1)		/ clear rkba (memory address)
+ 	mov	$WC,-(r1)	/ setup rkwc (transfer length)
+ 	mov	$iocom,-(r1)	/ issue read+go
+ 
+ 1:	tstb	(r1)
+ 	bge	1b		/ wait for iocom to complete
+ 	mov	ENDCORE-BOOTDEV,r0
+ 	clr	pc
*** /usr/src/sys/conf/GENERIC.old	Sat Oct 13 18:20:02 2001
--- /usr/src/sys/conf/GENERIC	Sat Dec 27 17:17:24 2008
***************
*** 52,59 ****
  #BOOTDEV	hk6			# rk06 boot device
  #BOOTDEV	hk7			# rk07 boot device
  #BOOTDEV	ra			# MSCP boot device
  #BOOTDEV	rl			# rl01/02 boot device
! #BOOTDEV	rm			# rm02/03/05 boot device
  #BOOTDEV	br			# Eaton BR1537/BR1711 boot device
  #BOOTDEV	sc11			# Emulex SC11/B boot device
  #BOOTDEV	sc21			# Emulex SC21 boot device
--- 52,60 ----
  #BOOTDEV	hk6			# rk06 boot device
  #BOOTDEV	hk7			# rk07 boot device
  #BOOTDEV	ra			# MSCP boot device
+ #BOOTDEV	rk			# rk05 boot device
  #BOOTDEV	rl			# rl01/02 boot device
! #BOOTDEV	rm			# rm02/03/05 rp06 boot device
  #BOOTDEV	br			# Eaton BR1537/BR1711 boot device
  #BOOTDEV	sc11			# Emulex SC11/B boot device
  #BOOTDEV	sc21			# Emulex SC21 boot device
*** /usr/src/sys/conf/NONET.old	Wed Nov 22 21:26:15 1995
--- /usr/src/sys/conf/NONET	Sat Dec 27 17:19:22 2008
***************
*** 50,57 ****
  #BOOTDEV	hk6			# rk06 boot device
  #BOOTDEV	hk7			# rk07 boot device
  BOOTDEV		ra			# MSCP boot device
  #BOOTDEV	rl			# rl01/02 boot device
! #BOOTDEV	rm			# rm02/03/05 boot device
  #BOOTDEV	br			# Eaton BR1537/BR1711 boot device
  #BOOTDEV	sc11			# Emulex SC11/B boot device
  #BOOTDEV	sc21			# Emulex SC21 boot device
--- 50,58 ----
  #BOOTDEV	hk6			# rk06 boot device
  #BOOTDEV	hk7			# rk07 boot device
  BOOTDEV		ra			# MSCP boot device
+ #BOOTDEV	rk			# rk05 boot device
  #BOOTDEV	rl			# rl01/02 boot device
! #BOOTDEV	rm			# rm02/03/05 rp06 boot device
  #BOOTDEV	br			# Eaton BR1537/BR1711 boot device
  #BOOTDEV	sc11			# Emulex SC11/B boot device
  #BOOTDEV	sc21			# Emulex SC21 boot device
*** /usr/src/sys/autoconfig/rkauto.c.old	Wed Dec 30 17:56:32 1992
--- /usr/src/sys/autoconfig/rkauto.c	Sat Dec 27 17:25:32 2008
***************
*** 16,23 ****
--- 16,39 ----
  	struct rkdevice *addr;
  	int vector;
  {
+ 	extern int errno;
+ 
  	stuff(RKCS_IDE | RKCS_DRESET | RKCS_GO, (&(addr->rkcs)));
  	DELAY(10L);
  	stuff(0, (&(addr->rkcs)));
+ 
+ 	/* in case no drive 0 was attached, the DRESET above will leave
+ 	 * the controller in an error state. The grab below checks for this
+ 	 * and the stuff below executes a RESET (control reset) to clear
+ 	 * the error condition. Without this the first access to any drive
+ 	 * will fail when the system is up.
+ 	 * 2008-12-25 wfjm
+ 	*/
+ 	errno = 0;
+ 	if ((grab(&(addr->rker)) & RKER_DRE) && !errno) {
+ 		stuff(RKCS_RESET | RKCS_GO, (&(addr->rkcs)));
+ 		DELAY(10L);
+ 	}
+ 
  	return(ACP_IFINTR);
  }
*** /usr/src/sys/pdp/conf.c.old	Sat Oct 13 18:20:03 2001
--- /usr/src/sys/pdp/conf.c	Sat Dec 27 17:21:22 2008
***************
*** 23,34 ****
  
  #include "rk.h"
  #if NRK > 0
! int	rkopen(), rkstrategy();
  daddr_t	rksize();
  #define	rkclose		nulldev
  #else
  #define	rkopen		nodev
  #define	rkclose		nodev
  #define	rkstrategy	nodev
  #define	rksize		NULL
  #endif
--- 23,35 ----
  
  #include "rk.h"
  #if NRK > 0
! int	rkopen(), rkroot(), rkstrategy();
  daddr_t	rksize();
  #define	rkclose		nulldev
  #else
  #define	rkopen		nodev
  #define	rkclose		nodev
+ #define rkroot		nulldev
  #define	rkstrategy	nodev
  #define	rksize		NULL
  #endif
***************
*** 192,198 ****
  	raopen,		raclose,	rastrategy,	raroot,		rasize,
  	0,
  /* rk = 6 */
! 	rkopen,		rkclose,	rkstrategy,	nulldev,	rksize,
  	0,
  /* rl = 7 */
  	rlopen,		rlclose,	rlstrategy,	rlroot,		rlsize,
--- 193,199 ----
  	raopen,		raclose,	rastrategy,	raroot,		rasize,
  	0,
  /* rk = 6 */
! 	rkopen,		rkclose,	rkstrategy,	rkroot,		rksize,
  	0,
  /* rl = 7 */
  	rlopen,		rlclose,	rlstrategy,	rlroot,		rlsize,
*** /usr/src/bin/tar.c.old	Tue Oct  3 12:40:03 1989
--- /usr/src/bin/tar.c	Sat Dec 27 17:29:22 2008
***************
*** 55,61 ****
  	ino_t	inum;
  	dev_t	devnum;
  	int	count;
! 	char	pathname[NAMSIZ];
  	struct	linkbuf *nextp;
  };
  
--- 55,61 ----
  	ino_t	inum;
  	dev_t	devnum;
  	int	count;
! 	char	*pathname;
  	struct	linkbuf *nextp;
  };
  
***************
*** 604,615 ****
  			}
  			lp = (struct linkbuf *) getmem(sizeof(*lp));
  			if (lp != NULL) {
! 				lp->nextp = ihead;
! 				ihead = lp;
! 				lp->inum = stbuf.st_ino;
! 				lp->devnum = stbuf.st_dev;
! 				lp->count = stbuf.st_nlink - 1;
! 				strcpy(lp->pathname, longname);
  			}
  		}
  		blocks = (stbuf.st_size + (TBLOCK-1)) / TBLOCK;
--- 604,618 ----
  			}
  			lp = (struct linkbuf *) getmem(sizeof(*lp));
  			if (lp != NULL) {
! 				lp->pathname = getmem(strlen(longname)+1);
! 				if (lp->pathname != NULL) {
! 					lp->nextp = ihead;
! 					ihead = lp;
! 					lp->inum = stbuf.st_ino;
! 					lp->devnum = stbuf.st_dev;
! 					lp->count = stbuf.st_nlink - 1;
! 					strcpy(lp->pathname, longname);
! 				}
  			}
  		}
  		blocks = (stbuf.st_size + (TBLOCK-1)) / TBLOCK;
*** /usr/src/lib/libc/pdp/crt/ulrem.s.old	Sun Jun  6 20:47:00 1993
--- /usr/src/lib/libc/pdp/crt/ulrem.s	Sat Dec 27 17:30:34 2008
***************
*** 6,11 ****
--- 6,12 ----
   *  Version	Date		Modification
   *	0.0	02Feb91		1. Initial inspiration struck.
   *	1.0	05Jun93		2. Released into the Public Domain.
+  *      1.1     23Dec08         Revised, corrected KERNEL (no-FPP) code wfjm
  */
  
  #include "DEFS.h"
***************
*** 56,62 ****
--- 57,105 ----
  #else
  /*
   * ulrem for the kernel (uses only fixed point - no FP)
+  *
+  * uses lrem if lhs and rhs non-negative, otherwise reminder is calculated
+  * 'brute-force' via lhs-(lhs/rhs)*rhs using uldiv and lmul. (wfjm)
  */
+ 
+ 	.globl	ulrem
+ 	.globl	lrem, uldiv, lmul
+ ulrem:
+ ENTRY(ulrem)
+ 	tst	2(sp)		/ hi(lhs)
+ 	bmi	1f		/ if negative, a-(a/b)*b handling
+ 	tst	6(sp)		/ hi(rhs)
+ 	bmi	1f		/ if negative, a-(a/b)*b handling
+ 	jmp	lrem		/ if lhs and rhs >=0, use lrem
+ 
+ 1:	mov	r5,-(sp)	/ need frame pointer
+ 	mov	sp,r5		/ setup frame pointer
+ 	mov	12(r5),-(sp)	/ lo(rhs) for *
+ 	mov	10(r5),-(sp)	/ hi(rhs)
+ 	mov	12(r5),-(sp)	/ lo(rhs) for /
+ 	mov	10(r5),-(sp)	/ hi(rhs)
+ 	mov	6(r5),-(sp)	/ lo(lhs) for /
+ 	mov	4(r5),-(sp)	/ hi(lhs)
+ 	jsr	pc,uldiv	/ do lhs/rhs
+ 	add	$10,sp		/ clean up stack
+ 	mov	r1,-(sp)	/ lo(lhs/rhs)
+ 	mov	r0,-(sp)	/ hi(lhs/rhs)
+ 	jsr	pc,lmul		/ do (lhs/rhs)*rhs
+ 	add	$10,sp		/ clean up stack
+ 	mov	r1,-(sp)	/ lo((lhs/rhs)*rhs))
+ 	mov	r0,-(sp)	/ hi((lhs/rhs)*rhs))
+ 	mov	6(r5),r1	/ lo(lhs)
+ 	mov	4(r5),r0	/ hi(lhs)
+ 	sub	(sp)+,r0	/ hi(lhs-((lhs/rhs)*rhs))
+ 	sub	(sp)+,r1	/ lo(lhs-((lhs/rhs)*rhs))
+ 	sbc	r0		/ handle carry from lo to hi part
+ 	mov	(sp)+,r5	/ restore r5
+ 	rts	pc
+ 
+ #ifdef NEVER
+ /* the old code here for reference and further debugging.
+  * a 1%10 produced a 0 instead of a 1.
+  */ 
  	.globl ulrem
  ulrem:
  ENTRY(ulrem)
***************
*** 131,136 ****
--- 174,180 ----
  	mov	(sp)+,r3
  	mov	(sp)+,r2
  	rts	pc
+ #endif NEVER
  #endif KERNEL
  
  /*
*** /usr/src/sbin/umount/umount.c.old	Tue Jan 16 23:25:05 1996
--- /usr/src/sbin/umount/umount.c	Sat Dec 27 17:29:58 2008
***************
*** 67,73 ****
  	int argc;
  	register char *argv[];
  {
! 	int all, ch, errs;
  
  	/* Start disks transferring immediately. */
  	sync();
--- 67,73 ----
  	int argc;
  	register char *argv[];
  {
! 	int all, ch, errs=0;
  
  	/* Start disks transferring immediately. */
  	sync();
***************
*** 108,114 ****
  		errs = umountall();
  	} else
  		for (errs = 0; *argv != NULL; ++argv)
! 			if (umountfs(*argv) == 0)
  				errs = 1;
  	exit(errs);
  }
--- 108,114 ----
  		errs = umountall();
  	} else
  		for (errs = 0; *argv != NULL; ++argv)
! 			if (umountfs(*argv) != 0)
  				errs = 1;
  	exit(errs);
  }
*** /VERSION.old	Tue Dec 26 14:53:42 2006
--- /VERSION	Sat Dec 27 17:32:05 2008
***************
*** 1,5 ****
! Current Patch Level: 445
! Date: December 26, 2006
  
  2.11 BSD
  ============
--- 1,5 ----
! Current Patch Level: 446
! Date: December 27, 2008
  
  2.11 BSD
  ============
