[1mNAME[0m
     [1mp1gets.c [22m‚Äê input to p1


[1mFUNCTION[0m
     p1gets.c contains the set of functions necessary for passing
     input from pp to p1; and allied functions used for error and
     recovery processing.

     The  neelex  and neestr tables map tokens for which the need
     function call is made, into strings which can be printed  if
     the needed token is not the current one.

     Since the compiler can get ahead of itself while reading in‚Äê
     put for the top down parsing scheme, a stack has  been  pro‚Äê
     vided  to  hold  those  tokens which have been input but not
     eaten by parsing.  The depth of the stack, NTOKQ, is  three;
     this  is more than the compiler should ever need.  The stack
     itself is a stack of TOKENs, which is the form input  takes;
     tokens  are put back onto the stack through one portal, bak‚Äê
     tok, and are taken off the stack only by gettok.  ntoks is 0
     for an empty stack.

     The  modules alt, eat, ident, need, and peek form a constel‚Äê
     lation of input portals.  alt returns the next token in  the
     input  stream,  if  it  matches one of a passed set; the set
     should include a NULL at the end.  eat returns the next  to‚Äê
     ken  in  the  input stream.  ident returns the next token in
     the input stream if it is an identifier or a NULL.  need re‚Äê
     quires the next token to match the token passed.  peek looks
     ahead in the input stream and passes back the  token  if  it
     matches, or a NULL.

     baktok and gettok implement the token stack mechanism.

     error,  nmerr, and recover are the error printing and recov‚Äê
     ery mechanisms.  error and nmerr print:

        [ filename: ] linenumber: message

     for each error.  nmerr prints an identifier name in the  er‚Äê
     ror  message.   recover is necessary to avoid going crazy on
     recognizing bad syntactic forms.  recover  first  prints  an
     error  message and then scans forward until reaching an end‚Äê
     of‚Äêfile, a semicolon, or a  right  curly  bracket.   End‚Äêof‚Äê
     files  and  semicolons  are  put back onto the input stream,
     whereas right curly brackets are consumed.

     gtok actually gets tokens from STDIN.  The current file name
     is  built  dynamically  in  infile; that is, each time a new
     file name is encountered, it is allocated and the  old  name
     is  freed.   End‚Äêof‚Äêfile is recognized on either an explicit
     EOF, or on reading a  null  character.   This  is  required,
     since  some operating systems pad the last block with nulls.
     getint is used throughout to build integers.











