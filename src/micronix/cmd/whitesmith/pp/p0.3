[1mNAME[0m
     [1mpp [22m‐ C compiler preprocessor


[1mFUNCTION[0m
     pp  performs  lexical  analysis  and  all other preprocessor
     functions signalled by lines starting with  #’s.   It  reads
     program text from a set of specified file arguments, or from
     STDIN if none, plus other files  named  in  #include  state‐
     ments,  and writes encoded lexemes to STDOUT, or to the file
     named by a ‐o flag.  Error messages are  labelled  with  the
     current  file and line number and are directed to STDERR, or
     to STDOUT if ‐o is used.

     Its operation is best described as a series of  simple  data
     transforms, to wit:

     [1mgetlin ‐ [22mreads blocks of text from a specified file, return‐
          ing only when an entire text line is in  the  specified
          buffer.

     [1mgetln  ‐  [22muses getlin to build a logical line.  Each /* com‐
          ment */ is replaced by a blank and each line ending  in
          \ is merged with the line following.

     [1mgetin  ‐  [22mkeeps  trying to read a text line from the topmost
          file of the #include stack, popping ended files,  until
          success  or  EOF on the lowest level file.  Calls stotl
          to parse an input text  line  into  a  list  of  tokens
          (identifier,  number,  ’string’,  "string", or punctua‐
          tion), each token list being terminated by a  PEOL  to‐
          ken.

     [1mgetex  ‐ [22midentifies all # lines and performs macro expansion
          on all lines but #ifdef, #ifndef, #define, and  #endif.
          The tests are made for #ifdef and #ifndef.

     [1mmain  ‐  [22mtries  to parse the entire input as an #if ‐ #endif
          balanced group ending in EOF.  It complains and retries
          on unexpected #else or #endif.

     [1mputgr  ‐  [22mperforms  #if,  #ifdef, #ifndef logic, recursively
          calling itself to put or skip embedded groups up  to  a
          balancing #else, #endif, or EOF.

     [1mputns  ‐  [22mcalled only for lines not to be skipped, processes
          #define, #undef, #include, #line and all other # state‐
          ments.

     [1mputls  ‐  [22mconverts  keywords  to special tokens, accumulates
          floating, long and short numbers, and unpacks  operator
          strings.

     The code is organized into several files:

     [1mint0.h  ‐  [22mdata  structures and type definitions peculiar to
          pp, but common to all parts thereof.

     [1mint01.h ‐ [22mdefinitions common to pp and p1 of the C compiler.

     [1mint012.h ‐ [22mdefinitions common to all parts of the C  compil‐
          er.

     [1mp0conf.c ‐ [22mconfiguration file; defines the pathname for #in‐
          clude <name> and the standard preprocessor  characters,
          normally # and @.

     [1mp0eval.c ‐ [22mthe expression evaluator for #if.

     [1mp0lex.c  ‐ [22mthe rest of the data flow, from putls on, includ‐
          ing all  associated  routines  for  performing  lexical
          analysis.

     [1mp0main.c  ‐  [22mthe  data  flow outlined above, from getln down
          through putns, inclusive.

     [1mp0subs.c ‐  [22mauxiliary  subroutines  used  by  the  principal
          transforms in main.c.






















































