*** /usr/src/bin/od.c.old	Sun Feb  8 14:24:54 1987
--- /usr/src/bin/od.c	Mon Nov 19 20:07:49 2001
***************
*** 1,4 ****
! static char *sccsid = "@(#)od.c	5.12 (Berkeley) 5/14/84";
  /*
   * od -- octal, hex, decimal, character dump of data in a file.
   *
--- 1,4 ----
! static char *sccsid = "@(#)od.c	5.13 (2.11BSD) 2001/11/19";
  /*
   * od -- octal, hex, decimal, character dump of data in a file.
   *
***************
*** 697,706 ****
  static long	_mask = 0x7fffffff;
  
  char *
! icvt (value, radix, signed, ndigits)
  long	value;
  int	radix;
! int	signed;
  int	ndigits;
  {
  	register long	val = value;
--- 697,706 ----
  static long	_mask = 0x7fffffff;
  
  char *
! icvt (value, radix, xsigned, ndigits)
  long	value;
  int	radix;
! int	xsigned;
  int	ndigits;
  {
  	register long	val = value;
***************
*** 720,726 ****
  		goto done; /*return(b);*/
  	}
  
! 	if (signed && (sign = (val < 0)))	/* signed conversion */
  	{
  		/*
  		 * It is necessary to do the first divide
--- 720,726 ----
  		goto done; /*return(b);*/
  	}
  
! 	if (xsigned && (sign = (val < 0)))	/* signed conversion */
  	{
  		/*
  		 * It is necessary to do the first divide
***************
*** 776,782 ****
  		*--b = '-';
  
  	tmp1 = ndigits - (&_icv_buf[MAXINTLENGTH] - b);
! 	tmp2 = signed? ' ':'0';
  	while (tmp1 > 0)
  	{
  		*--b = tmp2;
--- 776,782 ----
  		*--b = '-';
  
  	tmp1 = ndigits - (&_icv_buf[MAXINTLENGTH] - b);
! 	tmp2 = xsigned? ' ':'0';
  	while (tmp1 > 0)
  	{
  		*--b = tmp2;
*** /usr/src/ucb/ex/ex_io.c.old	Sun Sep  8 11:59:44 1991
--- /usr/src/ucb/ex/ex_io.c	Mon Nov 19 20:08:08 2001
***************
*** 5,11 ****
   */
  
  #if	!defined(lint) && defined(DOSCCS)
! static char *sccsid = "@(#)ex_io.c	7.11.1.1 (Berkeley) 8/12/86";
  #endif
  
  #include "ex.h"
--- 5,11 ----
   */
  
  #if	!defined(lint) && defined(DOSCCS)
! static char *sccsid = "@(#)ex_io.c	7.11.1.2 (2.11BSD) 2001/11/19";
  #endif
  
  #include "ex.h"
***************
*** 856,872 ****
  # define rindex strrchr
  #endif
  
! checkmodeline(line)
! char *line;
  {
  	char *beg, *end;
  	char cmdbuf[1024];
  	char *index(), *rindex();
  
! 	beg = index(line, ':');
  	if (beg == NULL)
  		return;
! 	if (&beg[-3] < line)
  		return;
  	if (!(  ( (beg[-3] == ' ' || beg[-3] == '\t')
  	        && beg[-2] == 'e'
--- 856,872 ----
  # define rindex strrchr
  #endif
  
! checkmodeline(xline)
! char *xline;
  {
  	char *beg, *end;
  	char cmdbuf[1024];
  	char *index(), *rindex();
  
! 	beg = index(xline, ':');
  	if (beg == NULL)
  		return;
! 	if (&beg[-3] < xline)
  		return;
  	if (!(  ( (beg[-3] == ' ' || beg[-3] == '\t')
  	        && beg[-2] == 'e'
*** /usr/src/ucb/pascal/pi/pas.y.old	Thu Mar 17 14:17:22 1983
--- /usr/src/ucb/pascal/pi/pas.y	Mon Nov 19 20:06:16 2001
***************
*** 210,219 ****
  
  const_decl:
  	YCONST YID '=' const ';'
! 		= constbeg($1, line2of($2)), const(lineof($3), $2, $4);
  		|
  	const_decl YID '=' const ';'
! 		= const(lineof($3), $2, $4);
  		|
  	YCONST error
  		= {
--- 210,219 ----
  
  const_decl:
  	YCONST YID '=' const ';'
! 		= constbeg($1, line2of($2)), xconst(lineof($3), $2, $4);
  		|
  	const_decl YID '=' const ';'
! 		= xconst(lineof($3), $2, $4);
  		|
  	YCONST error
  		= {
*** /usr/src/ucb/pascal/pi/const.c.old	Fri Jul 10 13:58:28 1981
--- /usr/src/ucb/pascal/pi/const.c	Mon Nov 19 20:08:29 2001
***************
*** 1,4 ****
! /*	@(#)const.c	2.3	SCCS id keyword	*/
  /* Copyright (c) 1979 Regents of the University of California */
  #
  /*
--- 1,4 ----
! /*	@(#)const.c	2.3.1 2001/11/19 */
  /* Copyright (c) 1979 Regents of the University of California */
  #
  /*
***************
*** 29,35 ****
  }
  #endif
  
! const(cline, cid, cdecl)
  	int cline;
  	register char *cid;
  	register int *cdecl;
--- 29,35 ----
  }
  #endif
  
! xconst(cline, cid, cdecl)
  	int cline;
  	register char *cid;
  	register int *cdecl;
*** /usr/src/ucb/pascal/pxp/const.c.old	Sat May 31 03:50:44 1986
--- /usr/src/ucb/pascal/pxp/const.c	Mon Nov 19 20:06:17 2001
***************
*** 31,37 ****
  	setline(cline);
  }
  
! const(cline, cid, cdecl)
  	int cline;
  	char *cid;
  	int *cdecl;
--- 31,37 ----
  	setline(cline);
  }
  
! xconst(cline, cid, cdecl)
  	int cline;
  	char *cid;
  	int *cdecl;
*** /usr/src/ucb/pascal/pxp/pas.y.old	Fri Jul 10 13:59:37 1981
--- /usr/src/ucb/pascal/pxp/pas.y	Mon Nov 19 20:06:20 2001
***************
*** 203,212 ****
  
  const_decl:
  	YCONST YID '=' const ';'
! 		= constbeg($1, line2of($2)), const(lineof($3), $2, $4);
  		|
  	const_decl YID '=' const ';'
! 		= const(lineof($3), $2, $4);
  		|
  	YCONST error
  		= {
--- 203,212 ----
  
  const_decl:
  	YCONST YID '=' const ';'
! 		= constbeg($1, line2of($2)), xconst(lineof($3), $2, $4);
  		|
  	const_decl YID '=' const ';'
! 		= xconst(lineof($3), $2, $4);
  		|
  	YCONST error
  		= {
*** /usr/src/usr.bin/f77/data.c.old	Mon Feb 16 16:57:36 1987
--- /usr/src/usr.bin/f77/data.c	Mon Nov 19 20:06:22 2001
***************
*** 16,23 ****
  
  if(repp == NULL)
  	nrep = 1;
! else if (ISICON(repp) && repp->const.ci >= 0)
! 	nrep = repp->const.ci;
  else
  	{
  	error("invalid repetition count in DATA statement",0,0,ERR);
--- 16,23 ----
  
  if(repp == NULL)
  	nrep = 1;
! else if (ISICON(repp) && repp->xconst.ci >= 0)
! 	nrep = repp->xconst.ci;
  else
  	{
  	error("invalid repetition count in DATA statement",0,0,ERR);
***************
*** 74,80 ****
  		if(ip->implb==NULL || ip->impub==NULL || ip->varnp==NULL)
  			error("bad impldoblock 0%o", ip,0,FATAL1);
  		if(ip->isactive)
! 			ip->varvp->const.ci += ip->impdiff;
  		else
  			{
  			q = fixtype(cpexpr(ip->implb));
--- 74,80 ----
  		if(ip->implb==NULL || ip->impub==NULL || ip->varnp==NULL)
  			error("bad impldoblock 0%o", ip,0,FATAL1);
  		if(ip->isactive)
! 			ip->varvp->xconst.ci += ip->impdiff;
  		else
  			{
  			q = fixtype(cpexpr(ip->implb));
***************
*** 87,93 ****
  				q = fixtype(cpexpr(ip->impstep));
  				if( ! ISICON(q) )
  					goto doerr;
! 				ip->impdiff = q->const.ci;
  				frexpr(q);
  				}
  			else
--- 87,93 ----
  				q = fixtype(cpexpr(ip->impstep));
  				if( ! ISICON(q) )
  					goto doerr;
! 				ip->impdiff = q->xconst.ci;
  				frexpr(q);
  				}
  			else
***************
*** 96,102 ****
  			q = fixtype(cpexpr(ip->impub));
  			if(! ISICON(q))
  				goto doerr;
! 			ip->implim = q->const.ci;
  			frexpr(q);
  
  			ip->isactive = YES;
--- 96,102 ----
  			q = fixtype(cpexpr(ip->impub));
  			if(! ISICON(q))
  				goto doerr;
! 			ip->implim = q->xconst.ci;
  			frexpr(q);
  
  			ip->isactive = YES;
***************
*** 108,115 ****
  			rp->rpltag = TCONST;
  			}
  
! 		if( (ip->impdiff>0 && (ip->varvp->const.ci <= ip->implim))
! 		 || (ip->impdiff<0 && (ip->varvp->const.ci >= ip->implim)) )
  			{ /* start new loop */
  			curdtp = ip->datalist;
  			goto next;
--- 108,115 ----
  			rp->rpltag = TCONST;
  			}
  
! 		if( (ip->impdiff>0 && (ip->varvp->xconst.ci <= ip->implim))
! 		 || (ip->impdiff<0 && (ip->varvp->xconst.ci >= ip->implim)) )
  			{ /* start new loop */
  			curdtp = ip->datalist;
  			goto next;
***************
*** 134,144 ****
  		q = mkaddr(np);
  		off = typesize[np->vtype] * curdtelt;
  		if(np->vtype == TYCHAR)
! 			off *= np->vleng->const.ci;
  		q->memoffset = mkexpr(OPPLUS, q->memoffset, mkintcon(off) );
  		if( (neltp = np->vdim->nelt) && ISCONST(neltp))
  			{
! 			if(++curdtelt < neltp->const.ci)
  				skip = NO;
  			}
  		else
--- 134,144 ----
  		q = mkaddr(np);
  		off = typesize[np->vtype] * curdtelt;
  		if(np->vtype == TYCHAR)
! 			off *= np->vleng->xconst.ci;
  		q->memoffset = mkexpr(OPPLUS, q->memoffset, mkintcon(off) );
  		if( (neltp = np->vdim->nelt) && ISCONST(neltp))
  			{
! 			if(++curdtelt < neltp->xconst.ci)
  				skip = NO;
  			}
  		else
***************
*** 153,159 ****
  		}
  	if(q->vtype == TYCHAR)
  		if(ISICON(q->vleng))
! 			*elenp = q->vleng->const.ci;
  		else	{
  			error("initialization of string of nonconstant length",0,0,ERR);
  			continue;
--- 153,159 ----
  		}
  	if(q->vtype == TYCHAR)
  		if(ISICON(q->vleng))
! 			*elenp = q->vleng->xconst.ci;
  		else	{
  			error("initialization of string of nonconstant length",0,0,ERR);
  			continue;
***************
*** 166,174 ****
  		*vlenp = eqvclass[np->vardesc.varno].eqvleng;
  	else	{
  		*vlenp =  (np->vtype==TYCHAR ?
! 				np->vleng->const.ci : typesize[np->vtype]);
  		if(np->vdim)
! 			*vlenp *= np->vdim->nelt->const.ci;
  		}
  	return(q);
  
--- 166,174 ----
  		*vlenp = eqvclass[np->vardesc.varno].eqvleng;
  	else	{
  		*vlenp =  (np->vtype==TYCHAR ?
! 				np->vleng->xconst.ci : typesize[np->vtype]);
  		if(np->vdim)
! 			*vlenp *= np->vdim->nelt->xconst.ci;
  		}
  	return(q);
  
***************
*** 214,220 ****
  	*t++ = ' ';
  varname[XL+1] = '\0';
  
! offset = varp->memoffset->const.ci;
  type = varp->vtype;
  valtype = valp->vtype;
  if(type!=TYCHAR && valtype==TYCHAR)
--- 214,220 ----
  	*t++ = ' ';
  varname[XL+1] = '\0';
  
! offset = varp->memoffset->xconst.ci;
  type = varp->vtype;
  valtype = valp->vtype;
  if(type!=TYCHAR && valtype==TYCHAR)
***************
*** 232,239 ****
  	}
  if(type != TYCHAR)
  	if(valtype == TYUNKNOWN)
! 		con.ci = valp->const.ci;
! 	else	consconv(type, &con, valtype, &valp->const);
  
  k = 1;
  switch(type)
--- 232,239 ----
  	}
  if(type != TYCHAR)
  	if(valtype == TYUNKNOWN)
! 		con.ci = valp->xconst.ci;
! 	else	consconv(type, &con, valtype, &valp->xconst);
  
  k = 1;
  switch(type)
***************
*** 267,273 ****
  		break;
  
  	case TYCHAR:
! 		k = valp->vleng->const.ci;
  		if(elen < k)
  			k = elen;
  
--- 267,273 ----
  		break;
  
  	case TYCHAR:
! 		k = valp->vleng->xconst.ci;
  		if(elen < k)
  			k = elen;
  
***************
*** 274,282 ****
  		for(i = 0 ; i < k ; ++i)
  			{
  			fprintf(initfile, datafmt, varname, offset++, vlen, TYCHAR);
! 			fprintf(initfile, "\t%d\n", valp->const.ccp[i]);
  			}
! 		k = elen - valp->vleng->const.ci;
  		while( k-- > 0)
  			{
  			fprintf(initfile, datafmt, varname, offset++, vlen, TYCHAR);
--- 274,282 ----
  		for(i = 0 ; i < k ; ++i)
  			{
  			fprintf(initfile, datafmt, varname, offset++, vlen, TYCHAR);
! 			fprintf(initfile, "\t%d\n", valp->xconst.ccp[i]);
  			}
! 		k = elen - valp->vleng->xconst.ci;
  		while( k-- > 0)
  			{
  			fprintf(initfile, datafmt, varname, offset++, vlen, TYCHAR);
*** /usr/src/usr.bin/f77/defines.old	Mon Feb 16 16:57:36 1987
--- /usr/src/usr.bin/f77/defines	Mon Nov 19 20:06:23 2001
***************
*** 233,239 ****
  #define ISERROR(z) (z->tag==TERROR)
  #define ISPLUSOP(z) (z->tag==TEXPR && z->opcode==OPPLUS)
  #define ISSTAROP(z) (z->tag==TEXPR && z->opcode==OPSTAR)
! #define ISONE(z) (ISICON(z) && z->const.ci==1)
  #define INT(z) ONEOF(z, MSKINT|MSKCHAR)
  #define ICON(z) mkintcon( (ftnint)(z) )
  #define CHCON(z) mkstrcon(strlen(z), z)
--- 233,239 ----
  #define ISERROR(z) (z->tag==TERROR)
  #define ISPLUSOP(z) (z->tag==TEXPR && z->opcode==OPPLUS)
  #define ISSTAROP(z) (z->tag==TEXPR && z->opcode==OPSTAR)
! #define ISONE(z) (ISICON(z) && z->xconst.ci==1)
  #define INT(z) ONEOF(z, MSKINT|MSKCHAR)
  #define ICON(z) mkintcon( (ftnint)(z) )
  #define CHCON(z) mkstrcon(strlen(z), z)
*** /usr/src/usr.bin/f77/defs.old	Mon Feb 16 16:57:41 1987
--- /usr/src/usr.bin/f77/defs	Mon Nov 19 20:06:24 2001
***************
*** 268,274 ****
  	unsigned tag:4;
  	unsigned vtype:4;
  	expptr vleng;
! 	union constant const;
  	};
  
  
--- 268,274 ----
  	unsigned tag:4;
  	unsigned vtype:4;
  	expptr vleng;
! 	union constant xconst;
  	};
  
  
*** /usr/src/usr.bin/f77/equiv.c.old	Tue Jun 27 19:54:24 1989
--- /usr/src/usr.bin/f77/equiv.c	Mon Nov 19 20:06:25 2001
***************
*** 47,53 ****
  			}
  		else	offp = ICON(0);
  		if(ISICON(offp))
! 			offset = q->eqvoffset = offp->const.ci;
  		else	{
  			error("nonconstant subscript in equivalence ", np, 0, DCLERR);
  			np = NULL;
--- 47,53 ----
  			}
  		else	offp = ICON(0);
  		if(ISICON(offp))
! 			offset = q->eqvoffset = offp->xconst.ci;
  		else	{
  			error("nonconstant subscript in equivalence ", np, 0, DCLERR);
  			np = NULL;
*** /usr/src/usr.bin/f77/exec.c.old	Mon Feb 16 16:57:37 1987
--- /usr/src/usr.bin/f77/exec.c	Mon Nov 19 20:06:27 2001
***************
*** 227,237 ****
  		}
  	else if( ISINT(p->vtype) )
  		{
! 		q = convic(p->const.ci);
  		n = strlen(q);
  		if(n > 0)
  			{
! 			p->const.ccp = copyn(n, q);
  			p->vtype = TYCHAR;
  			p->vleng = ICON(n);
  			}
--- 227,237 ----
  		}
  	else if( ISINT(p->vtype) )
  		{
! 		q = convic(p->xconst.ci);
  		n = strlen(q);
  		if(n > 0)
  			{
! 			p->xconst.ccp = copyn(n, q);
  			p->vtype = TYCHAR;
  			p->vleng = ICON(n);
  			}
*** /usr/src/usr.bin/f77/expr.c.old	Mon Feb 16 16:57:37 1987
--- /usr/src/usr.bin/f77/expr.c	Mon Nov 19 20:06:43 2001
***************
*** 21,27 ****
  register struct constblock * p;
  
  p = mkconst(TYLOGICAL);
! p->const.ci = l;
  return(p);
  }
  
--- 21,27 ----
  register struct constblock * p;
  
  p = mkconst(TYLOGICAL);
! p->xconst.ci = l;
  return(p);
  }
  
***************
*** 33,39 ****
  register struct constblock *p;
  
  p = mkconst(TYLONG);
! p->const.ci = l;
  #ifdef MAXSHORT
  	if(l >= -MAXSHORT   &&   l <= MAXSHORT)
  		p->vtype = TYSHORT;
--- 33,39 ----
  register struct constblock *p;
  
  p = mkconst(TYLONG);
! p->xconst.ci = l;
  #ifdef MAXSHORT
  	if(l >= -MAXSHORT   &&   l <= MAXSHORT)
  		p->vtype = TYSHORT;
***************
*** 49,55 ****
  register struct constblock *p;
  
  p = mkconst(TYADDR);
! p->const.ci = l;
  return(p);
  }
  
--- 49,55 ----
  register struct constblock *p;
  
  p = mkconst(TYADDR);
! p->xconst.ci = l;
  return(p);
  }
  
***************
*** 62,68 ****
  register struct constblock *p;
  
  p = mkconst(t);
! p->const.cd[0] = d;
  return(p);
  }
  
--- 62,68 ----
  register struct constblock *p;
  
  p = mkconst(t);
! p->xconst.cd[0] = d;
  return(p);
  }
  
***************
*** 75,84 ****
  register struct constblock *p;
  
  p = mkconst(TYUNKNOWN);
! p->const.ci = 0;
  while(--leng >= 0)
  	if(*s != ' ')
! 		p->const.ci = (p->const.ci << shift) | hextoi(*s++);
  return(p);
  }
  
--- 75,84 ----
  register struct constblock *p;
  
  p = mkconst(TYUNKNOWN);
! p->xconst.ci = 0;
  while(--leng >= 0)
  	if(*s != ' ')
! 		p->xconst.ci = (p->xconst.ci << shift) | hextoi(*s++);
  return(p);
  }
  
***************
*** 95,101 ****
  
  p = mkconst(TYCHAR);
  p->vleng = ICON(l);
! p->const.ccp = s = (char *) ckalloc(l);
  while(--l >= 0)
  	*s++ = *v++;
  return(p);
--- 95,101 ----
  
  p = mkconst(TYCHAR);
  p->vleng = ICON(l);
! p->xconst.ccp = s = (char *) ckalloc(l);
  while(--l >= 0)
  	*s++ = *v++;
  return(p);
***************
*** 115,125 ****
  	{
  	p = mkconst( (rtype==TYDREAL||itype==TYDREAL) ? TYDCOMPLEX : TYCOMPLEX );
  	if( ISINT(rtype) )
! 		p->const.cd[0] = realp->const.ci;
! 	else	p->const.cd[0] = realp->const.cd[0];
  	if( ISINT(itype) )
! 		p->const.cd[1] = imagp->const.ci;
! 	else	p->const.cd[1] = imagp->const.cd[0];
  	}
  else
  	{
--- 115,125 ----
  	{
  	p = mkconst( (rtype==TYDREAL||itype==TYDREAL) ? TYDCOMPLEX : TYCOMPLEX );
  	if( ISINT(rtype) )
! 		p->xconst.cd[0] = realp->xconst.ci;
! 	else	p->xconst.cd[0] = realp->xconst.cd[0];
  	if( ISINT(itype) )
! 		p->xconst.cd[1] = imagp->xconst.ci;
! 	else	p->xconst.cd[1] = imagp->xconst.cd[0];
  	}
  else
  	{
***************
*** 163,169 ****
  else if( ISCONST(p) && pt!=TYADDR)
  	{
  	q = mkconst(t);
! 	consconv(t, &(q->const), p->vtype, &(p->const));
  	frexpr(p);
  	}
  #if TARGET == PDP11
--- 163,169 ----
  else if( ISCONST(p) && pt!=TYADDR)
  	{
  	q = mkconst(t);
! 	consconv(t, &(q->xconst), p->vtype, &(p->xconst));
  	frexpr(p);
  	}
  #if TARGET == PDP11
***************
*** 237,243 ****
  	case TCONST:
  		if(e->vtype == TYCHAR)
  			{
! 			e->const.ccp = copyn(1+strlen(e->const.ccp), e->const.ccp);
  			e->vleng = cpexpr(e->vleng);
  			}
  	case TERROR:
--- 237,243 ----
  	case TCONST:
  		if(e->vtype == TYCHAR)
  			{
! 			e->xconst.ccp = copyn(1+strlen(e->xconst.ccp), e->xconst.ccp);
  			e->vleng = cpexpr(e->vleng);
  			}
  	case TERROR:
***************
*** 289,295 ****
  	case TCONST:
  		if( ISCHAR(p) )
  			{
! 			free(p->const.ccp);
  			frexpr(p->vleng);
  			}
  		break;
--- 289,295 ----
  	case TCONST:
  		if( ISCHAR(p) )
  			{
! 			free(p->xconst.ccp);
  			frexpr(p->vleng);
  			}
  		break;
***************
*** 1075,1084 ****
  checkcond = NULL;
  if( ISICON(p) )
  	{
! 	if(p->const.ci < 0)
  		goto badsub;
  	if( ISICON(dimp->nelt) )
! 		if(p->const.ci < dimp->nelt->const.ci)
  			return(p);
  		else
  			goto badsub;
--- 1075,1084 ----
  checkcond = NULL;
  if( ISICON(p) )
  	{
! 	if(p->xconst.ci < 0)
  		goto badsub;
  	if( ISICON(dimp->nelt) )
! 		if(p->xconst.ci < dimp->nelt->xconst.ci)
  			return(p);
  		else
  			goto badsub;
***************
*** 1250,1260 ****
  		nelt = 1;
  		if(t = v->vdim)
  			if( (neltp = t->nelt) && ISCONST(neltp) )
! 				nelt = neltp->const.ci;
  			else
  				error("adjustable automatic array", v, 0, DCLERR);
  		p = autovar(nelt, v->vtype, v->vleng);
! 		v->voffset = p->memoffset->const.ci;
  		frexpr(p);
  		break;
  
--- 1250,1260 ----
  		nelt = 1;
  		if(t = v->vdim)
  			if( (neltp = t->nelt) && ISCONST(neltp) )
! 				nelt = neltp->xconst.ci;
  			else
  				error("adjustable automatic array", v, 0, DCLERR);
  		p = autovar(nelt, v->vtype, v->vleng);
! 		v->voffset = p->memoffset->xconst.ci;
  		frexpr(p);
  		break;
  
***************
*** 1303,1309 ****
  return(c - 'a');
  }
  
! #define ICONEQ(z, c)  (ISICON(z) && z->const.ci==c)
  #define COMMUTE	{ e = lp;  lp = rp;  rp = e; }
  
  
--- 1303,1309 ----
  return(c - 'a');
  }
  
! #define ICONEQ(z, c)  (ISICON(z) && z->xconst.ci==c)
  #define COMMUTE	{ e = lp;  lp = rp;  rp = e; }
  
  
***************
*** 1340,1346 ****
  
  		if( ISICON(rp) )
  			{
! 			if(rp->const.ci == 0)
  				goto retright;
  			goto mulop;
  			}
--- 1340,1346 ----
  
  		if( ISICON(rp) )
  			{
! 			if(rp->xconst.ci == 0)
  				goto retright;
  			goto mulop;
  			}
***************
*** 1361,1370 ****
  	mulop:
  		if( ISICON(rp) )
  			{
! 			if(rp->const.ci == 1)
  				goto retleft;
  
! 			if(rp->const.ci == -1)
  				{
  				frexpr(rp);
  				return( mkexpr(OPNEG, lp, 0) );
--- 1361,1370 ----
  	mulop:
  		if( ISICON(rp) )
  			{
! 			if(rp->xconst.ci == 1)
  				goto retleft;
  
! 			if(rp->xconst.ci == -1)
  				{
  				frexpr(rp);
  				return( mkexpr(OPNEG, lp, 0) );
***************
*** 1375,1381 ****
  			{
  			if(opcode == OPSTAR)
  				e = mkexpr(OPSTAR, lp->rightp, rp);
! 			else  if(ISICON(rp) && lp->rightp->const.ci % rp->const.ci == 0)
  				e = mkexpr(OPSLASH, lp->rightp, rp);
  			else	break;
  
--- 1375,1381 ----
  			{
  			if(opcode == OPSTAR)
  				e = mkexpr(OPSTAR, lp->rightp, rp);
! 			else  if(ISICON(rp) && lp->rightp->xconst.ci % rp->xconst.ci == 0)
  				e = mkexpr(OPSLASH, lp->rightp, rp);
  			else	break;
  
***************
*** 1407,1413 ****
  	addop:
  		if( ISICON(rp) )
  			{
! 			if(rp->const.ci == 0)
  				goto retleft;
  			if( ISPLUSOP(lp) && ISICON(lp->rightp) )
  				{
--- 1407,1413 ----
  	addop:
  		if( ISICON(rp) )
  			{
! 			if(rp->xconst.ci == 0)
  				goto retleft;
  			if( ISPLUSOP(lp) && ISICON(lp->rightp) )
  				{
***************
*** 1458,1464 ****
  
  		if( ISCONST(rp) )
  			{
! 			if(rp->const.ci == 0)
  				if(opcode == OPOR)
  					goto retleft;
  				else
--- 1458,1464 ----
  
  		if( ISCONST(rp) )
  			{
! 			if(rp->xconst.ci == 0)
  				if(opcode == OPOR)
  					goto retleft;
  				else
***************
*** 1675,1685 ****
  	switch(opcode)
  		{
  		case OPNOT:
! 			lp->const.ci = ! lp->const.ci;
  			return(lp);
  
  		case OPBITNOT:
! 			lp->const.ci = ~ lp->const.ci;
  			return(lp);
  
  		case OPNEG:
--- 1675,1685 ----
  	switch(opcode)
  		{
  		case OPNOT:
! 			lp->xconst.ci = ! lp->xconst.ci;
  			return(lp);
  
  		case OPBITNOT:
! 			lp->xconst.ci = ~ lp->xconst.ci;
  			return(lp);
  
  		case OPNEG:
***************
*** 1709,1758 ****
  		return(e);
  
  	case OPAND:
! 		p->const.ci = lp->const.ci && rp->const.ci;
  		break;
  
  	case OPOR:
! 		p->const.ci = lp->const.ci || rp->const.ci;
  		break;
  
  	case OPEQV:
! 		p->const.ci = lp->const.ci == rp->const.ci;
  		break;
  
  	case OPNEQV:
! 		p->const.ci = lp->const.ci != rp->const.ci;
  		break;
  
  	case OPBITAND:
! 		p->const.ci = lp->const.ci & rp->const.ci;
  		break;
  
  	case OPBITOR:
! 		p->const.ci = lp->const.ci | rp->const.ci;
  		break;
  
  	case OPBITXOR:
! 		p->const.ci = lp->const.ci ^ rp->const.ci;
  		break;
  
  	case OPLSHIFT:
! 		p->const.ci = lp->const.ci << rp->const.ci;
  		break;
  
  	case OPRSHIFT:
! 		p->const.ci = lp->const.ci >> rp->const.ci;
  		break;
  
  	case OPCONCAT:
! 		ll = lp->vleng->const.ci;
! 		lr = rp->vleng->const.ci;
! 		p->const.ccp = q = (char *) ckalloc(ll+lr);
  		p->vleng = ICON(ll+lr);
! 		s = lp->const.ccp;
  		for(i = 0 ; i < ll ; ++i)
  			*q++ = *s++;
! 		s = rp->const.ccp;
  		for(i = 0; i < lr; ++i)
  			*q++ = *s++;
  		break;
--- 1709,1758 ----
  		return(e);
  
  	case OPAND:
! 		p->xconst.ci = lp->xconst.ci && rp->xconst.ci;
  		break;
  
  	case OPOR:
! 		p->xconst.ci = lp->xconst.ci || rp->xconst.ci;
  		break;
  
  	case OPEQV:
! 		p->xconst.ci = lp->xconst.ci == rp->xconst.ci;
  		break;
  
  	case OPNEQV:
! 		p->xconst.ci = lp->xconst.ci != rp->xconst.ci;
  		break;
  
  	case OPBITAND:
! 		p->xconst.ci = lp->xconst.ci & rp->xconst.ci;
  		break;
  
  	case OPBITOR:
! 		p->xconst.ci = lp->xconst.ci | rp->xconst.ci;
  		break;
  
  	case OPBITXOR:
! 		p->xconst.ci = lp->xconst.ci ^ rp->xconst.ci;
  		break;
  
  	case OPLSHIFT:
! 		p->xconst.ci = lp->xconst.ci << rp->xconst.ci;
  		break;
  
  	case OPRSHIFT:
! 		p->xconst.ci = lp->xconst.ci >> rp->xconst.ci;
  		break;
  
  	case OPCONCAT:
! 		ll = lp->vleng->xconst.ci;
! 		lr = rp->vleng->xconst.ci;
! 		p->xconst.ccp = q = (char *) ckalloc(ll+lr);
  		p->vleng = ICON(ll+lr);
! 		s = lp->xconst.ccp;
  		for(i = 0 ; i < ll ; ++i)
  			*q++ = *s++;
! 		s = rp->xconst.ccp;
  		for(i = 0; i < lr; ++i)
  			*q++ = *s++;
  		break;
***************
*** 1761,1767 ****
  	case OPPOWER:
  		if( ! ISINT(rtype) )
  			return(e);
! 		conspower(&(p->const), lp, rp->const.ci);
  		break;
  
  
--- 1761,1767 ----
  	case OPPOWER:
  		if( ! ISINT(rtype) )
  			return(e);
! 		conspower(&(p->xconst), lp, rp->xconst.ci);
  		break;
  
  
***************
*** 1768,1784 ****
  	default:
  		if(ltype == TYCHAR)
  			{
! 			lcon.ci = cmpstr(lp->const.ccp, rp->const.ccp,
! 					lp->vleng->const.ci, rp->vleng->const.ci);
  			rcon.ci = 0;
  			mtype = tyint;
  			}
  		else	{
  			mtype = maxtype(ltype, rtype);
! 			consconv(mtype, &lcon, ltype, &(lp->const) );
! 			consconv(mtype, &rcon, rtype, &(rp->const) );
  			}
! 		consbinop(opcode, mtype, &(p->const), &lcon, &rcon);
  		break;
  	}
  
--- 1768,1784 ----
  	default:
  		if(ltype == TYCHAR)
  			{
! 			lcon.ci = cmpstr(lp->xconst.ccp, rp->xconst.ccp,
! 					lp->vleng->xconst.ci, rp->vleng->xconst.ci);
  			rcon.ci = 0;
  			mtype = tyint;
  			}
  		else	{
  			mtype = maxtype(ltype, rtype);
! 			consconv(mtype, &lcon, ltype, &(lp->xconst) );
! 			consconv(mtype, &rcon, rtype, &(rp->xconst) );
  			}
! 		consbinop(opcode, mtype, &(p->xconst), &lcon, &rcon);
  		break;
  	}
  
***************
*** 1848,1863 ****
  	{
  	case TYSHORT:
  	case TYLONG:
! 		p->const.ci = - p->const.ci;
  		break;
  
  	case TYCOMPLEX:
  	case TYDCOMPLEX:
! 		p->const.cd[1] = - p->const.cd[1];
  		/* fall through and do the real parts */
  	case TYREAL:
  	case TYDREAL:
! 		p->const.cd[0] = - p->const.cd[0];
  		break;
  	default:
  		error("consnegop: impossible type %d", p->vtype,0,FATAL1);
--- 1848,1863 ----
  	{
  	case TYSHORT:
  	case TYLONG:
! 		p->xconst.ci = - p->xconst.ci;
  		break;
  
  	case TYCOMPLEX:
  	case TYDCOMPLEX:
! 		p->xconst.cd[1] = - p->xconst.cd[1];
  		/* fall through and do the real parts */
  	case TYREAL:
  	case TYDREAL:
! 		p->xconst.cd[0] = - p->xconst.cd[0];
  		break;
  	default:
  		error("consnegop: impossible type %d", p->vtype,0,FATAL1);
***************
*** 1901,1910 ****
  		return;
  		}
  	n = - n;
! 	consbinop(OPSLASH, type, &x, powp, &(ap->const));
  	}
  else
! 	consbinop(OPSTAR, type, &x, powp, &(ap->const));
  
  for( ; ; )
  	{
--- 1901,1910 ----
  		return;
  		}
  	n = - n;
! 	consbinop(OPSLASH, type, &x, powp, &(ap->xconst));
  	}
  else
! 	consbinop(OPSTAR, type, &x, powp, &(ap->xconst));
  
  for( ; ; )
  	{
***************
*** 2079,2097 ****
  	{
  	case TYSHORT:
  	case TYLONG:
! 		if(p->const.ci > 0) return(1);
! 		if(p->const.ci < 0) return(-1);
  		return(0);
  
  	case TYREAL:
  	case TYDREAL:
! 		if(p->const.cd[0] > 0) return(1);
! 		if(p->const.cd[0] < 0) return(-1);
  		return(0);
  
  	case TYCOMPLEX:
  	case TYDCOMPLEX:
! 		return(p->const.cd[0]!=0 || p->const.cd[1]!=0);
  
  	default:
  		error("conssgn(type %d)", p->vtype,0,FATAL1);
--- 2079,2097 ----
  	{
  	case TYSHORT:
  	case TYLONG:
! 		if(p->xconst.ci > 0) return(1);
! 		if(p->xconst.ci < 0) return(-1);
  		return(0);
  
  	case TYREAL:
  	case TYDREAL:
! 		if(p->xconst.cd[0] > 0) return(1);
! 		if(p->xconst.cd[0] < 0) return(-1);
  		return(0);
  
  	case TYCOMPLEX:
  	case TYDCOMPLEX:
! 		return(p->xconst.cd[0]!=0 || p->xconst.cd[1]!=0);
  
  	default:
  		error("conssgn(type %d)", p->vtype,0,FATAL1);
***************
*** 2115,2121 ****
  
  if(ISICON(rp))
  	{
! 	if(rp->const.ci == 0)
  		{
  		frexpr(p);
  		if( ISINT(ltype) )
--- 2115,2121 ----
  
  if(ISICON(rp))
  	{
! 	if(rp->xconst.ci == 0)
  		{
  		frexpr(p);
  		if( ISINT(ltype) )
***************
*** 2123,2129 ****
  		else
  			return( putconst( mkconv(ltype, ICON(1))) );
  		}
! 	if(rp->const.ci < 0)
  		{
  		if( ISINT(ltype) )
  			{
--- 2123,2129 ----
  		else
  			return( putconst( mkconv(ltype, ICON(1))) );
  		}
! 	if(rp->xconst.ci < 0)
  		{
  		if( ISINT(ltype) )
  			{
***************
*** 2131,2140 ****
  			error("integer**negative",0,0,ERR);
  			return( errnode() );
  			}
! 		rp->const.ci = - rp->const.ci;
  		p->leftp = lp = fixexpr(mkexpr(OPSLASH, ICON(1), lp));
  		}
! 	if(rp->const.ci == 1)
  		{
  		frexpr(rp);
  		free(p);
--- 2131,2140 ----
  			error("integer**negative",0,0,ERR);
  			return( errnode() );
  			}
! 		rp->xconst.ci = - rp->xconst.ci;
  		p->leftp = lp = fixexpr(mkexpr(OPSLASH, ICON(1), lp));
  		}
! 	if(rp->xconst.ci == 1)
  		{
  		frexpr(rp);
  		free(p);
*** /usr/src/usr.bin/f77/gram.dcl.old	Mon Jan  3 22:23:18 1994
--- /usr/src/usr.bin/f77/gram.dcl	Mon Nov 19 20:06:45 2001
***************
*** 53,59 ****
  			$$ = 0;
  			error("length must be an integer constant", 0, 0, DCLERR);
  			}
! 		  else $$ = $3->const.ci;
  		}
  	| SSTAR intonlyon SLPAR SSTAR SRPAR intonlyoff
  		{ $$ = 0; }
--- 53,59 ----
  			$$ = 0;
  			error("length must be an integer constant", 0, 0, DCLERR);
  			}
! 		  else $$ = $3->xconst.ci;
  		}
  	| SSTAR intonlyon SLPAR SSTAR SRPAR intonlyoff
  		{ $$ = 0; }
*** /usr/src/usr.bin/f77/io.c.old	Mon Feb 16 16:57:39 1987
--- /usr/src/usr.bin/f77/io.c	Mon Nov 19 20:06:47 2001
***************
*** 252,264 ****
  
  if(p = V(IOSEND))
  	if(ISICON(p))
! 		ioendlab = mklabel(p->const.ci)->labelno;
  	else
  		error("bad end= clause",0,0,ERR);
  
  if(p = V(IOSERR))
  	if(ISICON(p))
! 		ioerrlab = mklabel(p->const.ci)->labelno;
  	else
  		error("bad err= clause",0,0,ERR);
  
--- 252,264 ----
  
  if(p = V(IOSEND))
  	if(ISICON(p))
! 		ioendlab = mklabel(p->xconst.ci)->labelno;
  	else
  		error("bad end= clause",0,0,ERR);
  
  if(p = V(IOSERR))
  	if(ISICON(p))
! 		ioerrlab = mklabel(p->xconst.ci)->labelno;
  	else
  		error("bad err= clause",0,0,ERR);
  
***************
*** 644,650 ****
  		ioset(TYADDR, fmtoff, addrof(cpexpr(p)) );
  	else if( ISICON(p) )
  		{
! 		if( (k = fmtstmt( mklabel(p->const.ci) )) > 0 )
  			ioset(TYADDR, fmtoff, mkaddcon(k) );
  		else
  			ioformatted = UNFORMATTED;
--- 644,650 ----
  		ioset(TYADDR, fmtoff, addrof(cpexpr(p)) );
  	else if( ISICON(p) )
  		{
! 		if( (k = fmtstmt( mklabel(p->xconst.ci) )) > 0 )
  			ioset(TYADDR, fmtoff, mkaddcon(k) );
  		else
  			ioformatted = UNFORMATTED;
*** /usr/src/usr.bin/f77/pdp11.c.old	Fri Jun  9 20:34:02 1995
--- /usr/src/usr.bin/f77/pdp11.c	Mon Nov 19 20:06:48 2001
***************
*** 349,355 ****
  	addreg(argloc = 4);
  else
  	{
! 	addreg( argloc = argvec->memoffset->const.ci );
  	if(proctype == TYCHAR)
  		{
  		mvarg(TYADDR, 0, chslot);
--- 349,355 ----
  	addreg(argloc = 4);
  else
  	{
! 	addreg( argloc = argvec->memoffset->xconst.ci );
  	if(proctype == TYCHAR)
  		{
  		mvarg(TYADDR, 0, chslot);
*** /usr/src/usr.bin/f77/proc.c.old	Mon Jan  3 22:18:51 1994
--- /usr/src/usr.bin/f77/proc.c	Mon Nov 19 20:06:51 2001
***************
*** 304,316 ****
  type = np->vtype;
  if(proctype == TYUNKNOWN)
  	if( (proctype = type) == TYCHAR)
! 		procleng = (np->vleng ? np->vleng->const.ci : (ftnint) 0);
  
  if(proctype == TYCHAR)
  	{
  	if(type != TYCHAR)
  		error("noncharacter entry of character function",0,0,ERR);
! 	else if( (np->vleng ? np->vleng->const.ci : (ftnint) 0) != procleng)
  		error("mismatched character entry lengths",0,0,ERR);
  	}
  else if(type == TYCHAR)
--- 304,316 ----
  type = np->vtype;
  if(proctype == TYUNKNOWN)
  	if( (proctype = type) == TYCHAR)
! 		procleng = (np->vleng ? np->vleng->xconst.ci : (ftnint) 0);
  
  if(proctype == TYCHAR)
  	{
  	if(type != TYCHAR)
  		error("noncharacter entry of character function",0,0,ERR);
! 	else if( (np->vleng ? np->vleng->xconst.ci : (ftnint) 0) != procleng)
  		error("mismatched character entry lengths",0,0,ERR);
  	}
  else if(type == TYCHAR)
***************
*** 345,351 ****
  	if(nentry == 1)
  		retslot = autovar(1, TYDREAL, NULL);
  	np->vstg = STGAUTO;
! 	np->voffset = retslot->memoffset->const.ci;
  	}
  
  for(p = ep->arglist ; p ; p = p->nextp)
--- 345,351 ----
  	if(nentry == 1)
  		retslot = autovar(1, TYDREAL, NULL);
  	np->vstg = STGAUTO;
! 	np->voffset = retslot->memoffset->xconst.ci;
  	}
  
  for(p = ep->arglist ; p ; p = p->nextp)
***************
*** 459,469 ****
  	return(-1);
  if(q->vdim)
  	if( ISICON(q->vdim->nelt) )
! 		leng *= q->vdim->nelt->const.ci;
  	else	return(-1);
  if(q->vleng)
  	if( ISICON(q->vleng) )
! 		leng *= q->vleng->const.ci;
  	else 	return(-1);
  return(leng);
  }
--- 459,469 ----
  	return(-1);
  if(q->vdim)
  	if( ISICON(q->vdim->nelt) )
! 		leng *= q->vdim->nelt->xconst.ci;
  	else	return(-1);
  if(q->vleng)
  	if( ISICON(q->vleng) )
! 		leng *= q->vleng->xconst.ci;
  	else 	return(-1);
  return(leng);
  }
***************
*** 495,505 ****
  			v->voffset = p->extleng;
  			v->vardesc.varno = p - extsymtab;
  			if(type == TYCHAR)
! 				size = v->vleng->const.ci;
  			else	size = typesize[type];
  			if(t = v->vdim)
  				if( (neltp = t->nelt) && ISCONST(neltp) )
! 					size *= neltp->const.ci;
  				else
  					error("adjustable array in common", v, 0, DCLERR);
  			p->extleng += size;
--- 495,505 ----
  			v->voffset = p->extleng;
  			v->vardesc.varno = p - extsymtab;
  			if(type == TYCHAR)
! 				size = v->vleng->xconst.ci;
  			else	size = typesize[type];
  			if(t = v->vdim)
  				if( (neltp = t->nelt) && ISCONST(neltp) )
! 					size *= neltp->xconst.ci;
  				else
  					error("adjustable array in common", v, 0, DCLERR);
  			p->extleng += size;
***************
*** 555,561 ****
  
  if(t == TYCHAR)
  	if( ISICON(lengp) )
! 		leng = lengp->const.ci;
  	else	{
  		error("automatic variable of nonconstant length",0,0,FATAL);
  		}
--- 555,561 ----
  
  if(t == TYCHAR)
  	if( ISICON(lengp) )
! 		leng = lengp->xconst.ci;
  	else	{
  		error("automatic variable of nonconstant length",0,0,FATAL);
  		}
***************
*** 597,603 ****
  
  if(type==TYCHAR)
  	if( ISICON(lengp) )
! 		leng = lengp->const.ci;
  	else	{
  		error("adjustable length",0,0,ERR);
  		return( errnode() );
--- 597,603 ----
  
  if(type==TYCHAR)
  	if( ISICON(lengp) )
! 		leng = lengp->xconst.ci;
  	else	{
  		error("adjustable length",0,0,ERR);
  		return( errnode() );
***************
*** 606,612 ****
  	{
  	q = p->datap;
  	if(q->vtype==type && q->ntempelt==nelt &&
! 	    (type!=TYCHAR || q->vleng->const.ci==leng) )
  		{
  		oldp->nextp = p->nextp;
  		free(p);
--- 606,612 ----
  	{
  	q = p->datap;
  	if(q->vtype==type && q->ntempelt==nelt &&
! 	    (type!=TYCHAR || q->vleng->xconst.ci==leng) )
  		{
  		oldp->nextp = p->nextp;
  		free(p);
***************
*** 695,701 ****
  	if( (v->vtype = lengtype(type, length))==TYCHAR && length!=0)
  		v->vleng = ICON(length);
  	}
! else if(v->vtype!=type || (type==TYCHAR && v->vleng->const.ci!=length) )
  	error("incompatible or duplicate type declaration", v, 0, DCLERR);
  /*! added "or duplicate" to error message PLWard 10/80 */
  }
--- 695,701 ----
  	if( (v->vtype = lengtype(type, length))==TYCHAR && length!=0)
  		v->vleng = ICON(length);
  	}
! else if(v->vtype!=type || (type==TYCHAR && v->vleng->xconst.ci!=length) )
  	error("incompatible or duplicate type declaration", v, 0, DCLERR);
  /*! added "or duplicate" to error message PLWard 10/80 */
  }
*** /usr/src/usr.bin/f77/put.c.old	Mon Feb 16 16:57:40 1987
--- /usr/src/usr.bin/f77/put.c	Mon Nov 19 20:06:53 2001
***************
*** 154,160 ****
  switch(type = p->vtype)
  	{
  	case TYCHAR:
! 		if(p->vleng->const.ci > XL)
  			break;	/* too long for literal table */
  		litflavor = 1;
  		goto loop;
--- 154,160 ----
  switch(type = p->vtype)
  	{
  	case TYCHAR:
! 		if(p->vleng->xconst.ci > XL)
  			break;	/* too long for literal table */
  		litflavor = 1;
  		goto loop;
***************
*** 176,184 ****
  			if(type == litp->littype) switch(litflavor)
  				{
  			case 1:
! 				if(p->vleng->const.ci != litp->litval.litcval.litclen)
  					break;
! 				if(! eqn( (int) p->vleng->const.ci, p->const.ccp,
  					litp->litval.litcval.litcstr) )
  						break;
  
--- 176,184 ----
  			if(type == litp->littype) switch(litflavor)
  				{
  			case 1:
! 				if(p->vleng->xconst.ci != litp->litval.litcval.litclen)
  					break;
! 				if(! eqn( (int) p->vleng->xconst.ci, p->xconst.ccp,
  					litp->litval.litcval.litcstr) )
  						break;
  
***************
*** 188,199 ****
  				return(q);
  
  			case 2:
! 				if(p->const.cd[0] == litp->litval.litdval)
  					goto ret;
  				break;
  
  			case 3:
! 				if(p->const.ci == litp->litval.litival)
  					goto ret;
  				break;
  				}
--- 188,199 ----
  				return(q);
  
  			case 2:
! 				if(p->xconst.cd[0] == litp->litval.litdval)
  					goto ret;
  				break;
  
  			case 3:
! 				if(p->xconst.ci == litp->litval.litival)
  					goto ret;
  				break;
  				}
***************
*** 205,222 ****
  			switch(litflavor)
  				{
  				case 1:
! 					litp->litval.litcval.litclen = p->vleng->const.ci;
  					cpn( (int) litp->litval.litcval.litclen,
! 						p->const.ccp,
  						litp->litval.litcval.litcstr);
  					break;
  
  				case 2:
! 					litp->litval.litdval = p->const.cd[0];
  					break;
  
  				case 3:
! 					litp->litval.litival = p->const.ci;
  					break;
  				}
  			}
--- 205,222 ----
  			switch(litflavor)
  				{
  				case 1:
! 					litp->litval.litcval.litclen = p->vleng->xconst.ci;
  					cpn( (int) litp->litval.litcval.litclen,
! 						p->xconst.ccp,
  						litp->litval.litcval.litcstr);
  					break;
  
  				case 2:
! 					litp->litval.litdval = p->xconst.cd[0];
  					break;
  
  				case 3:
! 					litp->litval.litival = p->xconst.ci;
  					break;
  				}
  			}
***************
*** 233,239 ****
  	case TYLOGICAL:
  	case TYSHORT:
  	case TYLONG:
! 		prconi(asmfile, type, p->const.ci);
  		break;
  
  	case TYCOMPLEX:
--- 233,239 ----
  	case TYLOGICAL:
  	case TYSHORT:
  	case TYLONG:
! 		prconi(asmfile, type, p->xconst.ci);
  		break;
  
  	case TYCOMPLEX:
***************
*** 249,263 ****
  
  	flpt:
  		for(i = 0 ; i < k ; ++i)
! 			prconr(asmfile, type, p->const.cd[i]);
  		break;
  
  	case TYCHAR:
! 		putstr(asmfile, p->const.ccp, p->vleng->const.ci);
  		break;
  
  	case TYADDR:
! 		prcona(asmfile, p->const.ci);
  		break;
  
  	default:
--- 249,263 ----
  
  	flpt:
  		for(i = 0 ; i < k ; ++i)
! 			prconr(asmfile, type, p->xconst.cd[i]);
  		break;
  
  	case TYCHAR:
! 		putstr(asmfile, p->xconst.ccp, p->vleng->xconst.ci);
  		break;
  
  	case TYADDR:
! 		prcona(asmfile, p->xconst.ci);
  		break;
  
  	default:
*** /usr/src/usr.bin/f77/putdmr.c.old	Thu Nov 12 21:57:38 1992
--- /usr/src/usr.bin/f77/putdmr.c	Mon Nov 19 20:06:56 2001
***************
*** 210,221 ****
  				if(type == TYSHORT)
  					{
  					p2op2(P2ICON, P2SHORT);
! 					p2i( (short)(p->const.ci) );
  					}
  				else
  					{
  					p2op2(P2LCON, P2LONG);
! 					p2li(p->const.ci);
  					}
  				free(p);
  				break;
--- 210,221 ----
  				if(type == TYSHORT)
  					{
  					p2op2(P2ICON, P2SHORT);
! 					p2i( (short)(p->xconst.ci) );
  					}
  				else
  					{
  					p2op2(P2LCON, P2LONG);
! 					p2li(p->xconst.ci);
  					}
  				free(p);
  				break;
***************
*** 224,230 ****
  				p2op(P2NAME);
  				p2i(P2STATIC);
  				p2i(P2INT);
! 				p2i( (int) p->const.ci);
  				p2op2(P2ADDR, P2PTR);
  				free(p);
  				break;
--- 224,230 ----
  				p2op(P2NAME);
  				p2i(P2STATIC);
  				p2i(P2INT);
! 				p2i( (int) p->xconst.ci);
  				p2op2(P2ADDR, P2PTR);
  				free(p);
  				break;
***************
*** 494,500 ****
  int type;
  int ncomma;
  
! if(!ISICON(p->rightp) || (k = p->rightp->const.ci)<2)
  	error("putpower: bad call",0,0,FATAL);
  base = p->leftp;
  type = base->vtype;
--- 494,500 ----
  int type;
  int ncomma;
  
! if(!ISICON(p->rightp) || (k = p->rightp->xconst.ci)<2)
  	error("putpower: bad call",0,0,FATAL);
  base = p->leftp;
  type = base->vtype;
***************
*** 798,804 ****
  				break;
  
  			case OPCONV:
! 				if(!ISICON(p->vleng) || p->vleng->const.ci!=1
  				   || ! INT(p->leftp->vtype) )
  					error("putch1: bad character conversion",0,0,FATAL);
  				t = mktemp(TYCHAR, ICON(1) );
--- 798,804 ----
  				break;
  
  			case OPCONV:
! 				if(!ISICON(p->vleng) || p->vleng->xconst.ci!=1
  				   || ! INT(p->leftp->vtype) )
  					error("putch1: bad character conversion",0,0,FATAL);
  				t = mktemp(TYCHAR, ICON(1) );
***************
*** 963,969 ****
  	}
  else
  	funct = 0;
! if(p->memoffset && (!ISICON(p->memoffset) || p->memoffset->const.ci!=0) )
  	offp = cpexpr(p->memoffset);
  else
  	offp = NULL;
--- 963,969 ----
  	}
  else
  	funct = 0;
! if(p->memoffset && (!ISICON(p->memoffset) || p->memoffset->xconst.ci!=0) )
  	offp = cpexpr(p->memoffset);
  else
  	offp = NULL;
*** /VERSION.old	Tue Dec  4 19:33:14 2001
--- /VERSION	Wed Jan 30 20:00:45 2002
***************
*** 1,5 ****
! Current Patch Level: 441
! Date: December 4, 2001
  
  2.11 BSD
  ============
--- 1,5 ----
! Current Patch Level: 442
! Date: January 30, 2002
  
  2.11 BSD
  ============
