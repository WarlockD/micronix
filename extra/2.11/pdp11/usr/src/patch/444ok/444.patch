*** /usr/src/libexec/getty/main.c.OLD	Fri Dec  9 22:42:41 1994
--- /usr/src/libexec/getty/main.c	Mon Feb 10 20:25:16 2003
***************
*** 9,15 ****
  "@(#) Copyright (c) 1980 Regents of the University of California.\n\
   All rights reserved.\n";
  
! static char sccsid[] = "@(#)main.c	5.5.1 (2.11BSD GTE) 12/9/94";
  #endif
  
  /*
--- 9,15 ----
  "@(#) Copyright (c) 1980 Regents of the University of California.\n\
   All rights reserved.\n";
  
! static char sccsid[] = "@(#)main.c	5.5.2 (2.11BSD) 2003/2/10";
  #endif
  
  /*
***************
*** 383,391 ****
  	char c;
  
  	c = cc;
! 	c |= partab[c&0177] & 0200;
! 	if (OP)
! 		c ^= 0200;
  	if (!UB) {
  		outbuf[obufcnt++] = c;
  		if (obufcnt >= OBUFSIZ)
--- 383,400 ----
  	char c;
  
  	c = cc;
! /*
!  * If "any" parity do nothing otherwise set even parity unless OP is
!  * set.  Since 'ap' is set in the "default" entry of /etc/gettytab this
!  * has the effect of disabling parity on output without having to change
!  * the kernel.
! */
! 	if (!AP) {
! 	   c |= partab[c & 0177] & 0200;
! 	   if (OP)
! 	      c ^= 0200;
! 	}
! 
  	if (!UB) {
  		outbuf[obufcnt++] = c;
  		if (obufcnt >= OBUFSIZ)
*** /usr/src/ucb/ftp/ftp.c.OLD	Thu Oct  2 22:34:54 1997
--- /usr/src/ucb/ftp/ftp.c	Sun Aug 18 16:11:39 2002
***************
*** 16,22 ****
   */
  
  #if	!defined(lint) && defined(DOSCCS)
! static char sccsid[] = "@(#)ftp.c	5.28.1 (2.11BSD) 1997/10/2";
  #endif
  
  #include <sys/param.h>
--- 16,22 ----
   */
  
  #if	!defined(lint) && defined(DOSCCS)
! static char sccsid[] = "@(#)ftp.c	5.28.2 (2.11BSD) 2002/8/18";
  #endif
  
  #include <sys/param.h>
***************
*** 1700,1703 ****
--- 1700,1742 ----
  		}
  	}
  	return(new);
+ }
+ 
+ #include <sgtty.h>
+ 
+ char *
+ getpass(prompt)
+ char *prompt;
+ {
+ 	struct sgttyb ttyb;
+ 	int flags;
+ 	register char *p;
+ 	register c;
+ 	FILE *fi;
+ 	static char pbuf[129];
+ 	int (*signal())();
+ 	int (*sig)();
+ 
+ 	if ((fi = fdopen(open("/dev/tty", 2), "r")) == NULL)
+ 		fi = stdin;
+ 	else
+ 		setbuf(fi, (char *)NULL);
+ 	sig = signal(SIGINT, SIG_IGN);
+ 	ioctl(fileno(fi), TIOCGETP, &ttyb);
+ 	flags = ttyb.sg_flags;
+ 	ttyb.sg_flags &= ~ECHO;
+ 	ioctl(fileno(fi), TIOCSETP, &ttyb);
+ 	fprintf(stderr, "%s", prompt); fflush(stderr);
+ 	for (p=pbuf; (c = getc(fi))!='\n' && c!=EOF;) {
+ 		if (p < &pbuf[sizeof (pbuf) - 1])
+ 			*p++ = c;
+ 	}
+ 	*p = '\0';
+ 	fprintf(stderr, "\n"); fflush(stderr);
+ 	ttyb.sg_flags = flags;
+ 	ioctl(fileno(fi), TIOCSETP, &ttyb);
+ 	signal(SIGINT, sig);
+ 	if (fi != stdin)
+ 		fclose(fi);
+ 	return(pbuf);
  }
*** /VERSION.OLD	Sun Aug  4 09:37:10 2002
--- /VERSION	Mon Feb 10 19:30:35 2003
***************
*** 1,5 ****
! Current Patch Level: 443
! Date: August 4, 2002
  
  2.11 BSD
  ============
--- 1,5 ----
! Current Patch Level: 444
! Date: February 10, 2003
  
  2.11 BSD
  ============
