#!/bin/sh
# this comment and the escaped newline is needed \
exec wish "$0" ${1+"$@"}

#
# predicate for input validation
#
proc ishexaddr {s} {
	if {! [string is xdigit $s]} {
		return 0
	}
	if {[string length $s] > 4} {
		return 0
	}
	return 1
}

proc addrbox {name tag var func} {
	labelframe $name
	frame $name.addr
	grid \
		[label $name.addr.tag -text $tag] \
		[entry $name.addr.entry -textvariable $var -width 4 -validate key -vcmd {ishexaddr %P}]
	text $name.data -width 80 -height 10 
	$name configure -labelwidget $name.addr
	bind $name.addr.entry <Return> $func
}

set daddr 1000
set maddr 1000

proc disat {} {
	global daddr
	.disas.data delete 1.0 end
	.disas.data insert 1.0 "disas at $daddr"
}

proc dumpat {} {
	global maddr
	.mem.data delete 1.0 end
	.mem.data insert 1.0 "dump at $maddr"
}

addrbox .disas "Disassembly:" daddr disat
addrbox .mem "Memory:" maddr dumpat

labelframe .regs -text "Registers"

text .disas.code -width 80 -height 10

proc reg {r} {
	labelframe .regs.r$r -text $r
	pack [entry .regs.r$r.v -justify right -width 4 -validate key -vcmd {ishexaddr %P}]
	bind .regs.r$r.v <Return> { 
		set tmp [%W get]
		%W delete 0 end
		while {[string length $tmp] < 4} {
			set tmp "0$tmp"
		}
		%W insert 0 "$tmp"
	}
}

foreach r {PC AF BC DE HL IX IY SP BC2 DE2 HL2 IR} {
	reg $r
}

pack {*}[winfo children .disas] -fill x
pack {*}[winfo children .mem] -fill x
pack {*}[winfo children .regs] -side left
pack {*}[winfo children .] -fill x
