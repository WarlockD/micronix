.he " macro (1)                   3/18/82                    macro (1)"
.fo "                               -#-"   
.in 5
.rm 65
.bd
PROGRAM
.br
.in +5
.bd
macro
- macro expansion


.in -5
.bd
USAGE    
.br
.in +5
.bd
macro
.in -5


.bd
FUNCTION
.in +5
.fi
The standard input is copied to the standard output, with
macros expanded along the way.
After encountering
a line of the form:
.br
.sp
.in +8
.bd
define(token,string)
.br
.sp
.in -8
the token will be replaced by the string everywhere it appears.
A token is a contiguous string of alphanumerics 
delimited by non-alphanumerics.
Macro exansions are applied recursively
[i.e. define(a,b) define(b,c) is equivalent to define(a,c)].
Macros may be defined with arguments.
If the sequence $n where n is a digit occurs in the defining string,
$n will be replaced by the nth argument.
$1 is the first argument.
In an instance where a macro has fewer than n arguments,
$n is replaced by the null string, (i.e., simply ignored).
An example:
.sp
.br
.in +8
.bd
define(add, $1 + $2 + $3)
.br
.bd
add(firstarg, secondarg, thirdarg)
.br
.in -8
.sp
would produce:
.sp
.in +8
.bd
firstarg + secondarg + thirdarg
.sp 2
.in -8
.in -5
.bd
EXAMPLE
.br
.in +5
.nf
As a language preprocessor stage:
.sp
.in +8
.bd
macro <program >tm1
.in -8
.sp 2
.in -5
.bd
SEE ALSO
.in +5
include (1), ratfor (1)
