.he "sh (1)                       4/18/82                       sh (1)"
.fo "                               -#-"
.in 5
.rm 65
.bd
PROGRAM
.in +5
.br
.bd
sh


.in -5
.bd
USAGE           
.in +5
.br
.bd
sh [-v] [-c command]


.in -5
.bd
FUNCTION   
.in +5
.br
The 
.bd
shell 
establishes an interface between the user and the Micronix operating system.
It is a general purpose command interpreter and
it should be noted at this point that
the 
.bd
shell 
is just another process to Micronix; it is by no means the
final word in command interpreters.  
The user may wish to write his/her own command interpreter.
That is to say, the 
.bd
shell 
is not part of the operating system,
but merely serves to provide convenient access to the system's facilities.

The Micronix command interpreter, or 
.bd
shell, 
provides convenient access to the Micronix system facilities.
It is intended to be simple, even transparent, to use.

In normal operation, the 
.bd
shell 
enters interactive mode
and successively reads, interprets, and
executes commands.

When it receives a line of input, the 
.bd
shell 
first breaks it into "words".
Normally a word is a cluster of symbols surrounded
by white space.
Certain symbols have special meaning to the 
.bd
shell,
i.e. characters in the set 
.bd
< >  &  |  `  "  ( ).

When encountered, they are treated as separated entities, 
regardless of the presence or absence of surrounding white space.


.bd
Shell Features:


.bd
Command Execution.

The first word of a command has special meaning for the 
.bd
shell.
It expects this word to be the "command name".
When it encounters a word which it does not recognize,
the 
.bd
shell 
assumes it refers to a program, which it then
attempts to find and execute.


.bd
Path Searching.

If it fails to find the command, it prints an error message.
The 
.bd
shell 
searches for commands in a series of pre-specified directories
called the "search path".
The default search path is ".", "/bin", "/usr/bin".
The 
.bd
shell's 
current idea of the search path may be examined or changed
by the built-in "path" command discussed below.
If the first word of a command contains a 
.bd
/ 
(slash) character, then the
normal path searching mechanism is disabled and the 
.bd
shell
attempts to execute the exact name specified.


.bd
Directory Hashing.

The 
.bd
shell 
internalizes the
contents of the directories
in the search path, so that in order to locate a command,
it does not need to refer to the file system.
This  function is intended to be transparent.
If, however, a program is added or removed to one of the
directories in the search path in the middle of a session,
(normally a very rare occurrence)
the 
.bd
shell's 
internal tables will disagree.
In this case it may be necessary to enter the command's name twice,
(causing the 
.bd
shell 
to remake its internal tables).
There is a significant speed payoff to this way of doing things.
.sp  2
.bd
I/O Redirection

There is the concept of standard input, standard output, and
standard error.

An accepted way to fashion programs is to have them
read from the standard input, write to the standard output,
and send error or other transient messages to the standard error.

By default, each process is set up so that
its standard input is read from the controlling terminal and 
standard output and error are written to the terminal.  The 
.bd
shell 
has provision to change this.  You may arrange to have input 
and/or output read from/written to files or other processes instead.
In the following example, the command is read from the file.
.nf

.bd
	command < file
.bp
.bd
Input Redirection.
.fi

Arrangements may also be made so that the command's standard input 
becomes the file:

.nf
.bd
	command > file

.bd
	command >> file

.bd
	command >& file

.bd
	command >>& file


.fi
.bd
Output Redirection.

In the first form, (>), the command's standard output is 
sent to the named file, destroying its previous contents.
The second form, (>>),
.ul
appends 
the command's output to the 
.ul
end
of the named file.
In the third form, (>&), 
.ul
both 
the standard output and the standard error
are sent to the named file.
The last form is the same as the third, except the option is 
appended to the end of the named file. 
.br
An expression of the form
.bd
"(a > b) >& c"
can be used
to split the output from the command a,
standard output to file b, standard error to file c.


.bd
Pipes.

Commands may be piped together, that is, the standard output of
one process can be "connected" to the standard input of another.
The processes are run concurrently.
A "|" (vertical bar) is the symbol denoting a pipe.
The following command line

.nf
.bd
	print file | lpr,

.fi
would send the output of the print command to the input
of the 
.bd
lpr 
command.

The 
.bd
shell 
has its own syntax for a linear array of pipes, limited in 
length only by the
maximum available number of processes.
As an example:

.nf
.bd
	cat file  find word1 | find word2 | words

.bd
	comm1 | comm2 | comm3 | comm5 | ... etc.
.fi


.bd
Asynchronous Commands.

It is possible to run a command asynchronously, or in the background.
Normally, a command is run and the 
.bd
shell 
waits for it to finish before prompting for additional input.
When a command is run asynchronously, however, the 
.bd
shell 
does not wait, but returns immediately, while the command continues
to execute parallel to the 
.bd
shell.
With  this facility, a single user on a single terminal can be
doing several things at once.
A pipeline followed by an ampersand on the command line causes 
all of the processes in the pipeline to be run asynchronously.
When an asynchronous command completes or is abnormally terminated, the 
.bd
shell 
gives  notification.
The process ID is given when the asynchronous process is dispatched.

Example: 

.bd
	ls -l&


.bd
Argument Expansion.

All words in the command line are subject to expansion.
Words are expanded with the following characters:

.nf
.bd
	*  ?  [...]  [^...] 

.fi
If a word contains any of these constructions, it is 
evaluated as a pattern to be matched against the set of extant file names.
That is, the given word will be replaced by the list of all file
names it matches.

Following are the rules for pattern matching.

.ta 10
.in +10
.ti -10
*	This character is "wild card" of sorts, matching any 
number of characters, and any character, including zero.

.ti -10
?	Matches any single character.

.ti -10
[ ... ]	Matches any single character listed within the brackets.

.ti -10
[^...]	Matches any single character NOT within the brackets.

.ti -10
x	Ordinary characters match themselves.


.in -10
Matching patterns may be composed of arbitrary arrangements of the above
constructs.

If a string of characters is enclosed in quotation marks ("), all argument
expansion is disabled.
.bp
If a string of characters is enclosed in grave accents (`), that
string is interrupted as a command, executed and replaced by the 
output of the command and broken into words.

Within braces ([]) there may appear expressions of the form X-Y, meaning
that all of the characters between X and Y are inclusive.

Example:

.nf
.bd
	[A-Za-z] 

.fi
would match any single upper or lower case letter.


.bd
Grouping of Commands

Commands may be grouped together arbitrarily by using parenthesis.
When enclosed in parentheses, any arbitrary command or series of commands
is treated as a simple command.

Example:

.nf
.bd
	(cd a; comm1) | (cd b; comm2)

.fi
would run the first part of the pipeline
in directory "a" and the second in directory "b".

Parenthetical expressions may be nested.
There are limits on the maximum number of processes allowed, however.

To run a series of commands in the background, for example;

.nf
.bd
	(comm1; comm2; comm3)&


.fi
.bd
Sequential Execution Operator

More than one command may be put on a line by separating
the command with semicolons (;)

Example
.nf
.bd
	command1; command2

.fi
The commands are executed sequentially in the order given
(left to right).
.bp
.bd
Built-In Commands

There are a number of commands internal to the 
.bd
shell:


.bd
alias 

.bd
alias name1 name2
.sp 
.bd
alias name3 "a complex command with embedded spaces"

Aliasing provides the facility to rename or develop abbreviations
for commands.
The first form prints the current list of aliases in effect.
The others introduce a new alias.
After these alias commands have been typed to the shell,
giving the command "name1" will result in issuing the command name2.
That is to say the right hand word or group of words
is substituted for the left.
Use 
.bd
unalias 
(see below) to turn off an alias.

How to use 
.bd
alias:

If you find you
frequently type a long and cumbersome command, you should consider
setting up an alias for it.

Some often-used commands are:

.in +5
.bd 5
far /dev/fla -xv
.br
mount /dev/fla /f
.br
umount /dev/fla
.in -5

To set up
.bd 
alias,
edit the 
.bd
.sh 
file in your home directory (the directory in which you find yourself when
you first log in).
Add lines like the following:

.in +5
.bd 5
alias x "far /dev/fla -xv"
.br
alias m "mount /dev/fla /f"
.br
alias u "umount /dev/fla"

.in -5
Next time you log in,
all of these "aliases" will be automatically set in the shell.
You may type just the one letter abbreviation for the long command.

You may view the alias table by typing "alias".
An "alias" is eliminated with
.bd 
unalias.

Note that this feature may also be used to smooth over trivial 
name differences found in
different systems.
If you are used to typing something else for one of the 
commands, make yourself an "alias."
.bp
.bd
chdir (cd)

.bd
chdir name

.fi
These change the current directory.
Micronix maintains the concept of a current directory.
The first form changes the current directory to the home directory
(described below).
The second form changes to the named directory.  The command,
.bd
cd 
is synonymous to 
.bd
chdir, 
and is easier to type.


.nf
.bd
dir

.bd
dir name

.bd
dir names

.fi
The "dir" is short for "directory".  The first form list the 
files in the current directory.  The second lists the files  in 
the directory, "name".
The third prints the list of names.
All forms print their  display in an easily read, alphabetized 
and columnar form.


.nf
.bd
echo

.bd
echo args

.fi	
The first command toggles the 
.bd
shell's 
command echoing feature.  The second prints the arguments.


.nf
.bd
home

.bd
home name

.fi
These commands examine or change the home directory.
The first form prints the 
.bd
shell's 
currently remembered home directory name.


.nf
.bd
kill N

.bd
kill name

.fi
The first version kills the process whose numerical id is N.
(Id's are reported by the ps command, and by the shell when
a background process is initiated.)
The second version kills the process with the given
command name (the name by which the process was invoked,
which is also reported by ps).


.nf
.bd
nice N command ...

.fi
Nice runs the following command in a way that is "nice"
to other users on the system, ie, at low priority.
The larger the value of N (up to 127), the lower the
scheduling priority will be. Conversely, the super-user
can be "mean" by specifying a negative nice (to -128).
A nice of 4 is recommended to keep background programs
inconspicuous.


.nf
.bd
prompt word

.fi
This command changes the 
.bd
shell's 
prompt.  The prompt is changed to the given word.
The default prompt is 
.bd
%  
or 
.bd
#; 
the 
.bd
# 
prompt indicates super-user.


.nf
.bd
source file

.fi
The 
.bd
shell 
takes its next input from the named file instead of the standard input.
Input is again taken from standard input upon
reaching the end of the file. A "source" may be nested,
that is, a named file may contain another source command.


.nf
.bd
sync

.fi
This  command calls the 
.bd
sync 
system call (mass storage synchronization, see Section 2).  It
insures that all information destined for mass storage devices is 
actually written out.
.bd
Sync 
should always be called before bringing the system down to insure 
the integrity of the file system(s).


.nf
.bd
type file(s)

.fi
The contents of each of the named files are printed verbatim
on the standard output.


.nf
.bd
unalias name

.fi
The given name is removed from the alias table.


.bd
wait

.fi
This  command causes a wait until all all asynchronous processes (if any) 
have completed.
.bd
Wait 
may be prematurely interrupted by pressing the RUB-OUT or DELETE key.

