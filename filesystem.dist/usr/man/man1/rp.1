.he "rp (1)                   3/18/82                   rp (1)"
.fo "                               -#-" 
.in 5
.rm 65
.bd
PROGRAM
.in +5
.br
.bd
rp
- rational_pilot -> pilot translator


.in -5
.bd
USAGE         
.br
.in +5
.bd
rp
<rational_pilot_file >pilot_file
.sp 2
.in -5
.bd
FUNCTION   
.in +5
.br
.fi
The 
.bd
rp 
preprocessor for pilot enables you to write programs in
the free-form structured language "rational pilot", then
automatically translate them into standard pilot
for interpretation by the "pilot" command.
This implementation incorporates
.bd
include
and
.bd
macro
capabilities.
.bd
Rp
reads from the standard input and writes to the standard
output.
.sp
Lines of the form:
.sp
.in +8
.bd
include file
.sp
.in -8
are replaced by the contents of the named file.
.bd
Includes 
may be nested.
.sp
Macro definitions such as:
.sp
.in +8
.bd
define(token, string)
.sp
.in +3
or
.sp
.in -3
.bd
define(token, ...$1...$2...$3...)
.br
.sp
.in -8
may appear.
The left parenthesis must follow the word define immediately.
In the first case, 
.bd
string 
is merely substituted for 
.bd
token
everywhere it appears.
In the second, occurrences of the form:
.sp
.ti +8
.bd
token(arga, argb, argc)
.sp
are replaced by the defining string, but with the values substituted for
the arguments.
The construction $n, where n is a decimal digit, signifies
the nth argument.  A given macro
may have at most nine arguments.
Macro definitions may be recursive.
.br
.sp
Any valid pilot statement is a valid 
.bd
rp 
statement.
A statement or group of statements may be enclosed in
curly brackets "{" and "}".
The result is treated as a single statement.
In addition to standard pilot, 
the following are understood:
.bp
.bd
if (condition) statement;
.sp
.in +5
The statement is executed if the condition is true.
The condition may be either a match query or a
define query (see pilot (I)).
.sp
.in  -5
.bd
if (condition) statement; else statement;
.sp
.in +5
If the condition is true, the first statement is executed,
otherwise the second statement is executed.
For example

.nf
	t: Give me your answer true.
	a:
	if (m: y)
		{
		t: Oh, Joy!
		t: ...
		}
	else if (m: n)
		t: Oh, Woe!
	else
		t: Eh?

.fi
An 
.bd
else 
goes with the last un-elsed 
.bd
if.
.sp
.in -5
.bd
while (condition) statement;
.sp
.in +5
The statement is executed repeatedly as long as the condition remains
true (possibly zero times as the condition is always tested before
the statement is executed.)
The condition may not be left out.
For an infinite loop, see
.bd
repeat
below.
.br
.sp
.in -5
.bd
for (statement; condition; statement) statement;
.sp
.in +5
First, the first statement is executed.
Then repeatedly the condition is tested, and if true,
the last statement is executed, then the second.
If the condition is false, the loop is broken and
control proceeds to the next statement following the 
.bd
for.
More clearly: the first statement is the initializer of the loop,
the second is the incrementation, and the last is the body of the loop.
.br
.sp
.in -5
.bd
repeat
statement;
.sp
.in +5
The statement is executed repeatedly.
.br
.sp
.in -5
.bd
repeat
statement;
.bd
until
(condition);
.sp
.in +5
The statement is executed repeatedly until the condition is true.
The condition is always tested after the statement is executed, which
is to say, the statement will always be executed at least once.
.sp
.in -5
.bd
break;
.sp
.in +5
One level of 
.bd
while, 
.bd
for, 
or 
.bd
repeat, 
loop is broken out of.
.sp
.in -5
.bd
next;
.sp
.in +5
Transfers control to the looping mechanism of the innermost
.bd
while, 
.bd
for, 
or 
.bd
repeat, 
in which it occurs.
.sp 2
.in -5
.bd
ALSO READ
.br
.in +5
.fi
Kernighan, B.W. and P.J. Plauger,
.ul
Software Tools,
(Addison-Wesley, 1976).
