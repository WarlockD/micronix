.he "lord (1)                     4/13/82                     lord (1)"
.fo "                               -#-"
.in 5
.rm 65
.bd
PROGRAM
.in +5
.br
.bd
lord
- order libraries
.sp 2
.in -5
.bd
USAGE
.in +5
.br
lord -[c* d* i r* s]             
.sp 2
.in -5
.bd
FUNCTION
.in +5
.br
.bd
Lord
reads in a list of module names, with associated interdepencies, from
STDIN, and outputs to STDOUT a topologically sorted list of module
names such that, if at all possible, no module depends on an earlier
module in the list.  Each module is introduced by a line containing
its name followed by a colon.  Subsequent lines are interpreted
as either:
.sp 2
.in +8
.ta 8
.ti -8
defs	- things defined by the module,

.ti -8
refs	- things referred to by the module, or

other stuff.

.in -8
Refs and defs have the syntax given by one or more formats entered
as flags on the command line.  Each character of the format must match
the corresponding character at the beginning of an input line; a ?
will match any character except newline.  If all characters of the format
match, the rest of the input line is taken as a ref or def name.  Thus,
the format flag "-d0x????D" would identify as valid def any line
beginning with "0x", four arbitrary characters and a "D", so that
the input line "0x3ff0D_inbuf" would be taken as a def named "_inbuf".

The flags are:
.sp 2
.in +5
.ta 5
.ti -5
-c*	prepend the string * to the output stream.  Implies -s.
Each module name is output preceded by a space; the output stream 
is terminated with a newline.  Hence,
.bd
lord
can be used to build a command line.
.sp
.ti -5
-d*	use the string * as a fromat for defs.
.sp
.ti -5
-i	ignore other stuff.  Default is to complain about any line
not recognizable as a def or ref.
.sp
.ti -5
-r*	use the string * as a format for refs.
.sp
.ti -5
-s	suppress output of defs and refs; output only module names
in order.
.in -5
.sp 2
Up to ten formats may be input for defs, and up to ten for refs.

If no -d flags are given, 
.bd
lord
uses the default def formats: "0x????????B", "0x????????D", 
"0x????????T", 0x????B", "0x????D", "0x????????U" and "0x????U".
These are compatible with the default output of rel (obj).

If there  are any circular dependencies among the modules, 
.bd
lord
writes "not completely sorted" to STDERR and outputs a 
partially-ordered list.
In general, rearrangements are made only when necessary, so an ordered
set of modules should pass through
.bd
lord
unchanged.
.sp 2
.in -5
.bd
RETURNS
.in +5
.br
.bd
Lord
returns success if no error messages are printed, otherwise failure.
.sp 2
.in -5
.bd
EXAMPLE
.in +5
.br
To create a library of ordered object modules under Idris:
.sp
.ti +4
.bd
% rel *.0 | lord -c"lib libx.a -c" | sh
.sp 2
To order a set of objects using Micronix nm:
.sp 
.in +4
.bd
% nm *.o > nmlist
.br
.bd
% lord < nmlist -c"ar r libx.a" | \
.br
.bd
-d"??????T" -d"??????D" -d"??????B" -r"??????U" | sh
.in -4
.sp 2
.in -5
.bd
SEE ALSO
.in +5
.br
lib (1), obj (1)

NOTE: This program and documentation are products of Whitesmiths, Ltd.
