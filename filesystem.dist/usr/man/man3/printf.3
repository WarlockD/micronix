.he "printf (3s)                  3/22/82                  printf (3s)" 
.fo "                               -#-"
.in 5
.rm 65
.bd
SUBROUTINE(S)
.in +5
.br
.bd
printf, fprintf, sprintf
- formatted output conversion

.in -5
.bd
C        
.in +5
.br
.bd
# include <stdio.h>
.sp
.bd 2
printf(format [, arg]...)
.br
char *format;
.sp
.bd 3
fprintf(stream, format [, arg] ...)
.br
FILE *stream;
.br
char *format;
.sp
.bd 2
sprintf(s, format [, arg ] ...)
.br
char *s, format;
.sp 2
.in -5
.bd
FUNCTION
.in +5
.br
.bd
Printf
places output on
.bd
stdout
- the standard output stream.

.bd
Fprintf
places output on
.bd
stream
- the named output.

.bd
Sprintf
places output in the
.bd
s
string.  This string is followed by a "\0" character.

These functions convert, format and print their arguments under the
control of the first argument.  This first argument will be a character
string containing 1) plain characters that are copied to the output
stream, and 2) conversion specifications which enable conversion
and printing of the next
.bd
printf
argument.

The conversion specifications are introduced by the
.bd
%
character.  The options listed below may follow this character:
.sp 2
.in +4
A minus sign (-) specifying 
.ul
left adjustment
of the converted value in the indicated field.

A string of digits specifying
.ul
field width.
Converted values with fewer characters than the indicated field
width may be blank-padded to make up the difference, unless the
field width begins with a 0, in which case it will be zero-padded.

A period (.) may separate the field width from the next string of digits.

An additional digit string may be added specifying a
.ul
precision,
or the number of digits that will appear after the decimal point.  This
is used for
.bd
-e
and 
.bd
-f
conversions, or to specify the maximum number of characters
to be printed from a string. [An asterisk (*) may indicate
field width or precision, in which case an integer argument
indicates the field width or precision.]

A
.bd
1
may be specified with
.bd
d, o, x,    
or
.bd
u
to indicate correspondence with a long integer argument.  The
same thing may be accomplished with a capitalized conversion code.

Anù characteò maù bå giveî thaô specifieó thå typå oæ conversioî 
tï bå executed.
.in -4
.sp 2
The conversion characters are listed and described below:
.sp 2
.in +4
.ti -1
.bd
dox
.br
Integer
.bd
arg
is converted to decimal, octal or hexadecimal notation.
.sp 2
.ti -1
.bd
f
.br
Float or double
.bd
arg
is converted to decimal notation in the following format:

.ce
.bd
[-]ddd.ddd

Thå precisioî specificatioî determineó thå amounô oæ "d"s®  Á 
precisioî oæ 0 results in no digits; defaulô is
six digits.
.sp 2
.ti -1
.bd
e
.br
Float or double
.bd
arg
is converted in the following format:

.ce
.bd
[-]d.ddde+dd

One digit before and one number after the decimal point equal the
precision specification. By default, six digits are produced.
.sp 2
.ti -1
.bd
g
.br
Float or double
.bd
arg
is printed in one of the formats listed above, depending upon which one
specifies full precision in the least amount of space.
.bp
.ti -1
.bd
c
.br
Character
.bd
arg
printed; NULL characters are ignored.
.sp
.ti -1
.bd
s
.br
Character
.bd
arg
is defined as a character pointer; string characters are printed up
to a NULL character, or if specified, up to point indicated by
the precision specification.
.sp 2
.ti -1
.bd
%
.br
Only the
.bd
% 
is printed; arguments are not converted.
.sp 2
.in 0
.in 5
.bd
NOTES
.in +5
.br
Small or non-existent fields do not cause truncation.  Fields are
padded when the specified field exceeds the actual width.

Fields larger than 128 characters will fail.

.bd
Putc
(3) prints the characters generated by
.bd
printf.
.sp 2
.in -5
.bd
ALSO READ
.in +5
.br
putc (3), scanf (3), ecvt (3)

