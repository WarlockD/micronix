.he "fork (2)                     3/19/82                     fork (2)"
.fo "				    -#-"
.in 5
.rm 65
.bd
NAME
.in +5
.br
.bd
fork
- create a new process


.in -5
.bd
C
.in +5
.br
fork()


.in -5
.bd
FUNCTION      
.in +5
.br
.bd
Fork
is the only way to create a new process.
The calling process splits into a "parent"
and a "child". The child's core image is a
copy of the parent's, open files are shared,
and signals remain unchanged.
.bd
Fork()
returns a zero to the child process,
while it returns a non-zero number to the parent.
This is the process ID of the child,
and is used by
.bd
wait
(2) and
.bd
kill
(2).


.in -5
.bd
RETURNS
.in +5
.br
.bd
Fork()
returns a zero to the child, and the non-zero
process ID of the child to the parent. 
A return of -1 (not just negative) indicates a
temporary lack of process space.


.in -5
.bd
ASSEMBLER
.in +5
.br
.bd
(fork = 2)
.br
.bd
sys; fork
.br
.bd
(child return)
.br
.bd
(+ 3 bytes)
.br
.bd
(parent return) (child id in hl)


.in -5
.bd
RETURNS
.in +5
.br
The child process returns to the location
immediately following the fork.
The parent skips three bytes before returning,
and receives the child ID in hl.
If a new process cannot be created,
the carry flag is set on return to the
parent (and the child return
never happens).
